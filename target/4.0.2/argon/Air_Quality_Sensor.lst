
/Users/friedl/Desktop/Projects/Air_Quality_Sensor/target/4.0.2/argon/Air_Quality_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000020b4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b60d0  000b60d0  000060d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b60f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e63c  000b60f8  0001e63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000148  2003e6a8  2003e6a8  0002e6a8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6164  000b6164  00026164  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b618c  000b618c  0002618c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00111710  00000000  00000000  00026190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011ec2  00000000  00000000  001378a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00038137  00000000  00000000  00149762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002778  00000000  00000000  00181899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009cf8  00000000  00000000  00184011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037b00  00000000  00000000  0018dd09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003bacd  00000000  00000000  001c5809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136e1f  00000000  00000000  002012d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006f54  00000000  00000000  003380f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fdf2 	bl	b5c16 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fdfa 	bl	b5c32 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e63c 	.word	0x2003e63c
   b4048:	000b60f8 	.word	0x000b60f8
   b404c:	2003e6a8 	.word	0x2003e6a8
   b4050:	2003e6a8 	.word	0x2003e6a8
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fd1d 	bl	b5a9c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b60a0 	.word	0x000b60a0
   b407c:	000b60c4 	.word	0x000b60c4

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b838 	b.w	b40f4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f993 	bl	b43b0 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bcbd 	b.w	b5a0c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bcf7 	b.w	b4a84 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bcf5 	b.w	b4a84 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bcfb 	b.w	b4a94 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0>:
    static bool _function(const char *funcKey, int (T::*func)(String), T *instance) {
      using namespace std::placeholders;
      return _function(funcKey, std::bind(func, instance, _1));
    }

    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   b40ae:	b513      	push	{r0, r1, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b40b0:	4313      	orrs	r3, r2
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40b2:	f88d 3000 	strb.w	r3, [sp]
   b40b6:	2200      	movs	r2, #0
   b40b8:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   b40ba:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40bc:	f000 fe80 	bl	b4dc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   b40c0:	4620      	mov	r0, r4
   b40c2:	b002      	add	sp, #8
   b40c4:	bd10      	pop	{r4, pc}

000b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b40c6:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b40c8:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b40ca:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b40cc:	b17c      	cbz	r4, b40ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b40ce:	6863      	ldr	r3, [r4, #4]
   b40d0:	3b01      	subs	r3, #1
   b40d2:	6063      	str	r3, [r4, #4]
   b40d4:	b95b      	cbnz	r3, b40ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b40d6:	6823      	ldr	r3, [r4, #0]
   b40d8:	4620      	mov	r0, r4
   b40da:	689b      	ldr	r3, [r3, #8]
   b40dc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b40de:	68a3      	ldr	r3, [r4, #8]
   b40e0:	3b01      	subs	r3, #1
   b40e2:	60a3      	str	r3, [r4, #8]
   b40e4:	b91b      	cbnz	r3, b40ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b40e6:	6823      	ldr	r3, [r4, #0]
   b40e8:	4620      	mov	r0, r4
   b40ea:	68db      	ldr	r3, [r3, #12]
   b40ec:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b40ee:	4628      	mov	r0, r5
   b40f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b40f4 <setup>:
    const float absoluteHumidity = 216.7f * ((humidity / 100.0f) * 6.112f * exp((17.62f * temperature) / (243.12f + temperature)) / (273.15f + temperature)); // [g/m^3]
    const uint32_t absoluteHumidityScaled = static_cast<uint32_t>(1000.0f * absoluteHumidity); // [mg/m^3]
    return absoluteHumidityScaled;
}

void setup() {
   b40f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Serial.begin(115200);
   b40f6:	f001 fbb7 	bl	b5868 <_Z16_fetch_usbserialv>
   b40fa:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40fe:	f001 fba1 	bl	b5844 <_ZN9USBSerial5beginEl>
  while (!Serial) { delay(10); } // Wait for serial console to open!
   b4102:	f001 fbb1 	bl	b5868 <_Z16_fetch_usbserialv>
   b4106:	f001 fba4 	bl	b5852 <_ZN9USBSerialcvbEv>
   b410a:	b918      	cbnz	r0, b4114 <setup+0x20>
   b410c:	200a      	movs	r0, #10
   b410e:	f000 fcf1 	bl	b4af4 <delay>
   b4112:	e7f6      	b.n	b4102 <setup+0xe>

  Particle.publish("SGP30 test", PRIVATE);
   b4114:	4d1f      	ldr	r5, [pc, #124]	; (b4194 <setup+0xa0>)
   b4116:	4920      	ldr	r1, [pc, #128]	; (b4198 <setup+0xa4>)
   b4118:	782a      	ldrb	r2, [r5, #0]

  if (! sgp.begin()){
   b411a:	4c20      	ldr	r4, [pc, #128]	; (b419c <setup+0xa8>)
  Particle.publish("SGP30 test", PRIVATE);
   b411c:	f04f 0300 	mov.w	r3, #0
   b4120:	4668      	mov	r0, sp
   b4122:	f7ff ffc4 	bl	b40ae <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4126:	a801      	add	r0, sp, #4
   b4128:	f7ff ffcd 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  if (! sgp.begin()){
   b412c:	f001 fd04 	bl	b5b38 <_Z19__fetch_global_Wirev>
   b4130:	2201      	movs	r2, #1
   b4132:	4601      	mov	r1, r0
   b4134:	4620      	mov	r0, r4
   b4136:	f000 fa66 	bl	b4606 <_ZN14Adafruit_SGP305beginEP7TwoWireb>
   b413a:	782a      	ldrb	r2, [r5, #0]
   b413c:	b940      	cbnz	r0, b4150 <setup+0x5c>
    Particle.publish("Sensor not found", PRIVATE);
   b413e:	4603      	mov	r3, r0
   b4140:	4917      	ldr	r1, [pc, #92]	; (b41a0 <setup+0xac>)
   b4142:	4668      	mov	r0, sp
   b4144:	f7ff ffb3 	bl	b40ae <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b4148:	a801      	add	r0, sp, #4
   b414a:	f7ff ffbc 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    while (1);
   b414e:	e7fe      	b.n	b414e <setup+0x5a>
  }
  Particle.publish("Found SGP30 serial #", PRIVATE);
   b4150:	f04f 0300 	mov.w	r3, #0
   b4154:	4913      	ldr	r1, [pc, #76]	; (b41a4 <setup+0xb0>)
   b4156:	4668      	mov	r0, sp
   b4158:	f7ff ffa9 	bl	b40ae <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b415c:	a801      	add	r0, sp, #4
   b415e:	f7ff ffb2 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Serial.print(sgp.serialnumber[0], HEX);
   b4162:	f001 fb81 	bl	b5868 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4166:	8921      	ldrh	r1, [r4, #8]
   b4168:	2210      	movs	r2, #16
   b416a:	f001 f9ca 	bl	b5502 <_ZN5Print11printNumberEmh>
  Serial.print(sgp.serialnumber[1], HEX);
   b416e:	f001 fb7b 	bl	b5868 <_Z16_fetch_usbserialv>
   b4172:	8961      	ldrh	r1, [r4, #10]
   b4174:	2210      	movs	r2, #16
   b4176:	f001 f9c4 	bl	b5502 <_ZN5Print11printNumberEmh>
  Serial.println(sgp.serialnumber[2], HEX);
   b417a:	f001 fb75 	bl	b5868 <_Z16_fetch_usbserialv>
   b417e:	89a1      	ldrh	r1, [r4, #12]
   b4180:	2210      	movs	r2, #16
   b4182:	4605      	mov	r5, r0
   b4184:	f001 f9bd 	bl	b5502 <_ZN5Print11printNumberEmh>
        n += println();
   b4188:	4628      	mov	r0, r5

  // If you have a baseline measurement from before you can assign it to start, to 'self-calibrate'
  //sgp.setIAQBaseline(0x8E68, 0x8F41);  // Will vary for each sensor!
}
   b418a:	b003      	add	sp, #12
   b418c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   b4190:	f001 b9a1 	b.w	b54d6 <_ZN5Print7printlnEv>
   b4194:	2003e6a8 	.word	0x2003e6a8
   b4198:	000b5ddc 	.word	0x000b5ddc
   b419c:	2003e6b0 	.word	0x2003e6b0
   b41a0:	000b5de7 	.word	0x000b5de7
   b41a4:	000b5df8 	.word	0x000b5df8

000b41a8 <loop.part.0>:

int counter = 0;
void loop() {
   b41a8:	b570      	push	{r4, r5, r6, lr}

  if (! sgp.IAQmeasure()) {
    Serial.println("Measurement failed");
    return;
  }
  Particle.publish("TVOC " + String(sgp.TVOC) + " ppb\t", PRIVATE);
   b41aa:	4e72      	ldr	r6, [pc, #456]	; (b4374 <loop.part.0+0x1cc>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b41ac:	4972      	ldr	r1, [pc, #456]	; (b4378 <loop.part.0+0x1d0>)
   b41ae:	4c73      	ldr	r4, [pc, #460]	; (b437c <loop.part.0+0x1d4>)
void loop() {
   b41b0:	b08c      	sub	sp, #48	; 0x30
   b41b2:	a808      	add	r0, sp, #32
   b41b4:	f001 fa15 	bl	b55e2 <_ZN6StringC1EPK19__FlashStringHelper>
  Particle.publish("TVOC " + String(sgp.TVOC) + " ppb\t", PRIVATE);
   b41b8:	220a      	movs	r2, #10
   b41ba:	8831      	ldrh	r1, [r6, #0]
   b41bc:	a804      	add	r0, sp, #16
   b41be:	f001 fa36 	bl	b562e <_ZN6StringC1Eih>
   b41c2:	a904      	add	r1, sp, #16
   b41c4:	a808      	add	r0, sp, #32
   b41c6:	f001 fa5c 	bl	b5682 <_ZplRK15StringSumHelperRK6String>
   b41ca:	496d      	ldr	r1, [pc, #436]	; (b4380 <loop.part.0+0x1d8>)
   b41cc:	f001 fa65 	bl	b569a <_ZplRK15StringSumHelperPKc>
        val_(0) {
   b41d0:	2500      	movs	r5, #0
   b41d2:	462b      	mov	r3, r5
   b41d4:	7822      	ldrb	r2, [r4, #0]
   b41d6:	6801      	ldr	r1, [r0, #0]
   b41d8:	a802      	add	r0, sp, #8
   b41da:	f7ff ff68 	bl	b40ae <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b41de:	a803      	add	r0, sp, #12
   b41e0:	f7ff ff71 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b41e4:	a804      	add	r0, sp, #16
   b41e6:	f001 f9b1 	bl	b554c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b41ea:	a808      	add	r0, sp, #32
   b41ec:	f001 f9ae 	bl	b554c <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   b41f0:	4964      	ldr	r1, [pc, #400]	; (b4384 <loop.part.0+0x1dc>)
   b41f2:	a808      	add	r0, sp, #32
   b41f4:	f001 f9f5 	bl	b55e2 <_ZN6StringC1EPK19__FlashStringHelper>
  Particle.publish("eCO2 " + String(sgp.eCO2) +" ppm", PRIVATE);
   b41f8:	220a      	movs	r2, #10
   b41fa:	8871      	ldrh	r1, [r6, #2]
   b41fc:	a804      	add	r0, sp, #16
   b41fe:	f001 fa16 	bl	b562e <_ZN6StringC1Eih>
   b4202:	a904      	add	r1, sp, #16
   b4204:	a808      	add	r0, sp, #32
   b4206:	f001 fa3c 	bl	b5682 <_ZplRK15StringSumHelperRK6String>
   b420a:	495f      	ldr	r1, [pc, #380]	; (b4388 <loop.part.0+0x1e0>)
   b420c:	f001 fa45 	bl	b569a <_ZplRK15StringSumHelperPKc>
   b4210:	7822      	ldrb	r2, [r4, #0]
   b4212:	6801      	ldr	r1, [r0, #0]
   b4214:	462b      	mov	r3, r5
   b4216:	a802      	add	r0, sp, #8
   b4218:	f7ff ff49 	bl	b40ae <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b421c:	a803      	add	r0, sp, #12
   b421e:	f7ff ff52 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4222:	a804      	add	r0, sp, #16
   b4224:	f001 f992 	bl	b554c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4228:	a808      	add	r0, sp, #32
   b422a:	f001 f98f 	bl	b554c <_ZN6StringD1Ev>

      } else if (sgp.TVOC > 2201) {

  }

  if (! sgp.IAQmeasureRaw()) {
   b422e:	4630      	mov	r0, r6
   b4230:	f000 fa50 	bl	b46d4 <_ZN14Adafruit_SGP3013IAQmeasureRawEv>
   b4234:	b948      	cbnz	r0, b424a <loop.part.0+0xa2>
    Particle.publish("Raw Measurement failed", PRIVATE);
   b4236:	7822      	ldrb	r2, [r4, #0]
   b4238:	4954      	ldr	r1, [pc, #336]	; (b438c <loop.part.0+0x1e4>)
   b423a:	4603      	mov	r3, r0
  if (counter == 30) {
    counter = 0;

    uint16_t TVOC_base, eCO2_base;
    if (! sgp.getIAQBaseline(&eCO2_base, &TVOC_base)) {
      Particle.publish("Failed to get baseline readings", PRIVATE);
   b423c:	a808      	add	r0, sp, #32
   b423e:	f7ff ff36 	bl	b40ae <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b4242:	a809      	add	r0, sp, #36	; 0x24
   b4244:	f7ff ff3f 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      return;
   b4248:	e048      	b.n	b42dc <loop.part.0+0x134>
	StringSumHelper(const char *p) : String(p) {}
   b424a:	4951      	ldr	r1, [pc, #324]	; (b4390 <loop.part.0+0x1e8>)
   b424c:	a808      	add	r0, sp, #32
   b424e:	f001 f9c8 	bl	b55e2 <_ZN6StringC1EPK19__FlashStringHelper>
  Particle.publish("Raw H2 " + String(sgp.rawH2) + " \t", PRIVATE);
   b4252:	220a      	movs	r2, #10
   b4254:	88b1      	ldrh	r1, [r6, #4]
   b4256:	a804      	add	r0, sp, #16
   b4258:	f001 f9e9 	bl	b562e <_ZN6StringC1Eih>
   b425c:	a904      	add	r1, sp, #16
   b425e:	a808      	add	r0, sp, #32
   b4260:	f001 fa0f 	bl	b5682 <_ZplRK15StringSumHelperRK6String>
   b4264:	494b      	ldr	r1, [pc, #300]	; (b4394 <loop.part.0+0x1ec>)
   b4266:	f001 fa18 	bl	b569a <_ZplRK15StringSumHelperPKc>
   b426a:	462b      	mov	r3, r5
   b426c:	7822      	ldrb	r2, [r4, #0]
   b426e:	6801      	ldr	r1, [r0, #0]
   b4270:	a802      	add	r0, sp, #8
   b4272:	f7ff ff1c 	bl	b40ae <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b4276:	a803      	add	r0, sp, #12
   b4278:	f7ff ff25 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b427c:	a804      	add	r0, sp, #16
   b427e:	f001 f965 	bl	b554c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4282:	a808      	add	r0, sp, #32
   b4284:	f001 f962 	bl	b554c <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   b4288:	4943      	ldr	r1, [pc, #268]	; (b4398 <loop.part.0+0x1f0>)
   b428a:	a808      	add	r0, sp, #32
   b428c:	f001 f9a9 	bl	b55e2 <_ZN6StringC1EPK19__FlashStringHelper>
  Particle.publish("Raw Ethanol "+ String (sgp.rawEthanol) + "", PRIVATE);
   b4290:	220a      	movs	r2, #10
   b4292:	88f1      	ldrh	r1, [r6, #6]
   b4294:	a804      	add	r0, sp, #16
   b4296:	f001 f9ca 	bl	b562e <_ZN6StringC1Eih>
   b429a:	a904      	add	r1, sp, #16
   b429c:	a808      	add	r0, sp, #32
   b429e:	f001 f9f0 	bl	b5682 <_ZplRK15StringSumHelperRK6String>
   b42a2:	493e      	ldr	r1, [pc, #248]	; (b439c <loop.part.0+0x1f4>)
   b42a4:	f001 f9f9 	bl	b569a <_ZplRK15StringSumHelperPKc>
   b42a8:	7822      	ldrb	r2, [r4, #0]
   b42aa:	6801      	ldr	r1, [r0, #0]
   b42ac:	462b      	mov	r3, r5
   b42ae:	a802      	add	r0, sp, #8
   b42b0:	f7ff fefd 	bl	b40ae <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b42b4:	a803      	add	r0, sp, #12
   b42b6:	f7ff ff06 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b42ba:	a804      	add	r0, sp, #16
   b42bc:	f001 f946 	bl	b554c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b42c0:	a808      	add	r0, sp, #32
   b42c2:	f001 f943 	bl	b554c <_ZN6StringD1Ev>
  delay(10000);
   b42c6:	f242 7010 	movw	r0, #10000	; 0x2710
   b42ca:	f000 fc13 	bl	b4af4 <delay>
  counter++;
   b42ce:	4b34      	ldr	r3, [pc, #208]	; (b43a0 <loop.part.0+0x1f8>)
   b42d0:	681a      	ldr	r2, [r3, #0]
  if (counter == 30) {
   b42d2:	2a1d      	cmp	r2, #29
  counter++;
   b42d4:	f102 0101 	add.w	r1, r2, #1
  if (counter == 30) {
   b42d8:	d002      	beq.n	b42e0 <loop.part.0+0x138>
  counter++;
   b42da:	6019      	str	r1, [r3, #0]
    }
    Particle.publish("****Baseline values: eCO2: 0x" + String(eCO2_base, HEX), PRIVATE);
    Particle.publish(" & TVOC: 0x" + String(TVOC_base, HEX), PRIVATE);
  }
   b42dc:	b00c      	add	sp, #48	; 0x30
   b42de:	bd70      	pop	{r4, r5, r6, pc}
    if (! sgp.getIAQBaseline(&eCO2_base, &TVOC_base)) {
   b42e0:	aa01      	add	r2, sp, #4
   b42e2:	f10d 0106 	add.w	r1, sp, #6
   b42e6:	4630      	mov	r0, r6
    counter = 0;
   b42e8:	601d      	str	r5, [r3, #0]
    if (! sgp.getIAQBaseline(&eCO2_base, &TVOC_base)) {
   b42ea:	f000 fa0c 	bl	b4706 <_ZN14Adafruit_SGP3014getIAQBaselineEPtS0_>
   b42ee:	b918      	cbnz	r0, b42f8 <loop.part.0+0x150>
      Particle.publish("Failed to get baseline readings", PRIVATE);
   b42f0:	7822      	ldrb	r2, [r4, #0]
   b42f2:	492c      	ldr	r1, [pc, #176]	; (b43a4 <loop.part.0+0x1fc>)
   b42f4:	4603      	mov	r3, r0
   b42f6:	e7a1      	b.n	b423c <loop.part.0+0x94>
	StringSumHelper(const char *p) : String(p) {}
   b42f8:	492b      	ldr	r1, [pc, #172]	; (b43a8 <loop.part.0+0x200>)
   b42fa:	a808      	add	r0, sp, #32
   b42fc:	f001 f971 	bl	b55e2 <_ZN6StringC1EPK19__FlashStringHelper>
    Particle.publish("****Baseline values: eCO2: 0x" + String(eCO2_base, HEX), PRIVATE);
   b4300:	2210      	movs	r2, #16
   b4302:	eb0d 0002 	add.w	r0, sp, r2
   b4306:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b430a:	f001 f990 	bl	b562e <_ZN6StringC1Eih>
   b430e:	a904      	add	r1, sp, #16
   b4310:	a808      	add	r0, sp, #32
   b4312:	f001 f9b6 	bl	b5682 <_ZplRK15StringSumHelperRK6String>
   b4316:	462b      	mov	r3, r5
   b4318:	7822      	ldrb	r2, [r4, #0]
   b431a:	6801      	ldr	r1, [r0, #0]
   b431c:	a802      	add	r0, sp, #8
   b431e:	f7ff fec6 	bl	b40ae <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b4322:	a803      	add	r0, sp, #12
   b4324:	f7ff fecf 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4328:	a804      	add	r0, sp, #16
   b432a:	f001 f90f 	bl	b554c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b432e:	a808      	add	r0, sp, #32
   b4330:	f001 f90c 	bl	b554c <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   b4334:	491d      	ldr	r1, [pc, #116]	; (b43ac <loop.part.0+0x204>)
   b4336:	a808      	add	r0, sp, #32
   b4338:	f001 f953 	bl	b55e2 <_ZN6StringC1EPK19__FlashStringHelper>
    Particle.publish(" & TVOC: 0x" + String(TVOC_base, HEX), PRIVATE);
   b433c:	2210      	movs	r2, #16
   b433e:	eb0d 0002 	add.w	r0, sp, r2
   b4342:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   b4346:	f001 f972 	bl	b562e <_ZN6StringC1Eih>
   b434a:	a904      	add	r1, sp, #16
   b434c:	a808      	add	r0, sp, #32
   b434e:	f001 f998 	bl	b5682 <_ZplRK15StringSumHelperRK6String>
   b4352:	7822      	ldrb	r2, [r4, #0]
   b4354:	6801      	ldr	r1, [r0, #0]
   b4356:	462b      	mov	r3, r5
   b4358:	a802      	add	r0, sp, #8
   b435a:	f7ff fea8 	bl	b40ae <_ZN10CloudClass7publishEPKcN8particle5FlagsI15PublishFlagTypehEES5_.isra.0>
   b435e:	a803      	add	r0, sp, #12
   b4360:	f7ff feb1 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4364:	a804      	add	r0, sp, #16
   b4366:	f001 f8f1 	bl	b554c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b436a:	a808      	add	r0, sp, #32
   b436c:	f001 f8ee 	bl	b554c <_ZN6StringD1Ev>
   b4370:	e7b4      	b.n	b42dc <loop.part.0+0x134>
   b4372:	bf00      	nop
   b4374:	2003e6b0 	.word	0x2003e6b0
   b4378:	000b5e0d 	.word	0x000b5e0d
   b437c:	2003e6a8 	.word	0x2003e6a8
   b4380:	000b5e13 	.word	0x000b5e13
   b4384:	000b5e19 	.word	0x000b5e19
   b4388:	000b5e1f 	.word	0x000b5e1f
   b438c:	000b5e24 	.word	0x000b5e24
   b4390:	000b5e3b 	.word	0x000b5e3b
   b4394:	000b5e43 	.word	0x000b5e43
   b4398:	000b5e46 	.word	0x000b5e46
   b439c:	000b5e45 	.word	0x000b5e45
   b43a0:	2003e6ac 	.word	0x2003e6ac
   b43a4:	000b5e53 	.word	0x000b5e53
   b43a8:	000b5e73 	.word	0x000b5e73
   b43ac:	000b5e91 	.word	0x000b5e91

000b43b0 <loop>:
void loop() {
   b43b0:	b508      	push	{r3, lr}
  if (! sgp.IAQmeasure()) {
   b43b2:	4807      	ldr	r0, [pc, #28]	; (b43d0 <loop+0x20>)
   b43b4:	f000 f975 	bl	b46a2 <_ZN14Adafruit_SGP3010IAQmeasureEv>
   b43b8:	b930      	cbnz	r0, b43c8 <loop+0x18>
    Serial.println("Measurement failed");
   b43ba:	f001 fa55 	bl	b5868 <_Z16_fetch_usbserialv>
   b43be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Measurement failed");
   b43c2:	4904      	ldr	r1, [pc, #16]	; (b43d4 <loop+0x24>)
   b43c4:	f001 b893 	b.w	b54ee <_ZN5Print7printlnEPKc>
   b43c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b43cc:	f7ff beec 	b.w	b41a8 <loop.part.0>
   b43d0:	2003e6b0 	.word	0x2003e6b0
   b43d4:	000b5e28 	.word	0x000b5e28

000b43d8 <_GLOBAL__sub_I_sgp>:
        val_(val) {
   b43d8:	4b02      	ldr	r3, [pc, #8]	; (b43e4 <_GLOBAL__sub_I_sgp+0xc>)
Adafruit_SGP30 sgp;
   b43da:	4803      	ldr	r0, [pc, #12]	; (b43e8 <_GLOBAL__sub_I_sgp+0x10>)
   b43dc:	2201      	movs	r2, #1
   b43de:	701a      	strb	r2, [r3, #0]
   b43e0:	f000 b89d 	b.w	b451e <_ZN14Adafruit_SGP30C1Ev>
   b43e4:	2003e6a8 	.word	0x2003e6a8
   b43e8:	2003e6b0 	.word	0x2003e6b0

000b43ec <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b43ec:	6042      	str	r2, [r0, #4]
  _begun = false;
   b43ee:	2200      	movs	r2, #0
   b43f0:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
   b43f2:	2220      	movs	r2, #32
  _addr = addr;
   b43f4:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b43f6:	60c2      	str	r2, [r0, #12]
#endif
}
   b43f8:	4770      	bx	lr

000b43fa <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b43fa:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b43fc:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b43fe:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b4400:	b153      	cbz	r3, b4418 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b4402:	7821      	ldrb	r1, [r4, #0]
   b4404:	6860      	ldr	r0, [r4, #4]
   b4406:	f000 fefe 	bl	b5206 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b440a:	6860      	ldr	r0, [r4, #4]
   b440c:	f000 ff03 	bl	b5216 <_ZN7TwoWire15endTransmissionEv>
   b4410:	fab0 f080 	clz	r0, r0
   b4414:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   b4416:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b4418:	2101      	movs	r1, #1
   b441a:	f000 f803 	bl	b4424 <_ZN18Adafruit_I2CDevice5beginEb>
   b441e:	2800      	cmp	r0, #0
   b4420:	d1ef      	bne.n	b4402 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b4422:	e7f8      	b.n	b4416 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b4424 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b4424:	b538      	push	{r3, r4, r5, lr}
   b4426:	4604      	mov	r4, r0
  _wire->begin();
   b4428:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b442a:	460d      	mov	r5, r1
  _wire->begin();
   b442c:	f000 febc 	bl	b51a8 <_ZN7TwoWire5beginEv>
  _begun = true;
   b4430:	2001      	movs	r0, #1
   b4432:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b4434:	b125      	cbz	r5, b4440 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b4436:	4620      	mov	r0, r4
}
   b4438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b443c:	f7ff bfdd 	b.w	b43fa <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b4440:	bd38      	pop	{r3, r4, r5, pc}

000b4442 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b4442:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4446:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b444a:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b444c:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b444e:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b4450:	4432      	add	r2, r6
   b4452:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b4454:	4604      	mov	r4, r0
   b4456:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b4458:	d902      	bls.n	b4460 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b445a:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   b445c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b4460:	7801      	ldrb	r1, [r0, #0]
   b4462:	6840      	ldr	r0, [r0, #4]
   b4464:	f000 fecf 	bl	b5206 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
   b4468:	b97e      	cbnz	r6, b448a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b446a:	6860      	ldr	r0, [r4, #4]
   b446c:	6803      	ldr	r3, [r0, #0]
   b446e:	462a      	mov	r2, r5
   b4470:	68db      	ldr	r3, [r3, #12]
   b4472:	4641      	mov	r1, r8
   b4474:	4798      	blx	r3
   b4476:	4285      	cmp	r5, r0
   b4478:	d1ef      	bne.n	b445a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b447a:	6860      	ldr	r0, [r4, #4]
   b447c:	4639      	mov	r1, r7
   b447e:	f000 fec6 	bl	b520e <_ZN7TwoWire15endTransmissionEh>
   b4482:	fab0 f080 	clz	r0, r0
   b4486:	0940      	lsrs	r0, r0, #5
   b4488:	e7e8      	b.n	b445c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
   b448a:	f1b9 0f00 	cmp.w	r9, #0
   b448e:	d0ec      	beq.n	b446a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b4490:	6860      	ldr	r0, [r4, #4]
   b4492:	6803      	ldr	r3, [r0, #0]
   b4494:	4632      	mov	r2, r6
   b4496:	68db      	ldr	r3, [r3, #12]
   b4498:	4649      	mov	r1, r9
   b449a:	4798      	blx	r3
   b449c:	4286      	cmp	r6, r0
   b449e:	d1dc      	bne.n	b445a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b44a0:	e7e3      	b.n	b446a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b44a2 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   b44a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b44a6:	4615      	mov	r5, r2
   b44a8:	4604      	mov	r4, r0
   b44aa:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   b44ac:	b2d2      	uxtb	r2, r2
   b44ae:	7801      	ldrb	r1, [r0, #0]
   b44b0:	6840      	ldr	r0, [r0, #4]
   b44b2:	f000 fe96 	bl	b51e2 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   b44b6:	4285      	cmp	r5, r0
   b44b8:	d10d      	bne.n	b44d6 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   b44ba:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   b44bc:	fa1f f887 	uxth.w	r8, r7
   b44c0:	45a8      	cmp	r8, r5
   b44c2:	f107 0701 	add.w	r7, r7, #1
   b44c6:	d209      	bcs.n	b44dc <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   b44c8:	6860      	ldr	r0, [r4, #4]
   b44ca:	6803      	ldr	r3, [r0, #0]
   b44cc:	695b      	ldr	r3, [r3, #20]
   b44ce:	4798      	blx	r3
   b44d0:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   b44d4:	e7f2      	b.n	b44bc <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   b44d6:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b44d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b44dc:	2001      	movs	r0, #1
   b44de:	e7fb      	b.n	b44d8 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000b44e0 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b44e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b44e4:	4607      	mov	r7, r0
   b44e6:	4688      	mov	r8, r1
   b44e8:	4616      	mov	r6, r2
   b44ea:	4699      	mov	r9, r3
  size_t pos = 0;
   b44ec:	2500      	movs	r5, #0
  while (pos < len) {
   b44ee:	42b5      	cmp	r5, r6
   b44f0:	d212      	bcs.n	b4518 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   b44f2:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   b44f4:	1b74      	subs	r4, r6, r5
   b44f6:	4294      	cmp	r4, r2
   b44f8:	bf28      	it	cs
   b44fa:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   b44fc:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   b44fe:	42ab      	cmp	r3, r5
   b4500:	bf94      	ite	ls
   b4502:	464b      	movls	r3, r9
   b4504:	2300      	movhi	r3, #0
   b4506:	4622      	mov	r2, r4
   b4508:	eb08 0105 	add.w	r1, r8, r5
   b450c:	4638      	mov	r0, r7
   b450e:	f7ff ffc8 	bl	b44a2 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   b4512:	b110      	cbz	r0, b451a <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   b4514:	4425      	add	r5, r4
  while (pos < len) {
   b4516:	e7ea      	b.n	b44ee <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   b4518:	2001      	movs	r0, #1
}
   b451a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b451e <_ZN14Adafruit_SGP30C1Ev>:
#include "Arduino.h"

/*!
 *  @brief  Instantiates a new SGP30 class
 */
Adafruit_SGP30::Adafruit_SGP30() {}
   b451e:	2200      	movs	r2, #0
   b4520:	6102      	str	r2, [r0, #16]
   b4522:	4770      	bx	lr

000b4524 <_ZN14Adafruit_SGP3011generateCRCEPhh>:

uint8_t Adafruit_SGP30::generateCRC(uint8_t *data, uint8_t datalen) {
  // calculates 8-Bit checksum with given polynomial
  uint8_t crc = SGP30_CRC8_INIT;

  for (uint8_t i = 0; i < datalen; i++) {
   b4524:	440a      	add	r2, r1
  uint8_t crc = SGP30_CRC8_INIT;
   b4526:	20ff      	movs	r0, #255	; 0xff
  for (uint8_t i = 0; i < datalen; i++) {
   b4528:	428a      	cmp	r2, r1
   b452a:	d011      	beq.n	b4550 <_ZN14Adafruit_SGP3011generateCRCEPhh+0x2c>
    crc ^= data[i];
   b452c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4530:	4058      	eors	r0, r3
   b4532:	2308      	movs	r3, #8
    for (uint8_t b = 0; b < 8; b++) {
      if (crc & 0x80)
   b4534:	f010 0f80 	tst.w	r0, #128	; 0x80
    for (uint8_t b = 0; b < 8; b++) {
   b4538:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b453c:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (crc << 1) ^ SGP30_CRC8_POLYNOMIAL;
   b4540:	bf18      	it	ne
   b4542:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (uint8_t b = 0; b < 8; b++) {
   b4546:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      else
        crc <<= 1;
   b454a:	b2c0      	uxtb	r0, r0
    for (uint8_t b = 0; b < 8; b++) {
   b454c:	d1f2      	bne.n	b4534 <_ZN14Adafruit_SGP3011generateCRCEPhh+0x10>
   b454e:	e7eb      	b.n	b4528 <_ZN14Adafruit_SGP3011generateCRCEPhh+0x4>
    }
  }
  return crc;
   b4550:	4770      	bx	lr

000b4552 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>:
                                         uint8_t readlen) {
   b4552:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4556:	4698      	mov	r8, r3
   b4558:	b082      	sub	sp, #8
  if (!i2c_dev->write(command, commandLength)) {
   b455a:	2300      	movs	r3, #0
   b455c:	e9cd 3300 	strd	r3, r3, [sp]
                                         uint8_t readlen) {
   b4560:	af02      	add	r7, sp, #8
   b4562:	4606      	mov	r6, r0
  if (!i2c_dev->write(command, commandLength)) {
   b4564:	2301      	movs	r3, #1
   b4566:	6900      	ldr	r0, [r0, #16]
                                         uint8_t readlen) {
   b4568:	f8d7 9020 	ldr.w	r9, [r7, #32]
   b456c:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
  if (!i2c_dev->write(command, commandLength)) {
   b4570:	f7ff ff67 	bl	b4442 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   b4574:	4605      	mov	r5, r0
   b4576:	b390      	cbz	r0, b45de <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x8c>
  delay(delayms);
   b4578:	4640      	mov	r0, r8
   b457a:	f000 fabb 	bl	b4af4 <delay>
  if (readlen == 0)
   b457e:	b354      	cbz	r4, b45d6 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x84>
  uint8_t replylen = readlen * (SGP30_WORD_LEN + 1);
   b4580:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   b4584:	b2d2      	uxtb	r2, r2
  uint8_t replybuffer[replylen];
   b4586:	1dd3      	adds	r3, r2, #7
   b4588:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   b458c:	ebad 0d03 	sub.w	sp, sp, r3
   b4590:	f10d 0a08 	add.w	sl, sp, #8
  if (!i2c_dev->read(replybuffer, replylen)) {
   b4594:	6930      	ldr	r0, [r6, #16]
   b4596:	2301      	movs	r3, #1
   b4598:	4651      	mov	r1, sl
   b459a:	f7ff ffa1 	bl	b44e0 <_ZN18Adafruit_I2CDevice4readEPhjb>
   b459e:	b1f0      	cbz	r0, b45de <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x8c>
   b45a0:	3c01      	subs	r4, #1
   b45a2:	b2e4      	uxtb	r4, r4
   b45a4:	f1a9 0802 	sub.w	r8, r9, #2
   b45a8:	eb09 0444 	add.w	r4, r9, r4, lsl #1
    uint8_t crc = generateCRC(replybuffer + i * 3, 2);
   b45ac:	2202      	movs	r2, #2
   b45ae:	4651      	mov	r1, sl
   b45b0:	4630      	mov	r0, r6
   b45b2:	f7ff ffb7 	bl	b4524 <_ZN14Adafruit_SGP3011generateCRCEPhh>
    if (crc != replybuffer[i * 3 + 2])
   b45b6:	f89a 3002 	ldrb.w	r3, [sl, #2]
   b45ba:	4283      	cmp	r3, r0
   b45bc:	d10f      	bne.n	b45de <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x8c>
    readdata[i] = replybuffer[i * 3];
   b45be:	f89a 2000 	ldrb.w	r2, [sl]
    readdata[i] |= replybuffer[i * 3 + 1];
   b45c2:	f89a 3001 	ldrb.w	r3, [sl, #1]
   b45c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   b45ca:	f828 3f02 	strh.w	r3, [r8, #2]!
  for (uint8_t i = 0; i < readlen; i++) {
   b45ce:	45a0      	cmp	r8, r4
   b45d0:	f10a 0a03 	add.w	sl, sl, #3
   b45d4:	d1ea      	bne.n	b45ac <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x5a>
}
   b45d6:	4628      	mov	r0, r5
   b45d8:	46bd      	mov	sp, r7
   b45da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b45de:	2500      	movs	r5, #0
   b45e0:	e7f9      	b.n	b45d6 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x84>

000b45e2 <_ZN14Adafruit_SGP307IAQinitEv>:
boolean Adafruit_SGP30::IAQinit(void) {
   b45e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  command[0] = 0x20;
   b45e4:	2320      	movs	r3, #32
   b45e6:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x03;
   b45ea:	2303      	movs	r3, #3
   b45ec:	f88d 300d 	strb.w	r3, [sp, #13]
  return readWordFromCommand(command, 2, 10);
   b45f0:	2300      	movs	r3, #0
   b45f2:	e9cd 3300 	strd	r3, r3, [sp]
   b45f6:	2202      	movs	r2, #2
   b45f8:	230a      	movs	r3, #10
   b45fa:	a903      	add	r1, sp, #12
   b45fc:	f7ff ffa9 	bl	b4552 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
}
   b4600:	b005      	add	sp, #20
   b4602:	f85d fb04 	ldr.w	pc, [sp], #4

000b4606 <_ZN14Adafruit_SGP305beginEP7TwoWireb>:
boolean Adafruit_SGP30::begin(TwoWire *theWire, boolean initSensor) {
   b4606:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4608:	4604      	mov	r4, r0
  if (i2c_dev) {
   b460a:	6900      	ldr	r0, [r0, #16]
boolean Adafruit_SGP30::begin(TwoWire *theWire, boolean initSensor) {
   b460c:	b085      	sub	sp, #20
   b460e:	460f      	mov	r7, r1
   b4610:	4616      	mov	r6, r2
  if (i2c_dev) {
   b4612:	b110      	cbz	r0, b461a <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x14>
    delete i2c_dev; // remove old interface
   b4614:	2110      	movs	r1, #16
   b4616:	f7ff fd40 	bl	b409a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(SGP30_I2CADDR_DEFAULT, theWire);
   b461a:	2010      	movs	r0, #16
   b461c:	f7ff fd39 	bl	b4092 <_Znwj>
   b4620:	4605      	mov	r5, r0
   b4622:	b118      	cbz	r0, b462c <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x26>
   b4624:	463a      	mov	r2, r7
   b4626:	2158      	movs	r1, #88	; 0x58
   b4628:	f7ff fee0 	bl	b43ec <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b462c:	6125      	str	r5, [r4, #16]
  if (!i2c_dev->begin()) {
   b462e:	2101      	movs	r1, #1
   b4630:	4628      	mov	r0, r5
   b4632:	f7ff fef7 	bl	b4424 <_ZN18Adafruit_I2CDevice5beginEb>
   b4636:	b910      	cbnz	r0, b463e <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x38>
    return false;
   b4638:	2000      	movs	r0, #0
}
   b463a:	b005      	add	sp, #20
   b463c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  command[0] = 0x36;
   b463e:	2336      	movs	r3, #54	; 0x36
   b4640:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x82;
   b4644:	2382      	movs	r3, #130	; 0x82
   b4646:	f88d 300d 	strb.w	r3, [sp, #13]
  if (!readWordFromCommand(command, 2, 10, serialnumber, 3))
   b464a:	2303      	movs	r3, #3
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	f104 0308 	add.w	r3, r4, #8
   b4652:	9300      	str	r3, [sp, #0]
   b4654:	2202      	movs	r2, #2
   b4656:	230a      	movs	r3, #10
   b4658:	a903      	add	r1, sp, #12
   b465a:	4620      	mov	r0, r4
   b465c:	f7ff ff79 	bl	b4552 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
   b4660:	2800      	cmp	r0, #0
   b4662:	d0e9      	beq.n	b4638 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x32>
  command[0] = 0x20;
   b4664:	2320      	movs	r3, #32
   b4666:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x2F;
   b466a:	232f      	movs	r3, #47	; 0x2f
   b466c:	f88d 300d 	strb.w	r3, [sp, #13]
  if (!readWordFromCommand(command, 2, 10, &featureset, 1))
   b4670:	2301      	movs	r3, #1
   b4672:	9301      	str	r3, [sp, #4]
   b4674:	f10d 030e 	add.w	r3, sp, #14
   b4678:	9300      	str	r3, [sp, #0]
   b467a:	2202      	movs	r2, #2
   b467c:	230a      	movs	r3, #10
   b467e:	a903      	add	r1, sp, #12
   b4680:	4620      	mov	r0, r4
   b4682:	f7ff ff66 	bl	b4552 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
   b4686:	2800      	cmp	r0, #0
   b4688:	d0d6      	beq.n	b4638 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x32>
  if ((featureset & 0xF0) != SGP30_FEATURESET)
   b468a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   b468e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b4692:	2b20      	cmp	r3, #32
   b4694:	d1d0      	bne.n	b4638 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x32>
  if (initSensor) {
   b4696:	2e00      	cmp	r6, #0
   b4698:	d0cf      	beq.n	b463a <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x34>
    if (!IAQinit())
   b469a:	4620      	mov	r0, r4
   b469c:	f7ff ffa1 	bl	b45e2 <_ZN14Adafruit_SGP307IAQinitEv>
   b46a0:	e7cb      	b.n	b463a <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x34>

000b46a2 <_ZN14Adafruit_SGP3010IAQmeasureEv>:
boolean Adafruit_SGP30::IAQmeasure(void) {
   b46a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  command[0] = 0x20;
   b46a4:	2320      	movs	r3, #32
   b46a6:	f88d 3008 	strb.w	r3, [sp, #8]
  command[1] = 0x08;
   b46aa:	2308      	movs	r3, #8
   b46ac:	f88d 3009 	strb.w	r3, [sp, #9]
  if (!readWordFromCommand(command, 2, 12, reply, 2))
   b46b0:	2202      	movs	r2, #2
   b46b2:	ab03      	add	r3, sp, #12
   b46b4:	9300      	str	r3, [sp, #0]
   b46b6:	9201      	str	r2, [sp, #4]
   b46b8:	230c      	movs	r3, #12
   b46ba:	a902      	add	r1, sp, #8
boolean Adafruit_SGP30::IAQmeasure(void) {
   b46bc:	4604      	mov	r4, r0
  if (!readWordFromCommand(command, 2, 12, reply, 2))
   b46be:	f7ff ff48 	bl	b4552 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
   b46c2:	b128      	cbz	r0, b46d0 <_ZN14Adafruit_SGP3010IAQmeasureEv+0x2e>
  TVOC = reply[1];
   b46c4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   b46c8:	8023      	strh	r3, [r4, #0]
  eCO2 = reply[0];
   b46ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b46ce:	8063      	strh	r3, [r4, #2]
}
   b46d0:	b004      	add	sp, #16
   b46d2:	bd10      	pop	{r4, pc}

000b46d4 <_ZN14Adafruit_SGP3013IAQmeasureRawEv>:
boolean Adafruit_SGP30::IAQmeasureRaw(void) {
   b46d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  command[0] = 0x20;
   b46d6:	2320      	movs	r3, #32
   b46d8:	f88d 3008 	strb.w	r3, [sp, #8]
  command[1] = 0x50;
   b46dc:	2350      	movs	r3, #80	; 0x50
   b46de:	f88d 3009 	strb.w	r3, [sp, #9]
  if (!readWordFromCommand(command, 2, 25, reply, 2))
   b46e2:	2202      	movs	r2, #2
   b46e4:	ab03      	add	r3, sp, #12
   b46e6:	9300      	str	r3, [sp, #0]
   b46e8:	9201      	str	r2, [sp, #4]
   b46ea:	2319      	movs	r3, #25
   b46ec:	a902      	add	r1, sp, #8
boolean Adafruit_SGP30::IAQmeasureRaw(void) {
   b46ee:	4604      	mov	r4, r0
  if (!readWordFromCommand(command, 2, 25, reply, 2))
   b46f0:	f7ff ff2f 	bl	b4552 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
   b46f4:	b128      	cbz	r0, b4702 <_ZN14Adafruit_SGP3013IAQmeasureRawEv+0x2e>
  rawEthanol = reply[1];
   b46f6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   b46fa:	80e3      	strh	r3, [r4, #6]
  rawH2 = reply[0];
   b46fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b4700:	80a3      	strh	r3, [r4, #4]
}
   b4702:	b004      	add	sp, #16
   b4704:	bd10      	pop	{r4, pc}

000b4706 <_ZN14Adafruit_SGP3014getIAQBaselineEPtS0_>:
                                       uint16_t *tvoc_base) {
   b4706:	b530      	push	{r4, r5, lr}
   b4708:	b085      	sub	sp, #20
  command[0] = 0x20;
   b470a:	2320      	movs	r3, #32
   b470c:	f88d 3008 	strb.w	r3, [sp, #8]
  command[1] = 0x15;
   b4710:	2315      	movs	r3, #21
                                       uint16_t *tvoc_base) {
   b4712:	4614      	mov	r4, r2
  command[1] = 0x15;
   b4714:	f88d 3009 	strb.w	r3, [sp, #9]
  if (!readWordFromCommand(command, 2, 10, reply, 2))
   b4718:	2202      	movs	r2, #2
   b471a:	ab03      	add	r3, sp, #12
                                       uint16_t *tvoc_base) {
   b471c:	460d      	mov	r5, r1
  if (!readWordFromCommand(command, 2, 10, reply, 2))
   b471e:	9300      	str	r3, [sp, #0]
   b4720:	9201      	str	r2, [sp, #4]
   b4722:	230a      	movs	r3, #10
   b4724:	a902      	add	r1, sp, #8
   b4726:	f7ff ff14 	bl	b4552 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
   b472a:	b128      	cbz	r0, b4738 <_ZN14Adafruit_SGP3014getIAQBaselineEPtS0_+0x32>
  *eco2_base = reply[0];
   b472c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b4730:	802b      	strh	r3, [r5, #0]
  *tvoc_base = reply[1];
   b4732:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   b4736:	8023      	strh	r3, [r4, #0]
}
   b4738:	b005      	add	sp, #20
   b473a:	bd30      	pop	{r4, r5, pc}

000b473c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b473c:	b508      	push	{r3, lr}
   b473e:	4b02      	ldr	r3, [pc, #8]	; (b4748 <os_mutex_recursive_create+0xc>)
   b4740:	681b      	ldr	r3, [r3, #0]
   b4742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4744:	9301      	str	r3, [sp, #4]
   b4746:	bd08      	pop	{r3, pc}
   b4748:	00030248 	.word	0x00030248

000b474c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b474c:	b508      	push	{r3, lr}
   b474e:	4b02      	ldr	r3, [pc, #8]	; (b4758 <HAL_RNG_GetRandomNumber+0xc>)
   b4750:	681b      	ldr	r3, [r3, #0]
   b4752:	685b      	ldr	r3, [r3, #4]
   b4754:	9301      	str	r3, [sp, #4]
   b4756:	bd08      	pop	{r3, pc}
   b4758:	00030218 	.word	0x00030218

000b475c <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b475c:	b508      	push	{r3, lr}
   b475e:	4b02      	ldr	r3, [pc, #8]	; (b4768 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4760:	681b      	ldr	r3, [r3, #0]
   b4762:	695b      	ldr	r3, [r3, #20]
   b4764:	9301      	str	r3, [sp, #4]
   b4766:	bd08      	pop	{r3, pc}
   b4768:	00030218 	.word	0x00030218

000b476c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b476c:	b508      	push	{r3, lr}
   b476e:	4b02      	ldr	r3, [pc, #8]	; (b4778 <hal_i2c_begin+0xc>)
   b4770:	681b      	ldr	r3, [r3, #0]
   b4772:	68db      	ldr	r3, [r3, #12]
   b4774:	9301      	str	r3, [sp, #4]
   b4776:	bd08      	pop	{r3, pc}
   b4778:	00030228 	.word	0x00030228

000b477c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b477c:	b508      	push	{r3, lr}
   b477e:	4b02      	ldr	r3, [pc, #8]	; (b4788 <hal_i2c_begin_transmission+0xc>)
   b4780:	681b      	ldr	r3, [r3, #0]
   b4782:	699b      	ldr	r3, [r3, #24]
   b4784:	9301      	str	r3, [sp, #4]
   b4786:	bd08      	pop	{r3, pc}
   b4788:	00030228 	.word	0x00030228

000b478c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b478c:	b508      	push	{r3, lr}
   b478e:	4b02      	ldr	r3, [pc, #8]	; (b4798 <hal_i2c_end_transmission+0xc>)
   b4790:	681b      	ldr	r3, [r3, #0]
   b4792:	69db      	ldr	r3, [r3, #28]
   b4794:	9301      	str	r3, [sp, #4]
   b4796:	bd08      	pop	{r3, pc}
   b4798:	00030228 	.word	0x00030228

000b479c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b479c:	b508      	push	{r3, lr}
   b479e:	4b02      	ldr	r3, [pc, #8]	; (b47a8 <hal_i2c_write+0xc>)
   b47a0:	681b      	ldr	r3, [r3, #0]
   b47a2:	6a1b      	ldr	r3, [r3, #32]
   b47a4:	9301      	str	r3, [sp, #4]
   b47a6:	bd08      	pop	{r3, pc}
   b47a8:	00030228 	.word	0x00030228

000b47ac <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b47ac:	b508      	push	{r3, lr}
   b47ae:	4b02      	ldr	r3, [pc, #8]	; (b47b8 <hal_i2c_available+0xc>)
   b47b0:	681b      	ldr	r3, [r3, #0]
   b47b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b47b4:	9301      	str	r3, [sp, #4]
   b47b6:	bd08      	pop	{r3, pc}
   b47b8:	00030228 	.word	0x00030228

000b47bc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b47bc:	b508      	push	{r3, lr}
   b47be:	4b02      	ldr	r3, [pc, #8]	; (b47c8 <hal_i2c_read+0xc>)
   b47c0:	681b      	ldr	r3, [r3, #0]
   b47c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b47c4:	9301      	str	r3, [sp, #4]
   b47c6:	bd08      	pop	{r3, pc}
   b47c8:	00030228 	.word	0x00030228

000b47cc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b47cc:	b508      	push	{r3, lr}
   b47ce:	4b02      	ldr	r3, [pc, #8]	; (b47d8 <hal_i2c_peek+0xc>)
   b47d0:	681b      	ldr	r3, [r3, #0]
   b47d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b47d4:	9301      	str	r3, [sp, #4]
   b47d6:	bd08      	pop	{r3, pc}
   b47d8:	00030228 	.word	0x00030228

000b47dc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b47dc:	b508      	push	{r3, lr}
   b47de:	4b02      	ldr	r3, [pc, #8]	; (b47e8 <hal_i2c_flush+0xc>)
   b47e0:	681b      	ldr	r3, [r3, #0]
   b47e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b47e4:	9301      	str	r3, [sp, #4]
   b47e6:	bd08      	pop	{r3, pc}
   b47e8:	00030228 	.word	0x00030228

000b47ec <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b47ec:	b508      	push	{r3, lr}
   b47ee:	4b02      	ldr	r3, [pc, #8]	; (b47f8 <hal_i2c_init+0xc>)
   b47f0:	681b      	ldr	r3, [r3, #0]
   b47f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47f4:	9301      	str	r3, [sp, #4]
   b47f6:	bd08      	pop	{r3, pc}
   b47f8:	00030228 	.word	0x00030228

000b47fc <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b47fc:	b508      	push	{r3, lr}
   b47fe:	4b02      	ldr	r3, [pc, #8]	; (b4808 <hal_i2c_request_ex+0xc>)
   b4800:	681b      	ldr	r3, [r3, #0]
   b4802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4804:	9301      	str	r3, [sp, #4]
   b4806:	bd08      	pop	{r3, pc}
   b4808:	00030228 	.word	0x00030228

000b480c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b480c:	b508      	push	{r3, lr}
   b480e:	4b02      	ldr	r3, [pc, #8]	; (b4818 <inet_inet_ntop+0xc>)
   b4810:	681b      	ldr	r3, [r3, #0]
   b4812:	695b      	ldr	r3, [r3, #20]
   b4814:	9301      	str	r3, [sp, #4]
   b4816:	bd08      	pop	{r3, pc}
   b4818:	00030264 	.word	0x00030264

000b481c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b481c:	b508      	push	{r3, lr}
   b481e:	4b02      	ldr	r3, [pc, #8]	; (b4828 <netdb_freeaddrinfo+0xc>)
   b4820:	681b      	ldr	r3, [r3, #0]
   b4822:	689b      	ldr	r3, [r3, #8]
   b4824:	9301      	str	r3, [sp, #4]
   b4826:	bd08      	pop	{r3, pc}
   b4828:	00030268 	.word	0x00030268

000b482c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b482c:	b508      	push	{r3, lr}
   b482e:	4b02      	ldr	r3, [pc, #8]	; (b4838 <netdb_getaddrinfo+0xc>)
   b4830:	681b      	ldr	r3, [r3, #0]
   b4832:	68db      	ldr	r3, [r3, #12]
   b4834:	9301      	str	r3, [sp, #4]
   b4836:	bd08      	pop	{r3, pc}
   b4838:	00030268 	.word	0x00030268

000b483c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b483c:	b508      	push	{r3, lr}
   b483e:	4b02      	ldr	r3, [pc, #8]	; (b4848 <hal_usart_write+0xc>)
   b4840:	681b      	ldr	r3, [r3, #0]
   b4842:	68db      	ldr	r3, [r3, #12]
   b4844:	9301      	str	r3, [sp, #4]
   b4846:	bd08      	pop	{r3, pc}
   b4848:	0003023c 	.word	0x0003023c

000b484c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b484c:	b508      	push	{r3, lr}
   b484e:	4b02      	ldr	r3, [pc, #8]	; (b4858 <hal_usart_available+0xc>)
   b4850:	681b      	ldr	r3, [r3, #0]
   b4852:	691b      	ldr	r3, [r3, #16]
   b4854:	9301      	str	r3, [sp, #4]
   b4856:	bd08      	pop	{r3, pc}
   b4858:	0003023c 	.word	0x0003023c

000b485c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b485c:	b508      	push	{r3, lr}
   b485e:	4b02      	ldr	r3, [pc, #8]	; (b4868 <hal_usart_read+0xc>)
   b4860:	681b      	ldr	r3, [r3, #0]
   b4862:	695b      	ldr	r3, [r3, #20]
   b4864:	9301      	str	r3, [sp, #4]
   b4866:	bd08      	pop	{r3, pc}
   b4868:	0003023c 	.word	0x0003023c

000b486c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b486c:	b508      	push	{r3, lr}
   b486e:	4b02      	ldr	r3, [pc, #8]	; (b4878 <hal_usart_peek+0xc>)
   b4870:	681b      	ldr	r3, [r3, #0]
   b4872:	699b      	ldr	r3, [r3, #24]
   b4874:	9301      	str	r3, [sp, #4]
   b4876:	bd08      	pop	{r3, pc}
   b4878:	0003023c 	.word	0x0003023c

000b487c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b487c:	b508      	push	{r3, lr}
   b487e:	4b02      	ldr	r3, [pc, #8]	; (b4888 <hal_usart_flush+0xc>)
   b4880:	681b      	ldr	r3, [r3, #0]
   b4882:	69db      	ldr	r3, [r3, #28]
   b4884:	9301      	str	r3, [sp, #4]
   b4886:	bd08      	pop	{r3, pc}
   b4888:	0003023c 	.word	0x0003023c

000b488c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b488c:	b508      	push	{r3, lr}
   b488e:	4b02      	ldr	r3, [pc, #8]	; (b4898 <hal_usart_available_data_for_write+0xc>)
   b4890:	681b      	ldr	r3, [r3, #0]
   b4892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4894:	9301      	str	r3, [sp, #4]
   b4896:	bd08      	pop	{r3, pc}
   b4898:	0003023c 	.word	0x0003023c

000b489c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b489c:	b508      	push	{r3, lr}
   b489e:	4b02      	ldr	r3, [pc, #8]	; (b48a8 <hal_usart_init_ex+0xc>)
   b48a0:	681b      	ldr	r3, [r3, #0]
   b48a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b48a4:	9301      	str	r3, [sp, #4]
   b48a6:	bd08      	pop	{r3, pc}
   b48a8:	0003023c 	.word	0x0003023c

000b48ac <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b48ac:	b508      	push	{r3, lr}
   b48ae:	4b02      	ldr	r3, [pc, #8]	; (b48b8 <HAL_USB_USART_Init+0xc>)
   b48b0:	681b      	ldr	r3, [r3, #0]
   b48b2:	681b      	ldr	r3, [r3, #0]
   b48b4:	9301      	str	r3, [sp, #4]
   b48b6:	bd08      	pop	{r3, pc}
   b48b8:	0003024c 	.word	0x0003024c

000b48bc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b48bc:	b508      	push	{r3, lr}
   b48be:	4b02      	ldr	r3, [pc, #8]	; (b48c8 <HAL_USB_USART_Begin+0xc>)
   b48c0:	681b      	ldr	r3, [r3, #0]
   b48c2:	685b      	ldr	r3, [r3, #4]
   b48c4:	9301      	str	r3, [sp, #4]
   b48c6:	bd08      	pop	{r3, pc}
   b48c8:	0003024c 	.word	0x0003024c

000b48cc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b48cc:	b508      	push	{r3, lr}
   b48ce:	4b02      	ldr	r3, [pc, #8]	; (b48d8 <HAL_USB_USART_Available_Data+0xc>)
   b48d0:	681b      	ldr	r3, [r3, #0]
   b48d2:	691b      	ldr	r3, [r3, #16]
   b48d4:	9301      	str	r3, [sp, #4]
   b48d6:	bd08      	pop	{r3, pc}
   b48d8:	0003024c 	.word	0x0003024c

000b48dc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b48dc:	b508      	push	{r3, lr}
   b48de:	4b02      	ldr	r3, [pc, #8]	; (b48e8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b48e0:	681b      	ldr	r3, [r3, #0]
   b48e2:	695b      	ldr	r3, [r3, #20]
   b48e4:	9301      	str	r3, [sp, #4]
   b48e6:	bd08      	pop	{r3, pc}
   b48e8:	0003024c 	.word	0x0003024c

000b48ec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b48ec:	b508      	push	{r3, lr}
   b48ee:	4b02      	ldr	r3, [pc, #8]	; (b48f8 <HAL_USB_USART_Receive_Data+0xc>)
   b48f0:	681b      	ldr	r3, [r3, #0]
   b48f2:	699b      	ldr	r3, [r3, #24]
   b48f4:	9301      	str	r3, [sp, #4]
   b48f6:	bd08      	pop	{r3, pc}
   b48f8:	0003024c 	.word	0x0003024c

000b48fc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b48fc:	b508      	push	{r3, lr}
   b48fe:	4b02      	ldr	r3, [pc, #8]	; (b4908 <HAL_USB_USART_Send_Data+0xc>)
   b4900:	681b      	ldr	r3, [r3, #0]
   b4902:	69db      	ldr	r3, [r3, #28]
   b4904:	9301      	str	r3, [sp, #4]
   b4906:	bd08      	pop	{r3, pc}
   b4908:	0003024c 	.word	0x0003024c

000b490c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b490c:	b508      	push	{r3, lr}
   b490e:	4b02      	ldr	r3, [pc, #8]	; (b4918 <HAL_USB_USART_Flush_Data+0xc>)
   b4910:	681b      	ldr	r3, [r3, #0]
   b4912:	6a1b      	ldr	r3, [r3, #32]
   b4914:	9301      	str	r3, [sp, #4]
   b4916:	bd08      	pop	{r3, pc}
   b4918:	0003024c 	.word	0x0003024c

000b491c <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   b491c:	b508      	push	{r3, lr}
   b491e:	4b02      	ldr	r3, [pc, #8]	; (b4928 <HAL_USB_USART_Is_Enabled+0xc>)
   b4920:	681b      	ldr	r3, [r3, #0]
   b4922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4924:	9301      	str	r3, [sp, #4]
   b4926:	bd08      	pop	{r3, pc}
   b4928:	0003024c 	.word	0x0003024c

000b492c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b492c:	b508      	push	{r3, lr}
   b492e:	4b02      	ldr	r3, [pc, #8]	; (b4938 <set_system_mode+0xc>)
   b4930:	681b      	ldr	r3, [r3, #0]
   b4932:	685b      	ldr	r3, [r3, #4]
   b4934:	9301      	str	r3, [sp, #4]
   b4936:	bd08      	pop	{r3, pc}
   b4938:	00030220 	.word	0x00030220

000b493c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b493c:	b508      	push	{r3, lr}
   b493e:	4b02      	ldr	r3, [pc, #8]	; (b4948 <system_delay_ms+0xc>)
   b4940:	681b      	ldr	r3, [r3, #0]
   b4942:	695b      	ldr	r3, [r3, #20]
   b4944:	9301      	str	r3, [sp, #4]
   b4946:	bd08      	pop	{r3, pc}
   b4948:	00030220 	.word	0x00030220

000b494c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b494c:	b508      	push	{r3, lr}
   b494e:	4b02      	ldr	r3, [pc, #8]	; (b4958 <application_thread_current+0xc>)
   b4950:	681b      	ldr	r3, [r3, #0]
   b4952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4954:	9301      	str	r3, [sp, #4]
   b4956:	bd08      	pop	{r3, pc}
   b4958:	00030220 	.word	0x00030220

000b495c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b495c:	b508      	push	{r3, lr}
   b495e:	4b02      	ldr	r3, [pc, #8]	; (b4968 <application_thread_invoke+0xc>)
   b4960:	681b      	ldr	r3, [r3, #0]
   b4962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4964:	9301      	str	r3, [sp, #4]
   b4966:	bd08      	pop	{r3, pc}
   b4968:	00030220 	.word	0x00030220

000b496c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b496c:	b508      	push	{r3, lr}
   b496e:	4b03      	ldr	r3, [pc, #12]	; (b497c <system_ctrl_set_app_request_handler+0x10>)
   b4970:	681b      	ldr	r3, [r3, #0]
   b4972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4976:	9301      	str	r3, [sp, #4]
   b4978:	bd08      	pop	{r3, pc}
   b497a:	0000      	.short	0x0000
   b497c:	00030220 	.word	0x00030220

000b4980 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4980:	b508      	push	{r3, lr}
   b4982:	4b03      	ldr	r3, [pc, #12]	; (b4990 <system_ctrl_set_result+0x10>)
   b4984:	681b      	ldr	r3, [r3, #0]
   b4986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b498a:	9301      	str	r3, [sp, #4]
   b498c:	bd08      	pop	{r3, pc}
   b498e:	0000      	.short	0x0000
   b4990:	00030220 	.word	0x00030220

000b4994 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4994:	b508      	push	{r3, lr}
   b4996:	4b02      	ldr	r3, [pc, #8]	; (b49a0 <spark_cloud_flag_connected+0xc>)
   b4998:	681b      	ldr	r3, [r3, #0]
   b499a:	695b      	ldr	r3, [r3, #20]
   b499c:	9301      	str	r3, [sp, #4]
   b499e:	bd08      	pop	{r3, pc}
   b49a0:	00030244 	.word	0x00030244

000b49a4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b49a4:	b508      	push	{r3, lr}
   b49a6:	4b02      	ldr	r3, [pc, #8]	; (b49b0 <spark_send_event+0xc>)
   b49a8:	681b      	ldr	r3, [r3, #0]
   b49aa:	6a1b      	ldr	r3, [r3, #32]
   b49ac:	9301      	str	r3, [sp, #4]
   b49ae:	bd08      	pop	{r3, pc}
   b49b0:	00030244 	.word	0x00030244

000b49b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b49b4:	b508      	push	{r3, lr}
   b49b6:	4b02      	ldr	r3, [pc, #8]	; (b49c0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b49b8:	681b      	ldr	r3, [r3, #0]
   b49ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b49bc:	9301      	str	r3, [sp, #4]
   b49be:	bd08      	pop	{r3, pc}
   b49c0:	00030244 	.word	0x00030244

000b49c4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b49c4:	b508      	push	{r3, lr}
   b49c6:	4b02      	ldr	r3, [pc, #8]	; (b49d0 <network_connect+0xc>)
   b49c8:	681b      	ldr	r3, [r3, #0]
   b49ca:	685b      	ldr	r3, [r3, #4]
   b49cc:	9301      	str	r3, [sp, #4]
   b49ce:	bd08      	pop	{r3, pc}
   b49d0:	00030240 	.word	0x00030240

000b49d4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b49d4:	b508      	push	{r3, lr}
   b49d6:	4b02      	ldr	r3, [pc, #8]	; (b49e0 <network_connecting+0xc>)
   b49d8:	681b      	ldr	r3, [r3, #0]
   b49da:	689b      	ldr	r3, [r3, #8]
   b49dc:	9301      	str	r3, [sp, #4]
   b49de:	bd08      	pop	{r3, pc}
   b49e0:	00030240 	.word	0x00030240

000b49e4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b02      	ldr	r3, [pc, #8]	; (b49f0 <network_disconnect+0xc>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	68db      	ldr	r3, [r3, #12]
   b49ec:	9301      	str	r3, [sp, #4]
   b49ee:	bd08      	pop	{r3, pc}
   b49f0:	00030240 	.word	0x00030240

000b49f4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b49f4:	b508      	push	{r3, lr}
   b49f6:	4b02      	ldr	r3, [pc, #8]	; (b4a00 <network_ready+0xc>)
   b49f8:	681b      	ldr	r3, [r3, #0]
   b49fa:	691b      	ldr	r3, [r3, #16]
   b49fc:	9301      	str	r3, [sp, #4]
   b49fe:	bd08      	pop	{r3, pc}
   b4a00:	00030240 	.word	0x00030240

000b4a04 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4a04:	b508      	push	{r3, lr}
   b4a06:	4b02      	ldr	r3, [pc, #8]	; (b4a10 <network_on+0xc>)
   b4a08:	681b      	ldr	r3, [r3, #0]
   b4a0a:	695b      	ldr	r3, [r3, #20]
   b4a0c:	9301      	str	r3, [sp, #4]
   b4a0e:	bd08      	pop	{r3, pc}
   b4a10:	00030240 	.word	0x00030240

000b4a14 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b02      	ldr	r3, [pc, #8]	; (b4a20 <network_off+0xc>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	699b      	ldr	r3, [r3, #24]
   b4a1c:	9301      	str	r3, [sp, #4]
   b4a1e:	bd08      	pop	{r3, pc}
   b4a20:	00030240 	.word	0x00030240

000b4a24 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4a24:	b508      	push	{r3, lr}
   b4a26:	4b02      	ldr	r3, [pc, #8]	; (b4a30 <network_listen+0xc>)
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	69db      	ldr	r3, [r3, #28]
   b4a2c:	9301      	str	r3, [sp, #4]
   b4a2e:	bd08      	pop	{r3, pc}
   b4a30:	00030240 	.word	0x00030240

000b4a34 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4a34:	b508      	push	{r3, lr}
   b4a36:	4b02      	ldr	r3, [pc, #8]	; (b4a40 <network_listening+0xc>)
   b4a38:	681b      	ldr	r3, [r3, #0]
   b4a3a:	6a1b      	ldr	r3, [r3, #32]
   b4a3c:	9301      	str	r3, [sp, #4]
   b4a3e:	bd08      	pop	{r3, pc}
   b4a40:	00030240 	.word	0x00030240

000b4a44 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b02      	ldr	r3, [pc, #8]	; (b4a50 <network_set_listen_timeout+0xc>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a4c:	9301      	str	r3, [sp, #4]
   b4a4e:	bd08      	pop	{r3, pc}
   b4a50:	00030240 	.word	0x00030240

000b4a54 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4a54:	b508      	push	{r3, lr}
   b4a56:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <network_get_listen_timeout+0xc>)
   b4a58:	681b      	ldr	r3, [r3, #0]
   b4a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4a5c:	9301      	str	r3, [sp, #4]
   b4a5e:	bd08      	pop	{r3, pc}
   b4a60:	00030240 	.word	0x00030240

000b4a64 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4a64:	b508      	push	{r3, lr}
   b4a66:	4b02      	ldr	r3, [pc, #8]	; (b4a70 <network_is_on+0xc>)
   b4a68:	681b      	ldr	r3, [r3, #0]
   b4a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a6c:	9301      	str	r3, [sp, #4]
   b4a6e:	bd08      	pop	{r3, pc}
   b4a70:	00030240 	.word	0x00030240

000b4a74 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4a74:	b508      	push	{r3, lr}
   b4a76:	4b02      	ldr	r3, [pc, #8]	; (b4a80 <network_is_off+0xc>)
   b4a78:	681b      	ldr	r3, [r3, #0]
   b4a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a7c:	9301      	str	r3, [sp, #4]
   b4a7e:	bd08      	pop	{r3, pc}
   b4a80:	00030240 	.word	0x00030240

000b4a84 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4a84:	b508      	push	{r3, lr}
   b4a86:	4b02      	ldr	r3, [pc, #8]	; (b4a90 <malloc+0xc>)
   b4a88:	681b      	ldr	r3, [r3, #0]
   b4a8a:	681b      	ldr	r3, [r3, #0]
   b4a8c:	9301      	str	r3, [sp, #4]
   b4a8e:	bd08      	pop	{r3, pc}
   b4a90:	0003021c 	.word	0x0003021c

000b4a94 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4a94:	b508      	push	{r3, lr}
   b4a96:	4b02      	ldr	r3, [pc, #8]	; (b4aa0 <free+0xc>)
   b4a98:	681b      	ldr	r3, [r3, #0]
   b4a9a:	685b      	ldr	r3, [r3, #4]
   b4a9c:	9301      	str	r3, [sp, #4]
   b4a9e:	bd08      	pop	{r3, pc}
   b4aa0:	0003021c 	.word	0x0003021c

000b4aa4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4aa4:	b508      	push	{r3, lr}
   b4aa6:	4b02      	ldr	r3, [pc, #8]	; (b4ab0 <realloc+0xc>)
   b4aa8:	681b      	ldr	r3, [r3, #0]
   b4aaa:	689b      	ldr	r3, [r3, #8]
   b4aac:	9301      	str	r3, [sp, #4]
   b4aae:	bd08      	pop	{r3, pc}
   b4ab0:	0003021c 	.word	0x0003021c

000b4ab4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4ab4:	b508      	push	{r3, lr}
   b4ab6:	4b02      	ldr	r3, [pc, #8]	; (b4ac0 <abort+0xc>)
   b4ab8:	681b      	ldr	r3, [r3, #0]
   b4aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4abc:	9301      	str	r3, [sp, #4]
   b4abe:	bd08      	pop	{r3, pc}
   b4ac0:	0003021c 	.word	0x0003021c

000b4ac4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4ac4:	b508      	push	{r3, lr}
   b4ac6:	4b02      	ldr	r3, [pc, #8]	; (b4ad0 <_malloc_r+0xc>)
   b4ac8:	681b      	ldr	r3, [r3, #0]
   b4aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4acc:	9301      	str	r3, [sp, #4]
   b4ace:	bd08      	pop	{r3, pc}
   b4ad0:	0003021c 	.word	0x0003021c

000b4ad4 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4ad4:	b508      	push	{r3, lr}
   b4ad6:	4b02      	ldr	r3, [pc, #8]	; (b4ae0 <__assert_func+0xc>)
   b4ad8:	681b      	ldr	r3, [r3, #0]
   b4ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4adc:	9301      	str	r3, [sp, #4]
   b4ade:	bd08      	pop	{r3, pc}
   b4ae0:	0003021c 	.word	0x0003021c

000b4ae4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4ae4:	b508      	push	{r3, lr}
   b4ae6:	4b02      	ldr	r3, [pc, #8]	; (b4af0 <newlib_impure_ptr_callback+0xc>)
   b4ae8:	681b      	ldr	r3, [r3, #0]
   b4aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4aec:	9301      	str	r3, [sp, #4]
   b4aee:	bd08      	pop	{r3, pc}
   b4af0:	0003021c 	.word	0x0003021c

000b4af4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4af4:	2100      	movs	r1, #0
   b4af6:	f7ff bf21 	b.w	b493c <system_delay_ms>

000b4afa <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b4afa:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4afc:	6883      	ldr	r3, [r0, #8]
   b4afe:	4604      	mov	r4, r0
   b4b00:	b90b      	cbnz	r3, b4b06 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b4b02:	f001 f87f 	bl	b5c04 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4b06:	68c3      	ldr	r3, [r0, #12]
   b4b08:	4798      	blx	r3
      if (_M_manager)
   b4b0a:	68a3      	ldr	r3, [r4, #8]
   b4b0c:	b11b      	cbz	r3, b4b16 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4b0e:	2203      	movs	r2, #3
   b4b10:	4621      	mov	r1, r4
   b4b12:	4620      	mov	r0, r4
   b4b14:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b4b16:	4620      	mov	r0, r4
   b4b18:	2110      	movs	r1, #16
}
   b4b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b4b1e:	f7ff babc 	b.w	b409a <_ZdlPvj>

000b4b22 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4b22:	b510      	push	{r4, lr}
      if (_M_manager)
   b4b24:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4b26:	4604      	mov	r4, r0
      if (_M_manager)
   b4b28:	b113      	cbz	r3, b4b30 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4b2a:	2203      	movs	r2, #3
   b4b2c:	4601      	mov	r1, r0
   b4b2e:	4798      	blx	r3
    }
   b4b30:	4620      	mov	r0, r4
   b4b32:	bd10      	pop	{r4, pc}

000b4b34 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4b34:	b513      	push	{r0, r1, r4, lr}
   b4b36:	460b      	mov	r3, r1
   b4b38:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4b3a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4b3e:	466c      	mov	r4, sp
   b4b40:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4b44:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4b48:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4b4c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4b50:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4b54:	b002      	add	sp, #8
   b4b56:	bd10      	pop	{r4, pc}

000b4b58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4b58:	4802      	ldr	r0, [pc, #8]	; (b4b64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4b5a:	2300      	movs	r3, #0
   b4b5c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4b5e:	f7ff bded 	b.w	b473c <os_mutex_recursive_create>
   b4b62:	bf00      	nop
   b4b64:	2003e6c4 	.word	0x2003e6c4

000b4b68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4b68:	4770      	bx	lr

000b4b6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4b6a:	2000      	movs	r0, #0
   b4b6c:	4770      	bx	lr

000b4b6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4b6e:	b510      	push	{r4, lr}
   b4b70:	2110      	movs	r1, #16
   b4b72:	4604      	mov	r4, r0
   b4b74:	f7ff fa91 	bl	b409a <_ZdlPvj>
   b4b78:	4620      	mov	r0, r4
   b4b7a:	bd10      	pop	{r4, pc}

000b4b7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b4b7c:	b508      	push	{r3, lr}
      { delete this; }
   b4b7e:	f7ff fff6 	bl	b4b6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4b82:	bd08      	pop	{r3, pc}

000b4b84 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b4b84:	b530      	push	{r4, r5, lr}
        type_(type) {
   b4b86:	2200      	movs	r2, #0
   b4b88:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b4b8c:	6002      	str	r2, [r0, #0]
   b4b8e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4b90:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b4b92:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4b94:	680c      	ldr	r4, [r1, #0]
   b4b96:	8085      	strh	r5, [r0, #4]
   b4b98:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4b9a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b4b9c:	bd30      	pop	{r4, r5, pc}

000b4b9e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b4b9e:	b510      	push	{r4, lr}
   b4ba0:	4604      	mov	r4, r0
    free((void*)msg_);
   b4ba2:	6800      	ldr	r0, [r0, #0]
   b4ba4:	f7ff ff76 	bl	b4a94 <free>
}
   b4ba8:	4620      	mov	r0, r4
   b4baa:	bd10      	pop	{r4, pc}

000b4bac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4bac:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4bae:	68c4      	ldr	r4, [r0, #12]
   b4bb0:	b1f4      	cbz	r4, b4bf0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4bb2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4bb4:	2b02      	cmp	r3, #2
   b4bb6:	d103      	bne.n	b4bc0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4bb8:	f104 000c 	add.w	r0, r4, #12
   b4bbc:	f7ff ffef 	bl	b4b9e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4bc0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4bc2:	b135      	cbz	r5, b4bd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b4bc4:	4628      	mov	r0, r5
   b4bc6:	f7ff ffac 	bl	b4b22 <_ZNSt14_Function_baseD1Ev>
   b4bca:	2110      	movs	r1, #16
   b4bcc:	4628      	mov	r0, r5
   b4bce:	f7ff fa64 	bl	b409a <_ZdlPvj>
   b4bd2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4bd4:	b135      	cbz	r5, b4be4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4bd6:	4628      	mov	r0, r5
   b4bd8:	f7ff ffa3 	bl	b4b22 <_ZNSt14_Function_baseD1Ev>
   b4bdc:	2110      	movs	r1, #16
   b4bde:	4628      	mov	r0, r5
   b4be0:	f7ff fa5b 	bl	b409a <_ZdlPvj>
   b4be4:	4620      	mov	r0, r4
   b4be6:	2114      	movs	r1, #20
   b4be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4bec:	f7ff ba55 	b.w	b409a <_ZdlPvj>
   b4bf0:	bd38      	pop	{r3, r4, r5, pc}

000b4bf2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4bf2:	680b      	ldr	r3, [r1, #0]
   b4bf4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4bf6:	684b      	ldr	r3, [r1, #4]
   b4bf8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4bfa:	b113      	cbz	r3, b4c02 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4bfc:	685a      	ldr	r2, [r3, #4]
   b4bfe:	3201      	adds	r2, #1
   b4c00:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4c02:	4770      	bx	lr

000b4c04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4c06:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4c08:	4668      	mov	r0, sp
   b4c0a:	460d      	mov	r5, r1
   b4c0c:	f7ff fff1 	bl	b4bf2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4c10:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4c12:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4c14:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4c16:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4c18:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4c1a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4c1c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4c1e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4c20:	f7ff fa51 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4c24:	b135      	cbz	r5, b4c34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4c26:	1d28      	adds	r0, r5, #4
   b4c28:	f7ff fa4d 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4c2c:	2108      	movs	r1, #8
   b4c2e:	4628      	mov	r0, r5
   b4c30:	f7ff fa33 	bl	b409a <_ZdlPvj>
        return p;
    }
   b4c34:	4620      	mov	r0, r4
   b4c36:	b003      	add	sp, #12
   b4c38:	bd30      	pop	{r4, r5, pc}

000b4c3a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b4c3a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4c3c:	b510      	push	{r4, lr}
      if (_M_empty())
   b4c3e:	b90a      	cbnz	r2, b4c44 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4c40:	f000 ffe0 	bl	b5c04 <_ZSt25__throw_bad_function_callv>
    }
   b4c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4c48:	68c3      	ldr	r3, [r0, #12]
   b4c4a:	4718      	bx	r3

000b4c4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4c4c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4c4e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4c50:	f100 0110 	add.w	r1, r0, #16
   b4c54:	f7ff fff1 	bl	b4c3a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b4c58:	bd08      	pop	{r3, pc}

000b4c5a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b4c5a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4c5c:	b510      	push	{r4, lr}
      if (_M_empty())
   b4c5e:	b90a      	cbnz	r2, b4c64 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b4c60:	f000 ffd0 	bl	b5c04 <_ZSt25__throw_bad_function_callv>
    }
   b4c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4c68:	68c3      	ldr	r3, [r0, #12]
   b4c6a:	4718      	bx	r3

000b4c6c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4c6c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4c6e:	6800      	ldr	r0, [r0, #0]
   b4c70:	f100 0110 	add.w	r1, r0, #16
   b4c74:	f7ff fff1 	bl	b4c5a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b4c78:	bd08      	pop	{r3, pc}
	...

000b4c7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b4c7c:	b538      	push	{r3, r4, r5, lr}
   b4c7e:	2300      	movs	r3, #0
   b4c80:	4604      	mov	r4, r0
   b4c82:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4c84:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b4c86:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4c88:	f7ff fa03 	bl	b4092 <_Znwj>
   b4c8c:	b128      	cbz	r0, b4c9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b4c8e:	2301      	movs	r3, #1
   b4c90:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b4c94:	4b02      	ldr	r3, [pc, #8]	; (b4ca0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b4c96:	6003      	str	r3, [r0, #0]
   b4c98:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4c9a:	6020      	str	r0, [r4, #0]
	}
   b4c9c:	4620      	mov	r0, r4
   b4c9e:	bd38      	pop	{r3, r4, r5, pc}
   b4ca0:	000b5ea8 	.word	0x000b5ea8

000b4ca4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b4ca4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4ca6:	2300      	movs	r3, #0
   b4ca8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4caa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4cac:	4604      	mov	r4, r0
   b4cae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4cb0:	b12b      	cbz	r3, b4cbe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4cb2:	2202      	movs	r2, #2
   b4cb4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4cb6:	68eb      	ldr	r3, [r5, #12]
   b4cb8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4cba:	68ab      	ldr	r3, [r5, #8]
   b4cbc:	60a3      	str	r3, [r4, #8]
    }
   b4cbe:	4620      	mov	r0, r4
   b4cc0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4cc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4cc6:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4cc8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b4cca:	4668      	mov	r0, sp
   b4ccc:	f7ff ff5a 	bl	b4b84 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4cd0:	f04f 0302 	mov.w	r3, #2
   b4cd4:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4cd8:	2a00      	cmp	r2, #0
   b4cda:	d103      	bne.n	b4ce4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b4cdc:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4ce0:	2900      	cmp	r1, #0
   b4ce2:	d1f7      	bne.n	b4cd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4ce4:	d125      	bne.n	b4d32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4ce6:	f104 050c 	add.w	r5, r4, #12
   b4cea:	4669      	mov	r1, sp
   b4cec:	4628      	mov	r0, r5
   b4cee:	f7ff ff49 	bl	b4b84 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4cf2:	f3bf 8f5b 	dmb	ish
   b4cf6:	2301      	movs	r3, #1
   b4cf8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4cfa:	2000      	movs	r0, #0
   b4cfc:	f104 0308 	add.w	r3, r4, #8
   b4d00:	f3bf 8f5b 	dmb	ish
   b4d04:	e853 6f00 	ldrex	r6, [r3]
   b4d08:	e843 0200 	strex	r2, r0, [r3]
   b4d0c:	2a00      	cmp	r2, #0
   b4d0e:	d1f9      	bne.n	b4d04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4d10:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4d14:	b16e      	cbz	r6, b4d32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4d16:	f7ff fe19 	bl	b494c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4d1a:	b178      	cbz	r0, b4d3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4d1c:	4629      	mov	r1, r5
   b4d1e:	4630      	mov	r0, r6
   b4d20:	f7ff ff8b 	bl	b4c3a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4d24:	4630      	mov	r0, r6
   b4d26:	f7ff fefc 	bl	b4b22 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4d2a:	2110      	movs	r1, #16
   b4d2c:	4630      	mov	r0, r6
   b4d2e:	f7ff f9b4 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b4d32:	4668      	mov	r0, sp
   b4d34:	f7ff ff33 	bl	b4b9e <_ZN8particle5ErrorD1Ev>
    }
   b4d38:	b009      	add	sp, #36	; 0x24
   b4d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4d3c:	4631      	mov	r1, r6
   b4d3e:	a802      	add	r0, sp, #8
   b4d40:	f7ff ffb0 	bl	b4ca4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4d44:	68e0      	ldr	r0, [r4, #12]
   b4d46:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4d4a:	b108      	cbz	r0, b4d50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b4d4c:	f000 ffb0 	bl	b5cb0 <strdup>
        type_(type) {
   b4d50:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4d52:	2010      	movs	r0, #16
   b4d54:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4d58:	f7ff f99b 	bl	b4092 <_Znwj>
   b4d5c:	4605      	mov	r5, r0
   b4d5e:	b1e8      	cbz	r0, b4d9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4d60:	2700      	movs	r7, #0
   b4d62:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4d64:	2018      	movs	r0, #24
   b4d66:	f7ff f994 	bl	b4092 <_Znwj>
   b4d6a:	4604      	mov	r4, r0
   b4d6c:	b188      	cbz	r0, b4d92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b4d6e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4d70:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4d72:	a802      	add	r0, sp, #8
   b4d74:	f7ff fede 	bl	b4b34 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4d78:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4d7a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d7c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4d7e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4d80:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4d82:	a906      	add	r1, sp, #24
   b4d84:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d86:	60e3      	str	r3, [r4, #12]
   b4d88:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b4d8c:	9205      	str	r2, [sp, #20]
   b4d8e:	f7ff fef9 	bl	b4b84 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b4d92:	4b08      	ldr	r3, [pc, #32]	; (b4db4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b4d94:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4d96:	4b08      	ldr	r3, [pc, #32]	; (b4db8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4d98:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4d9a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b4d9c:	a806      	add	r0, sp, #24
   b4d9e:	f7ff fefe 	bl	b4b9e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4da2:	a802      	add	r0, sp, #8
   b4da4:	f7ff febd 	bl	b4b22 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4da8:	2200      	movs	r2, #0
   b4daa:	4629      	mov	r1, r5
   b4dac:	4803      	ldr	r0, [pc, #12]	; (b4dbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b4dae:	f7ff fdd5 	bl	b495c <application_thread_invoke>
   b4db2:	e7b7      	b.n	b4d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b4db4:	000b4c4d 	.word	0x000b4c4d
   b4db8:	000b4ed1 	.word	0x000b4ed1
   b4dbc:	000b4afb 	.word	0x000b4afb

000b4dc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b4dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4dc4:	b08b      	sub	sp, #44	; 0x2c
   b4dc6:	4605      	mov	r5, r0
   b4dc8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4dcc:	460f      	mov	r7, r1
   b4dce:	4690      	mov	r8, r2
   b4dd0:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4dd2:	f7ff fddf 	bl	b4994 <spark_cloud_flag_connected>
   b4dd6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b4dd8:	4683      	mov	fp, r0
   b4dda:	bb38      	cbnz	r0, b4e2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b4ddc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b4de0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4de2:	a905      	add	r1, sp, #20
   b4de4:	4630      	mov	r0, r6
   b4de6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4dea:	f7ff fecb 	bl	b4b84 <_ZN8particle5ErrorC1EOS0_>
   b4dee:	2014      	movs	r0, #20
   b4df0:	f7ff f94f 	bl	b4092 <_Znwj>
   b4df4:	4604      	mov	r4, r0
   b4df6:	b148      	cbz	r0, b4e0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b4df8:	2302      	movs	r3, #2
   b4dfa:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4dfc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4dfe:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4e02:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b4e04:	4631      	mov	r1, r6
   b4e06:	300c      	adds	r0, #12
   b4e08:	f7ff febc 	bl	b4b84 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4e0c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b4e0e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4e10:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b4e14:	f7ff ff32 	bl	b4c7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4e18:	4630      	mov	r0, r6
   b4e1a:	f7ff fec0 	bl	b4b9e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b4e1e:	a805      	add	r0, sp, #20
   b4e20:	f7ff febd 	bl	b4b9e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b4e24:	4628      	mov	r0, r5
   b4e26:	b00b      	add	sp, #44	; 0x2c
   b4e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b4e2c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b4e2e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b4e30:	2014      	movs	r0, #20
   b4e32:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b4e36:	9307      	str	r3, [sp, #28]
   b4e38:	f7ff f92b 	bl	b4092 <_Znwj>
   b4e3c:	4601      	mov	r1, r0
   b4e3e:	b118      	cbz	r0, b4e48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4e40:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b4e44:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4e46:	7044      	strb	r4, [r0, #1]
   b4e48:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4e4a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b4e4c:	f7ff ff16 	bl	b4c7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b4e50:	4b1e      	ldr	r3, [pc, #120]	; (b4ecc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b4e52:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b4e54:	2008      	movs	r0, #8
   b4e56:	f7ff f91c 	bl	b4092 <_Znwj>
   b4e5a:	4604      	mov	r4, r0
   b4e5c:	b110      	cbz	r0, b4e64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b4e5e:	a903      	add	r1, sp, #12
   b4e60:	f7ff fec7 	bl	b4bf2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4e64:	9600      	str	r6, [sp, #0]
   b4e66:	fa5f f38a 	uxtb.w	r3, sl
   b4e6a:	464a      	mov	r2, r9
   b4e6c:	4641      	mov	r1, r8
   b4e6e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b4e70:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4e72:	f7ff fd97 	bl	b49a4 <spark_send_event>
   b4e76:	b9b8      	cbnz	r0, b4ea8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b4e78:	9b03      	ldr	r3, [sp, #12]
   b4e7a:	785b      	ldrb	r3, [r3, #1]
   b4e7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b4e80:	b993      	cbnz	r3, b4ea8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b4e82:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b4e86:	a905      	add	r1, sp, #20
   b4e88:	a803      	add	r0, sp, #12
   b4e8a:	9205      	str	r2, [sp, #20]
   b4e8c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4e90:	f7ff ff18 	bl	b4cc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4e94:	a805      	add	r0, sp, #20
   b4e96:	f7ff fe82 	bl	b4b9e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b4e9a:	a805      	add	r0, sp, #20
   b4e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b4e9e:	f7ff feb1 	bl	b4c04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b4ea2:	a806      	add	r0, sp, #24
   b4ea4:	f7ff f90f 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4ea8:	a903      	add	r1, sp, #12
   b4eaa:	a805      	add	r0, sp, #20
   b4eac:	f7ff fea1 	bl	b4bf2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4eb0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4eb2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4eb4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b4eb6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b4eb8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4eba:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b4ebc:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b4ebe:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b4ec0:	f7ff f901 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4ec4:	a804      	add	r0, sp, #16
   b4ec6:	f7ff f8fe 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b4eca:	e7ab      	b.n	b4e24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b4ecc:	000b4f4d 	.word	0x000b4f4d

000b4ed0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b4ed0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4ed4:	4605      	mov	r5, r0
	switch (__op)
   b4ed6:	d103      	bne.n	b4ee0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4ed8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4eda:	6003      	str	r3, [r0, #0]
      }
   b4edc:	2000      	movs	r0, #0
   b4ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b4ee0:	2a02      	cmp	r2, #2
   b4ee2:	d010      	beq.n	b4f06 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b4ee4:	2a03      	cmp	r2, #3
   b4ee6:	d1f9      	bne.n	b4edc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4ee8:	6804      	ldr	r4, [r0, #0]
   b4eea:	2c00      	cmp	r4, #0
   b4eec:	d0f6      	beq.n	b4edc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b4eee:	f104 0010 	add.w	r0, r4, #16
   b4ef2:	f7ff fe54 	bl	b4b9e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4ef6:	4620      	mov	r0, r4
   b4ef8:	f7ff fe13 	bl	b4b22 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4efc:	2118      	movs	r1, #24
   b4efe:	4620      	mov	r0, r4
   b4f00:	f7ff f8cb 	bl	b409a <_ZdlPvj>
   b4f04:	e7ea      	b.n	b4edc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4f06:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b4f08:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4f0a:	f7ff f8c2 	bl	b4092 <_Znwj>
   b4f0e:	4604      	mov	r4, r0
   b4f10:	b150      	cbz	r0, b4f28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b4f12:	4631      	mov	r1, r6
   b4f14:	f7ff fec6 	bl	b4ca4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4f18:	6930      	ldr	r0, [r6, #16]
   b4f1a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4f1e:	b108      	cbz	r0, b4f24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b4f20:	f000 fec6 	bl	b5cb0 <strdup>
        type_(type) {
   b4f24:	6120      	str	r0, [r4, #16]
   b4f26:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b4f28:	602c      	str	r4, [r5, #0]
	}
   b4f2a:	e7d7      	b.n	b4edc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b4f2c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b4f2c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4f2e:	2300      	movs	r3, #0
   b4f30:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4f32:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4f34:	4604      	mov	r4, r0
   b4f36:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4f38:	b12b      	cbz	r3, b4f46 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4f3a:	2202      	movs	r2, #2
   b4f3c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4f3e:	68eb      	ldr	r3, [r5, #12]
   b4f40:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4f42:	68ab      	ldr	r3, [r5, #8]
   b4f44:	60a3      	str	r3, [r4, #8]
    }
   b4f46:	4620      	mov	r0, r4
   b4f48:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4f4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b4f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4f4e:	b089      	sub	sp, #36	; 0x24
   b4f50:	4604      	mov	r4, r0
   b4f52:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b4f54:	a801      	add	r0, sp, #4
   b4f56:	4611      	mov	r1, r2
   b4f58:	f7ff fe54 	bl	b4c04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b4f5c:	b1a4      	cbz	r4, b4f88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b4f5e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4f60:	b11d      	cbz	r5, b4f6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b4f62:	4628      	mov	r0, r5
   b4f64:	f000 fea4 	bl	b5cb0 <strdup>
   b4f68:	4605      	mov	r5, r0
   b4f6a:	a801      	add	r0, sp, #4
   b4f6c:	a903      	add	r1, sp, #12
        type_(type) {
   b4f6e:	9503      	str	r5, [sp, #12]
   b4f70:	f8ad 4010 	strh.w	r4, [sp, #16]
   b4f74:	f7ff fea6 	bl	b4cc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4f78:	a803      	add	r0, sp, #12
   b4f7a:	f7ff fe10 	bl	b4b9e <_ZN8particle5ErrorD1Ev>
   b4f7e:	a802      	add	r0, sp, #8
   b4f80:	f7ff f8a1 	bl	b40c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4f84:	b009      	add	sp, #36	; 0x24
   b4f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b4f88:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4f8a:	2301      	movs	r3, #1
   b4f8c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b4f90:	2a00      	cmp	r2, #0
   b4f92:	d103      	bne.n	b4f9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b4f94:	e8c5 3f41 	strexb	r1, r3, [r5]
   b4f98:	2900      	cmp	r1, #0
   b4f9a:	d1f7      	bne.n	b4f8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b4f9c:	d1ef      	bne.n	b4f7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b4f9e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b4fa0:	f3bf 8f5b 	dmb	ish
   b4fa4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4fa6:	1d2b      	adds	r3, r5, #4
   b4fa8:	f3bf 8f5b 	dmb	ish
   b4fac:	e853 6f00 	ldrex	r6, [r3]
   b4fb0:	e843 4200 	strex	r2, r4, [r3]
   b4fb4:	2a00      	cmp	r2, #0
   b4fb6:	d1f9      	bne.n	b4fac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b4fb8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4fbc:	2e00      	cmp	r6, #0
   b4fbe:	d0de      	beq.n	b4f7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b4fc0:	4620      	mov	r0, r4
   b4fc2:	f7ff fcc3 	bl	b494c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4fc6:	4607      	mov	r7, r0
   b4fc8:	b160      	cbz	r0, b4fe4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4fca:	f105 010c 	add.w	r1, r5, #12
   b4fce:	4630      	mov	r0, r6
   b4fd0:	f7ff fe43 	bl	b4c5a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b4fd4:	4630      	mov	r0, r6
   b4fd6:	f7ff fda4 	bl	b4b22 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4fda:	2110      	movs	r1, #16
   b4fdc:	4630      	mov	r0, r6
   b4fde:	f7ff f85c 	bl	b409a <_ZdlPvj>
   b4fe2:	e7cc      	b.n	b4f7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4fe4:	4631      	mov	r1, r6
   b4fe6:	a803      	add	r0, sp, #12
   b4fe8:	f7ff ffa0 	bl	b4f2c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4fec:	7b2b      	ldrb	r3, [r5, #12]
   b4fee:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4ff2:	2010      	movs	r0, #16
   b4ff4:	f7ff f84d 	bl	b4092 <_Znwj>
   b4ff8:	4605      	mov	r5, r0
   b4ffa:	b1d0      	cbz	r0, b5032 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b4ffc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4ffe:	2014      	movs	r0, #20
   b5000:	f7ff f847 	bl	b4092 <_Znwj>
   b5004:	4604      	mov	r4, r0
   b5006:	b178      	cbz	r0, b5028 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5008:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b500a:	4601      	mov	r1, r0
   b500c:	a803      	add	r0, sp, #12
   b500e:	f7ff fd91 	bl	b4b34 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5012:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5014:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5016:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5018:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b501a:	9205      	str	r2, [sp, #20]
   b501c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b501e:	60e3      	str	r3, [r4, #12]
   b5020:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5024:	9206      	str	r2, [sp, #24]
   b5026:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5028:	4b06      	ldr	r3, [pc, #24]	; (b5044 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b502a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b502c:	4b06      	ldr	r3, [pc, #24]	; (b5048 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b502e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5030:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5032:	a803      	add	r0, sp, #12
   b5034:	f7ff fd75 	bl	b4b22 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5038:	2200      	movs	r2, #0
   b503a:	4629      	mov	r1, r5
   b503c:	4803      	ldr	r0, [pc, #12]	; (b504c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b503e:	f7ff fc8d 	bl	b495c <application_thread_invoke>
   b5042:	e7c7      	b.n	b4fd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5044:	000b4c6d 	.word	0x000b4c6d
   b5048:	000b5051 	.word	0x000b5051
   b504c:	000b4afb 	.word	0x000b4afb

000b5050 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5050:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5052:	b570      	push	{r4, r5, r6, lr}
   b5054:	4604      	mov	r4, r0
	switch (__op)
   b5056:	d103      	bne.n	b5060 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5058:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b505a:	6003      	str	r3, [r0, #0]
      }
   b505c:	2000      	movs	r0, #0
   b505e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5060:	2a02      	cmp	r2, #2
   b5062:	d00c      	beq.n	b507e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5064:	2a03      	cmp	r2, #3
   b5066:	d1f9      	bne.n	b505c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5068:	6804      	ldr	r4, [r0, #0]
   b506a:	2c00      	cmp	r4, #0
   b506c:	d0f6      	beq.n	b505c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b506e:	4620      	mov	r0, r4
   b5070:	f7ff fd57 	bl	b4b22 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5074:	2114      	movs	r1, #20
   b5076:	4620      	mov	r0, r4
   b5078:	f7ff f80f 	bl	b409a <_ZdlPvj>
   b507c:	e7ee      	b.n	b505c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b507e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5080:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5082:	f7ff f806 	bl	b4092 <_Znwj>
   b5086:	4605      	mov	r5, r0
   b5088:	b120      	cbz	r0, b5094 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b508a:	4631      	mov	r1, r6
   b508c:	f7ff ff4e 	bl	b4f2c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5090:	7c33      	ldrb	r3, [r6, #16]
   b5092:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5094:	6025      	str	r5, [r4, #0]
	}
   b5096:	e7e1      	b.n	b505c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5098 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5098:	2200      	movs	r2, #0
   b509a:	6840      	ldr	r0, [r0, #4]
   b509c:	4611      	mov	r1, r2
   b509e:	f7ff bcc9 	b.w	b4a34 <network_listening>

000b50a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b50a2:	2200      	movs	r2, #0
   b50a4:	6840      	ldr	r0, [r0, #4]
   b50a6:	4611      	mov	r1, r2
   b50a8:	f7ff bcd4 	b.w	b4a54 <network_get_listen_timeout>

000b50ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b50ac:	6840      	ldr	r0, [r0, #4]
   b50ae:	2200      	movs	r2, #0
   b50b0:	f7ff bcc8 	b.w	b4a44 <network_set_listen_timeout>

000b50b4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b50b4:	6840      	ldr	r0, [r0, #4]
   b50b6:	2200      	movs	r2, #0
   b50b8:	f081 0101 	eor.w	r1, r1, #1
   b50bc:	f7ff bcb2 	b.w	b4a24 <network_listen>

000b50c0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b50c0:	2300      	movs	r3, #0
   b50c2:	6840      	ldr	r0, [r0, #4]
   b50c4:	461a      	mov	r2, r3
   b50c6:	4619      	mov	r1, r3
   b50c8:	f7ff bca4 	b.w	b4a14 <network_off>

000b50cc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b50cc:	2300      	movs	r3, #0
   b50ce:	6840      	ldr	r0, [r0, #4]
   b50d0:	461a      	mov	r2, r3
   b50d2:	4619      	mov	r1, r3
   b50d4:	f7ff bc96 	b.w	b4a04 <network_on>

000b50d8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b50d8:	2200      	movs	r2, #0
   b50da:	6840      	ldr	r0, [r0, #4]
   b50dc:	4611      	mov	r1, r2
   b50de:	f7ff bc89 	b.w	b49f4 <network_ready>

000b50e2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b50e2:	2200      	movs	r2, #0
   b50e4:	6840      	ldr	r0, [r0, #4]
   b50e6:	4611      	mov	r1, r2
   b50e8:	f7ff bc74 	b.w	b49d4 <network_connecting>

000b50ec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b50ec:	6840      	ldr	r0, [r0, #4]
   b50ee:	2200      	movs	r2, #0
   b50f0:	2102      	movs	r1, #2
   b50f2:	f7ff bc77 	b.w	b49e4 <network_disconnect>

000b50f6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b50f6:	2300      	movs	r3, #0
   b50f8:	6840      	ldr	r0, [r0, #4]
   b50fa:	461a      	mov	r2, r3
   b50fc:	f7ff bc62 	b.w	b49c4 <network_connect>

000b5100 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5100:	4b02      	ldr	r3, [pc, #8]	; (b510c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5102:	2203      	movs	r2, #3
   b5104:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5106:	4a02      	ldr	r2, [pc, #8]	; (b5110 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5108:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b510a:	4770      	bx	lr
   b510c:	2003e6c8 	.word	0x2003e6c8
   b5110:	000b5ec4 	.word	0x000b5ec4

000b5114 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5114:	4770      	bx	lr

000b5116 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5118:	4606      	mov	r6, r0
   b511a:	4615      	mov	r5, r2
   b511c:	460c      	mov	r4, r1
   b511e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5120:	42bc      	cmp	r4, r7
   b5122:	d006      	beq.n	b5132 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5124:	6833      	ldr	r3, [r6, #0]
   b5126:	f814 1b01 	ldrb.w	r1, [r4], #1
   b512a:	689b      	ldr	r3, [r3, #8]
   b512c:	4630      	mov	r0, r6
   b512e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5130:	e7f6      	b.n	b5120 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5132:	4628      	mov	r0, r5
   b5134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5136 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5136:	7c00      	ldrb	r0, [r0, #16]
   b5138:	2200      	movs	r2, #0
   b513a:	f7ff bb2f 	b.w	b479c <hal_i2c_write>

000b513e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b513e:	7c00      	ldrb	r0, [r0, #16]
   b5140:	2100      	movs	r1, #0
   b5142:	f7ff bb33 	b.w	b47ac <hal_i2c_available>

000b5146 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5146:	7c00      	ldrb	r0, [r0, #16]
   b5148:	2100      	movs	r1, #0
   b514a:	f7ff bb37 	b.w	b47bc <hal_i2c_read>

000b514e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b514e:	7c00      	ldrb	r0, [r0, #16]
   b5150:	2100      	movs	r1, #0
   b5152:	f7ff bb3b 	b.w	b47cc <hal_i2c_peek>

000b5156 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5156:	7c00      	ldrb	r0, [r0, #16]
   b5158:	2100      	movs	r1, #0
   b515a:	f7ff bb3f 	b.w	b47dc <hal_i2c_flush>

000b515e <_ZN7TwoWireD0Ev>:
   b515e:	b510      	push	{r4, lr}
   b5160:	2114      	movs	r1, #20
   b5162:	4604      	mov	r4, r0
   b5164:	f7fe ff99 	bl	b409a <_ZdlPvj>
   b5168:	4620      	mov	r0, r4
   b516a:	bd10      	pop	{r4, pc}

000b516c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b516c:	b538      	push	{r3, r4, r5, lr}
   b516e:	4604      	mov	r4, r0
   b5170:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5176:	2200      	movs	r2, #0
   b5178:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b517c:	4b09      	ldr	r3, [pc, #36]	; (b51a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b517e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5180:	4608      	mov	r0, r1
   b5182:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5184:	4629      	mov	r1, r5
   b5186:	f7ff fb31 	bl	b47ec <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b518a:	30bf      	adds	r0, #191	; 0xbf
   b518c:	d108      	bne.n	b51a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b518e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5190:	07db      	lsls	r3, r3, #31
   b5192:	d505      	bpl.n	b51a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5194:	6868      	ldr	r0, [r5, #4]
   b5196:	f7ff fc7d 	bl	b4a94 <free>
    free(conf.tx_buffer);
   b519a:	68e8      	ldr	r0, [r5, #12]
   b519c:	f7ff fc7a 	bl	b4a94 <free>
}
   b51a0:	4620      	mov	r0, r4
   b51a2:	bd38      	pop	{r3, r4, r5, pc}
   b51a4:	000b5f00 	.word	0x000b5f00

000b51a8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b51a8:	2300      	movs	r3, #0
   b51aa:	7c00      	ldrb	r0, [r0, #16]
   b51ac:	461a      	mov	r2, r3
   b51ae:	4619      	mov	r1, r3
   b51b0:	f7ff badc 	b.w	b476c <hal_i2c_begin>

000b51b4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b51b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b51b6:	2200      	movs	r2, #0
   b51b8:	2314      	movs	r3, #20
   b51ba:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b51be:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b51c2:	780b      	ldrb	r3, [r1, #0]
   b51c4:	f88d 3008 	strb.w	r3, [sp, #8]
   b51c8:	684b      	ldr	r3, [r1, #4]
   b51ca:	9303      	str	r3, [sp, #12]
   b51cc:	68cb      	ldr	r3, [r1, #12]
   b51ce:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b51d0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b51d2:	7a0b      	ldrb	r3, [r1, #8]
   b51d4:	9305      	str	r3, [sp, #20]
   b51d6:	a901      	add	r1, sp, #4
   b51d8:	f7ff fb10 	bl	b47fc <hal_i2c_request_ex>
}
   b51dc:	b007      	add	sp, #28
   b51de:	f85d fb04 	ldr.w	pc, [sp], #4

000b51e2 <_ZN7TwoWire11requestFromEhjh>:
{
   b51e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b51e4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b51e6:	f88d 1000 	strb.w	r1, [sp]
   b51ea:	f04f 0164 	mov.w	r1, #100	; 0x64
   b51ee:	9103      	str	r1, [sp, #12]
   b51f0:	bf18      	it	ne
   b51f2:	2301      	movne	r3, #1
   b51f4:	4669      	mov	r1, sp
    size_ = size;
   b51f6:	9201      	str	r2, [sp, #4]
   b51f8:	f88d 3008 	strb.w	r3, [sp, #8]
   b51fc:	f7ff ffda 	bl	b51b4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5200:	b005      	add	sp, #20
   b5202:	f85d fb04 	ldr.w	pc, [sp], #4

000b5206 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5206:	7c00      	ldrb	r0, [r0, #16]
   b5208:	2200      	movs	r2, #0
   b520a:	f7ff bab7 	b.w	b477c <hal_i2c_begin_transmission>

000b520e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b520e:	7c00      	ldrb	r0, [r0, #16]
   b5210:	2200      	movs	r2, #0
   b5212:	f7ff babb 	b.w	b478c <hal_i2c_end_transmission>

000b5216 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5216:	2101      	movs	r1, #1
   b5218:	f7ff bff9 	b.w	b520e <_ZN7TwoWire15endTransmissionEh>

000b521c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b521c:	4770      	bx	lr

000b521e <_ZN9IPAddressD0Ev>:
   b521e:	b510      	push	{r4, lr}
   b5220:	2118      	movs	r1, #24
   b5222:	4604      	mov	r4, r0
   b5224:	f7fe ff39 	bl	b409a <_ZdlPvj>
   b5228:	4620      	mov	r0, r4
   b522a:	bd10      	pop	{r4, pc}

000b522c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b522c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b522e:	7d03      	ldrb	r3, [r0, #20]
   b5230:	2b06      	cmp	r3, #6
{
   b5232:	b08d      	sub	sp, #52	; 0x34
   b5234:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5236:	f100 0704 	add.w	r7, r0, #4
   b523a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b523e:	d012      	beq.n	b5266 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5240:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5244:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5248:	220a      	movs	r2, #10
   b524a:	4630      	mov	r0, r6
   b524c:	f000 f959 	bl	b5502 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5250:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5252:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5254:	d019      	beq.n	b528a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5256:	2c00      	cmp	r4, #0
   b5258:	d0f4      	beq.n	b5244 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b525a:	212e      	movs	r1, #46	; 0x2e
   b525c:	4630      	mov	r0, r6
   b525e:	f000 f937 	bl	b54d0 <_ZN5Print5printEc>
   b5262:	4404      	add	r4, r0
   b5264:	e7ee      	b.n	b5244 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5266:	232f      	movs	r3, #47	; 0x2f
   b5268:	466a      	mov	r2, sp
   b526a:	4639      	mov	r1, r7
   b526c:	200a      	movs	r0, #10
		buf[0] = 0;
   b526e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5272:	f7ff facb 	bl	b480c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5276:	4668      	mov	r0, sp
   b5278:	f000 fd37 	bl	b5cea <strlen>
   b527c:	6833      	ldr	r3, [r6, #0]
   b527e:	4602      	mov	r2, r0
   b5280:	68db      	ldr	r3, [r3, #12]
   b5282:	4669      	mov	r1, sp
   b5284:	4630      	mov	r0, r6
   b5286:	4798      	blx	r3
   b5288:	4604      	mov	r4, r0
    }
    return n;
}
   b528a:	4620      	mov	r0, r4
   b528c:	b00d      	add	sp, #52	; 0x34
   b528e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5290 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5290:	b510      	push	{r4, lr}
   b5292:	4b05      	ldr	r3, [pc, #20]	; (b52a8 <_ZN9IPAddressC1Ev+0x18>)
   b5294:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5296:	2211      	movs	r2, #17
   b5298:	f840 3b04 	str.w	r3, [r0], #4
   b529c:	2100      	movs	r1, #0
   b529e:	f000 fcc8 	bl	b5c32 <memset>
}
   b52a2:	4620      	mov	r0, r4
   b52a4:	bd10      	pop	{r4, pc}
   b52a6:	bf00      	nop
   b52a8:	000b5f28 	.word	0x000b5f28

000b52ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b52ac:	4603      	mov	r3, r0
   b52ae:	4a07      	ldr	r2, [pc, #28]	; (b52cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b52b0:	b510      	push	{r4, lr}
   b52b2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b52b6:	f101 0210 	add.w	r2, r1, #16
   b52ba:	f851 4b04 	ldr.w	r4, [r1], #4
   b52be:	f843 4b04 	str.w	r4, [r3], #4
   b52c2:	4291      	cmp	r1, r2
   b52c4:	d1f9      	bne.n	b52ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b52c6:	780a      	ldrb	r2, [r1, #0]
   b52c8:	701a      	strb	r2, [r3, #0]
}
   b52ca:	bd10      	pop	{r4, pc}
   b52cc:	000b5f28 	.word	0x000b5f28

000b52d0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b52d0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b52d2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b52d6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b52da:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b52de:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b52e2:	2304      	movs	r3, #4
   b52e4:	6041      	str	r1, [r0, #4]
   b52e6:	7503      	strb	r3, [r0, #20]
}
   b52e8:	bd10      	pop	{r4, pc}
	...

000b52ec <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b52ec:	b507      	push	{r0, r1, r2, lr}
   b52ee:	4b06      	ldr	r3, [pc, #24]	; (b5308 <_ZN9IPAddressC1EPKh+0x1c>)
   b52f0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b52f2:	78cb      	ldrb	r3, [r1, #3]
   b52f4:	9300      	str	r3, [sp, #0]
   b52f6:	788b      	ldrb	r3, [r1, #2]
   b52f8:	784a      	ldrb	r2, [r1, #1]
   b52fa:	7809      	ldrb	r1, [r1, #0]
   b52fc:	f7ff ffe8 	bl	b52d0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5300:	b003      	add	sp, #12
   b5302:	f85d fb04 	ldr.w	pc, [sp], #4
   b5306:	bf00      	nop
   b5308:	000b5f28 	.word	0x000b5f28

000b530c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b530c:	4b01      	ldr	r3, [pc, #4]	; (b5314 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b530e:	4a02      	ldr	r2, [pc, #8]	; (b5318 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5310:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5312:	4770      	bx	lr
   b5314:	2003e6d0 	.word	0x2003e6d0
   b5318:	000b5f34 	.word	0x000b5f34

000b531c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b531c:	2300      	movs	r3, #0
   b531e:	6840      	ldr	r0, [r0, #4]
   b5320:	461a      	mov	r2, r3
   b5322:	f7ff bb4f 	b.w	b49c4 <network_connect>

000b5326 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5326:	6840      	ldr	r0, [r0, #4]
   b5328:	2200      	movs	r2, #0
   b532a:	2102      	movs	r1, #2
   b532c:	f7ff bb5a 	b.w	b49e4 <network_disconnect>

000b5330 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5330:	2200      	movs	r2, #0
   b5332:	6840      	ldr	r0, [r0, #4]
   b5334:	4611      	mov	r1, r2
   b5336:	f7ff bb4d 	b.w	b49d4 <network_connecting>

000b533a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b533a:	2200      	movs	r2, #0
   b533c:	6840      	ldr	r0, [r0, #4]
   b533e:	4611      	mov	r1, r2
   b5340:	f7ff bb58 	b.w	b49f4 <network_ready>

000b5344 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5344:	2300      	movs	r3, #0
   b5346:	6840      	ldr	r0, [r0, #4]
   b5348:	461a      	mov	r2, r3
   b534a:	4619      	mov	r1, r3
   b534c:	f7ff bb5a 	b.w	b4a04 <network_on>

000b5350 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5350:	2300      	movs	r3, #0
   b5352:	6840      	ldr	r0, [r0, #4]
   b5354:	461a      	mov	r2, r3
   b5356:	4619      	mov	r1, r3
   b5358:	f7ff bb5c 	b.w	b4a14 <network_off>

000b535c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b535c:	6840      	ldr	r0, [r0, #4]
   b535e:	2100      	movs	r1, #0
   b5360:	f7ff bb80 	b.w	b4a64 <network_is_on>

000b5364 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5364:	6840      	ldr	r0, [r0, #4]
   b5366:	2100      	movs	r1, #0
   b5368:	f7ff bb84 	b.w	b4a74 <network_is_off>

000b536c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b536c:	6840      	ldr	r0, [r0, #4]
   b536e:	2200      	movs	r2, #0
   b5370:	f081 0101 	eor.w	r1, r1, #1
   b5374:	f7ff bb56 	b.w	b4a24 <network_listen>

000b5378 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5378:	6840      	ldr	r0, [r0, #4]
   b537a:	2200      	movs	r2, #0
   b537c:	f7ff bb62 	b.w	b4a44 <network_set_listen_timeout>

000b5380 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5380:	2200      	movs	r2, #0
   b5382:	6840      	ldr	r0, [r0, #4]
   b5384:	4611      	mov	r1, r2
   b5386:	f7ff bb65 	b.w	b4a54 <network_get_listen_timeout>

000b538a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b538a:	2200      	movs	r2, #0
   b538c:	6840      	ldr	r0, [r0, #4]
   b538e:	4611      	mov	r1, r2
   b5390:	f7ff bb50 	b.w	b4a34 <network_listening>

000b5394 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5398:	b095      	sub	sp, #84	; 0x54
   b539a:	4614      	mov	r4, r2
   b539c:	460d      	mov	r5, r1
   b539e:	4607      	mov	r7, r0
    IPAddress addr;
   b53a0:	f7ff ff76 	bl	b5290 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b53a4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b53a6:	221c      	movs	r2, #28
   b53a8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b53aa:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b53ac:	f000 fc41 	bl	b5c32 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b53b0:	2340      	movs	r3, #64	; 0x40
   b53b2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b53b4:	4620      	mov	r0, r4
   b53b6:	466b      	mov	r3, sp
   b53b8:	aa0c      	add	r2, sp, #48	; 0x30
   b53ba:	2100      	movs	r1, #0
   b53bc:	f7ff fa36 	bl	b482c <netdb_getaddrinfo>
    if (!r) {
   b53c0:	4604      	mov	r4, r0
   b53c2:	2800      	cmp	r0, #0
   b53c4:	d14b      	bne.n	b545e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b53c6:	4602      	mov	r2, r0
   b53c8:	2101      	movs	r1, #1
   b53ca:	6868      	ldr	r0, [r5, #4]
   b53cc:	f7ff fb12 	bl	b49f4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b53d0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b53d2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b53d4:	4622      	mov	r2, r4
   b53d6:	6868      	ldr	r0, [r5, #4]
   b53d8:	f7ff fb0c 	bl	b49f4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b53dc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b53de:	4681      	mov	r9, r0
        bool ok = false;
   b53e0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b53e2:	2e00      	cmp	r6, #0
   b53e4:	d03b      	beq.n	b545e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b53e6:	2900      	cmp	r1, #0
   b53e8:	d139      	bne.n	b545e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b53ea:	6873      	ldr	r3, [r6, #4]
   b53ec:	2b02      	cmp	r3, #2
   b53ee:	d003      	beq.n	b53f8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b53f0:	2b0a      	cmp	r3, #10
   b53f2:	d011      	beq.n	b5418 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b53f4:	69f6      	ldr	r6, [r6, #28]
   b53f6:	e7f4      	b.n	b53e2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b53f8:	f1b8 0f00 	cmp.w	r8, #0
   b53fc:	d0fa      	beq.n	b53f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b53fe:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5400:	a806      	add	r0, sp, #24
   b5402:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5404:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5406:	f7ff ff71 	bl	b52ec <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b540a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b540c:	1d3c      	adds	r4, r7, #4
   b540e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5410:	682b      	ldr	r3, [r5, #0]
   b5412:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5414:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5416:	e7ed      	b.n	b53f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5418:	f1b9 0f00 	cmp.w	r9, #0
   b541c:	d0ea      	beq.n	b53f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b541e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5420:	2210      	movs	r2, #16
   b5422:	a801      	add	r0, sp, #4
   b5424:	f000 fc05 	bl	b5c32 <memset>
                    a.v = 6;
   b5428:	2306      	movs	r3, #6
   b542a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b542e:	ad01      	add	r5, sp, #4
   b5430:	f104 0308 	add.w	r3, r4, #8
   b5434:	3418      	adds	r4, #24
   b5436:	6818      	ldr	r0, [r3, #0]
   b5438:	6859      	ldr	r1, [r3, #4]
   b543a:	462a      	mov	r2, r5
   b543c:	c203      	stmia	r2!, {r0, r1}
   b543e:	3308      	adds	r3, #8
   b5440:	42a3      	cmp	r3, r4
   b5442:	4615      	mov	r5, r2
   b5444:	d1f7      	bne.n	b5436 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5446:	a901      	add	r1, sp, #4
   b5448:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b544a:	ad07      	add	r5, sp, #28
   b544c:	f7ff ff2e 	bl	b52ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5452:	1d3c      	adds	r4, r7, #4
   b5454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5456:	682b      	ldr	r3, [r5, #0]
   b5458:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b545a:	4649      	mov	r1, r9
   b545c:	e7ca      	b.n	b53f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b545e:	9800      	ldr	r0, [sp, #0]
   b5460:	f7ff f9dc 	bl	b481c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5464:	4638      	mov	r0, r7
   b5466:	b015      	add	sp, #84	; 0x54
   b5468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b546c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b546c:	4b02      	ldr	r3, [pc, #8]	; (b5478 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b546e:	4a03      	ldr	r2, [pc, #12]	; (b547c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5470:	601a      	str	r2, [r3, #0]
   b5472:	2200      	movs	r2, #0
   b5474:	605a      	str	r2, [r3, #4]

} // spark
   b5476:	4770      	bx	lr
   b5478:	2003e6d4 	.word	0x2003e6d4
   b547c:	000b5f40 	.word	0x000b5f40

000b5480 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5482:	4606      	mov	r6, r0
   b5484:	460d      	mov	r5, r1
  size_t n = 0;
   b5486:	188f      	adds	r7, r1, r2
   b5488:	2400      	movs	r4, #0
  while (size--) {
   b548a:	42bd      	cmp	r5, r7
   b548c:	d00c      	beq.n	b54a8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b548e:	6833      	ldr	r3, [r6, #0]
   b5490:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5494:	689b      	ldr	r3, [r3, #8]
   b5496:	4630      	mov	r0, r6
   b5498:	4798      	blx	r3
     if (chunk>=0)
   b549a:	1e03      	subs	r3, r0, #0
   b549c:	db01      	blt.n	b54a2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b549e:	441c      	add	r4, r3
  while (size--) {
   b54a0:	e7f3      	b.n	b548a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b54a2:	2c00      	cmp	r4, #0
   b54a4:	bf08      	it	eq
   b54a6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b54a8:	4620      	mov	r0, r4
   b54aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b54ac <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b54ac:	b513      	push	{r0, r1, r4, lr}
   b54ae:	4604      	mov	r4, r0
    }
   b54b0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b54b2:	b159      	cbz	r1, b54cc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b54b4:	9101      	str	r1, [sp, #4]
   b54b6:	f000 fc18 	bl	b5cea <strlen>
   b54ba:	6823      	ldr	r3, [r4, #0]
   b54bc:	9901      	ldr	r1, [sp, #4]
   b54be:	68db      	ldr	r3, [r3, #12]
   b54c0:	4602      	mov	r2, r0
   b54c2:	4620      	mov	r0, r4
    }
   b54c4:	b002      	add	sp, #8
   b54c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b54ca:	4718      	bx	r3
    }
   b54cc:	b002      	add	sp, #8
   b54ce:	bd10      	pop	{r4, pc}

000b54d0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b54d0:	6803      	ldr	r3, [r0, #0]
   b54d2:	689b      	ldr	r3, [r3, #8]
   b54d4:	4718      	bx	r3

000b54d6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b54d6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b54d8:	210d      	movs	r1, #13
{
   b54da:	4605      	mov	r5, r0
  size_t n = print('\r');
   b54dc:	f7ff fff8 	bl	b54d0 <_ZN5Print5printEc>
  n += print('\n');
   b54e0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b54e2:	4604      	mov	r4, r0
  n += print('\n');
   b54e4:	4628      	mov	r0, r5
   b54e6:	f7ff fff3 	bl	b54d0 <_ZN5Print5printEc>
  return n;
}
   b54ea:	4420      	add	r0, r4
   b54ec:	bd38      	pop	{r3, r4, r5, pc}

000b54ee <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b54ee:	b538      	push	{r3, r4, r5, lr}
   b54f0:	4605      	mov	r5, r0
  return write(str);
   b54f2:	f7ff ffdb 	bl	b54ac <_ZN5Print5writeEPKc>
   b54f6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b54f8:	4628      	mov	r0, r5
   b54fa:	f7ff ffec 	bl	b54d6 <_ZN5Print7printlnEv>
  return n;
}
   b54fe:	4420      	add	r0, r4
   b5500:	bd38      	pop	{r3, r4, r5, pc}

000b5502 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5502:	b530      	push	{r4, r5, lr}
   b5504:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5506:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5508:	2a01      	cmp	r2, #1
  *str = '\0';
   b550a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b550e:	bf98      	it	ls
   b5510:	220a      	movls	r2, #10
   b5512:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5514:	460d      	mov	r5, r1
   b5516:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b551a:	fb01 5312 	mls	r3, r1, r2, r5
   b551e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5522:	2b09      	cmp	r3, #9
   b5524:	bf94      	ite	ls
   b5526:	3330      	addls	r3, #48	; 0x30
   b5528:	3337      	addhi	r3, #55	; 0x37
   b552a:	b2db      	uxtb	r3, r3
  } while(n);
   b552c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b552e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5532:	d9ef      	bls.n	b5514 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5534:	4621      	mov	r1, r4
   b5536:	f7ff ffb9 	bl	b54ac <_ZN5Print5writeEPKc>
}
   b553a:	b00b      	add	sp, #44	; 0x2c
   b553c:	bd30      	pop	{r4, r5, pc}
	...

000b5540 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5540:	4b01      	ldr	r3, [pc, #4]	; (b5548 <_GLOBAL__sub_I_RGB+0x8>)
   b5542:	2200      	movs	r2, #0
   b5544:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5546:	4770      	bx	lr
   b5548:	2003e6dc 	.word	0x2003e6dc

000b554c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b554c:	b510      	push	{r4, lr}
   b554e:	4604      	mov	r4, r0
{
	free(buffer);
   b5550:	6800      	ldr	r0, [r0, #0]
   b5552:	f7ff fa9f 	bl	b4a94 <free>
}
   b5556:	4620      	mov	r0, r4
   b5558:	bd10      	pop	{r4, pc}

000b555a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b555a:	b510      	push	{r4, lr}
   b555c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b555e:	6800      	ldr	r0, [r0, #0]
   b5560:	b108      	cbz	r0, b5566 <_ZN6String10invalidateEv+0xc>
   b5562:	f7ff fa97 	bl	b4a94 <free>
	buffer = NULL;
   b5566:	2300      	movs	r3, #0
	capacity = len = 0;
   b5568:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b556c:	6023      	str	r3, [r4, #0]
}
   b556e:	bd10      	pop	{r4, pc}

000b5570 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5570:	b538      	push	{r3, r4, r5, lr}
   b5572:	4604      	mov	r4, r0
   b5574:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5576:	6800      	ldr	r0, [r0, #0]
   b5578:	3101      	adds	r1, #1
   b557a:	f7ff fa93 	bl	b4aa4 <realloc>
	if (newbuffer) {
   b557e:	b110      	cbz	r0, b5586 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5580:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5584:	2001      	movs	r0, #1
	}
	return 0;
}
   b5586:	bd38      	pop	{r3, r4, r5, pc}

000b5588 <_ZN6String7reserveEj>:
{
   b5588:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b558a:	6803      	ldr	r3, [r0, #0]
{
   b558c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b558e:	b123      	cbz	r3, b559a <_ZN6String7reserveEj+0x12>
   b5590:	6843      	ldr	r3, [r0, #4]
   b5592:	428b      	cmp	r3, r1
   b5594:	d301      	bcc.n	b559a <_ZN6String7reserveEj+0x12>
   b5596:	2001      	movs	r0, #1
}
   b5598:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b559a:	4620      	mov	r0, r4
   b559c:	f7ff ffe8 	bl	b5570 <_ZN6String12changeBufferEj>
   b55a0:	2800      	cmp	r0, #0
   b55a2:	d0f9      	beq.n	b5598 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b55a4:	68a3      	ldr	r3, [r4, #8]
   b55a6:	2b00      	cmp	r3, #0
   b55a8:	d1f5      	bne.n	b5596 <_ZN6String7reserveEj+0xe>
   b55aa:	6822      	ldr	r2, [r4, #0]
   b55ac:	7013      	strb	r3, [r2, #0]
   b55ae:	e7f2      	b.n	b5596 <_ZN6String7reserveEj+0xe>

000b55b0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b55b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b55b2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b55b4:	4611      	mov	r1, r2
   b55b6:	9201      	str	r2, [sp, #4]
{
   b55b8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b55ba:	f7ff ffe5 	bl	b5588 <_ZN6String7reserveEj>
   b55be:	9a01      	ldr	r2, [sp, #4]
   b55c0:	b928      	cbnz	r0, b55ce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b55c2:	4620      	mov	r0, r4
   b55c4:	f7ff ffc9 	bl	b555a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b55c8:	4620      	mov	r0, r4
   b55ca:	b003      	add	sp, #12
   b55cc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b55ce:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b55d0:	4629      	mov	r1, r5
   b55d2:	6820      	ldr	r0, [r4, #0]
   b55d4:	f000 fb1f 	bl	b5c16 <memcpy>
	buffer[len] = 0;
   b55d8:	6822      	ldr	r2, [r4, #0]
   b55da:	68a3      	ldr	r3, [r4, #8]
   b55dc:	2100      	movs	r1, #0
   b55de:	54d1      	strb	r1, [r2, r3]
	return *this;
   b55e0:	e7f2      	b.n	b55c8 <_ZN6String4copyEPKcj+0x18>

000b55e2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b55e2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b55e4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b55e6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b55ea:	4604      	mov	r4, r0
	len = 0;
   b55ec:	6083      	str	r3, [r0, #8]
	flags = 0;
   b55ee:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b55f0:	b141      	cbz	r1, b5604 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b55f2:	4608      	mov	r0, r1
   b55f4:	9101      	str	r1, [sp, #4]
   b55f6:	f000 fb78 	bl	b5cea <strlen>
   b55fa:	9901      	ldr	r1, [sp, #4]
   b55fc:	4602      	mov	r2, r0
   b55fe:	4620      	mov	r0, r4
   b5600:	f7ff ffd6 	bl	b55b0 <_ZN6String4copyEPKcj>
}
   b5604:	4620      	mov	r0, r4
   b5606:	b002      	add	sp, #8
   b5608:	bd10      	pop	{r4, pc}

000b560a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b560a:	b513      	push	{r0, r1, r4, lr}
   b560c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b560e:	b159      	cbz	r1, b5628 <_ZN6StringaSEPKc+0x1e>
   b5610:	4608      	mov	r0, r1
   b5612:	9101      	str	r1, [sp, #4]
   b5614:	f000 fb69 	bl	b5cea <strlen>
   b5618:	9901      	ldr	r1, [sp, #4]
   b561a:	4602      	mov	r2, r0
   b561c:	4620      	mov	r0, r4
   b561e:	f7ff ffc7 	bl	b55b0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5622:	4620      	mov	r0, r4
   b5624:	b002      	add	sp, #8
   b5626:	bd10      	pop	{r4, pc}
	else invalidate();
   b5628:	f7ff ff97 	bl	b555a <_ZN6String10invalidateEv>
   b562c:	e7f9      	b.n	b5622 <_ZN6StringaSEPKc+0x18>

000b562e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b562e:	b510      	push	{r4, lr}
   b5630:	4604      	mov	r4, r0
   b5632:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5634:	2300      	movs	r3, #0
	capacity = 0;
   b5636:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b563a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b563c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b563e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b5640:	a901      	add	r1, sp, #4
   b5642:	f000 f9ab 	bl	b599c <itoa>
	*this = buf;
   b5646:	a901      	add	r1, sp, #4
   b5648:	4620      	mov	r0, r4
   b564a:	f7ff ffde 	bl	b560a <_ZN6StringaSEPKc>
}
   b564e:	4620      	mov	r0, r4
   b5650:	b00a      	add	sp, #40	; 0x28
   b5652:	bd10      	pop	{r4, pc}

000b5654 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5654:	b570      	push	{r4, r5, r6, lr}
   b5656:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5658:	460e      	mov	r6, r1
   b565a:	b909      	cbnz	r1, b5660 <_ZN6String6concatEPKcj+0xc>
   b565c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b565e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5660:	b16a      	cbz	r2, b567e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5662:	6884      	ldr	r4, [r0, #8]
   b5664:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5666:	4621      	mov	r1, r4
   b5668:	f7ff ff8e 	bl	b5588 <_ZN6String7reserveEj>
   b566c:	2800      	cmp	r0, #0
   b566e:	d0f5      	beq.n	b565c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5670:	6828      	ldr	r0, [r5, #0]
   b5672:	68ab      	ldr	r3, [r5, #8]
   b5674:	4631      	mov	r1, r6
   b5676:	4418      	add	r0, r3
   b5678:	f000 fb12 	bl	b5ca0 <strcpy>
	len = newlen;
   b567c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b567e:	2001      	movs	r0, #1
   b5680:	e7ed      	b.n	b565e <_ZN6String6concatEPKcj+0xa>

000b5682 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b5682:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5684:	688a      	ldr	r2, [r1, #8]
   b5686:	6809      	ldr	r1, [r1, #0]
{
   b5688:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b568a:	f7ff ffe3 	bl	b5654 <_ZN6String6concatEPKcj>
   b568e:	b910      	cbnz	r0, b5696 <_ZplRK15StringSumHelperRK6String+0x14>
   b5690:	4620      	mov	r0, r4
   b5692:	f7ff ff62 	bl	b555a <_ZN6String10invalidateEv>
	return a;
}
   b5696:	4620      	mov	r0, r4
   b5698:	bd10      	pop	{r4, pc}

000b569a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b569a:	b513      	push	{r0, r1, r4, lr}
   b569c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b569e:	b929      	cbnz	r1, b56ac <_ZplRK15StringSumHelperPKc+0x12>
   b56a0:	4620      	mov	r0, r4
   b56a2:	f7ff ff5a 	bl	b555a <_ZN6String10invalidateEv>
	return a;
}
   b56a6:	4620      	mov	r0, r4
   b56a8:	b002      	add	sp, #8
   b56aa:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b56ac:	4608      	mov	r0, r1
   b56ae:	9101      	str	r1, [sp, #4]
   b56b0:	f000 fb1b 	bl	b5cea <strlen>
   b56b4:	9901      	ldr	r1, [sp, #4]
   b56b6:	4602      	mov	r2, r0
   b56b8:	4620      	mov	r0, r4
   b56ba:	f7ff ffcb 	bl	b5654 <_ZN6String6concatEPKcj>
   b56be:	2800      	cmp	r0, #0
   b56c0:	d0ee      	beq.n	b56a0 <_ZplRK15StringSumHelperPKc+0x6>
   b56c2:	e7f0      	b.n	b56a6 <_ZplRK15StringSumHelperPKc+0xc>

000b56c4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b56c4:	4b05      	ldr	r3, [pc, #20]	; (b56dc <_GLOBAL__sub_I_System+0x18>)
   b56c6:	2202      	movs	r2, #2
   b56c8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b56ca:	4b05      	ldr	r3, [pc, #20]	; (b56e0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b56cc:	4a05      	ldr	r2, [pc, #20]	; (b56e4 <_GLOBAL__sub_I_System+0x20>)
   b56ce:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b56d0:	2000      	movs	r0, #0
   b56d2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b56d6:	f7ff b929 	b.w	b492c <set_system_mode>
   b56da:	bf00      	nop
   b56dc:	2003e6f8 	.word	0x2003e6f8
   b56e0:	2003e6ec 	.word	0x2003e6ec
   b56e4:	ffff0000 	.word	0xffff0000

000b56e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b56e8:	4b02      	ldr	r3, [pc, #8]	; (b56f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b56ea:	681a      	ldr	r2, [r3, #0]
   b56ec:	4b02      	ldr	r3, [pc, #8]	; (b56f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b56ee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b56f0:	4770      	bx	lr
   b56f2:	bf00      	nop
   b56f4:	2003e63c 	.word	0x2003e63c
   b56f8:	2003e6fc 	.word	0x2003e6fc

000b56fc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b56fc:	4770      	bx	lr

000b56fe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b56fe:	7441      	strb	r1, [r0, #17]
}
   b5700:	4770      	bx	lr

000b5702 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5702:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5704:	7c00      	ldrb	r0, [r0, #16]
   b5706:	f7ff f8c1 	bl	b488c <hal_usart_available_data_for_write>
}
   b570a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b570e:	bd08      	pop	{r3, pc}

000b5710 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5710:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5712:	7c00      	ldrb	r0, [r0, #16]
   b5714:	f7ff f89a 	bl	b484c <hal_usart_available>
}
   b5718:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b571c:	bd08      	pop	{r3, pc}

000b571e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b571e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5720:	7c00      	ldrb	r0, [r0, #16]
   b5722:	f7ff f8a3 	bl	b486c <hal_usart_peek>
}
   b5726:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b572a:	bd08      	pop	{r3, pc}

000b572c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b572c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b572e:	7c00      	ldrb	r0, [r0, #16]
   b5730:	f7ff f894 	bl	b485c <hal_usart_read>
}
   b5734:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5738:	bd08      	pop	{r3, pc}

000b573a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b573a:	7c00      	ldrb	r0, [r0, #16]
   b573c:	f7ff b89e 	b.w	b487c <hal_usart_flush>

000b5740 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5740:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5742:	7c45      	ldrb	r5, [r0, #17]
{
   b5744:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5746:	b12d      	cbz	r5, b5754 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5748:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b574a:	b003      	add	sp, #12
   b574c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5750:	f7ff b874 	b.w	b483c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5754:	7c00      	ldrb	r0, [r0, #16]
   b5756:	9101      	str	r1, [sp, #4]
   b5758:	f7ff f898 	bl	b488c <hal_usart_available_data_for_write>
   b575c:	2800      	cmp	r0, #0
   b575e:	9901      	ldr	r1, [sp, #4]
   b5760:	dcf2      	bgt.n	b5748 <_ZN11USARTSerial5writeEh+0x8>
}
   b5762:	4628      	mov	r0, r5
   b5764:	b003      	add	sp, #12
   b5766:	bd30      	pop	{r4, r5, pc}

000b5768 <_ZN11USARTSerialD0Ev>:
   b5768:	b510      	push	{r4, lr}
   b576a:	2114      	movs	r1, #20
   b576c:	4604      	mov	r4, r0
   b576e:	f7fe fc94 	bl	b409a <_ZdlPvj>
   b5772:	4620      	mov	r0, r4
   b5774:	bd10      	pop	{r4, pc}
	...

000b5778 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5778:	b510      	push	{r4, lr}
   b577a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b577e:	4604      	mov	r4, r0
   b5780:	4608      	mov	r0, r1
   b5782:	4611      	mov	r1, r2
   b5784:	2200      	movs	r2, #0
   b5786:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b578a:	4b04      	ldr	r3, [pc, #16]	; (b579c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b578c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b578e:	2301      	movs	r3, #1
  _serial = serial;
   b5790:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5792:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5794:	f7ff f882 	bl	b489c <hal_usart_init_ex>
}
   b5798:	4620      	mov	r0, r4
   b579a:	bd10      	pop	{r4, pc}
   b579c:	000b5f98 	.word	0x000b5f98

000b57a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b57a0:	7441      	strb	r1, [r0, #17]
}
   b57a2:	4770      	bx	lr

000b57a4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b57a4:	4770      	bx	lr

000b57a6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b57a6:	4770      	bx	lr

000b57a8 <_ZN9USBSerial4readEv>:
{
   b57a8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b57aa:	2100      	movs	r1, #0
   b57ac:	7c00      	ldrb	r0, [r0, #16]
   b57ae:	f7ff f89d 	bl	b48ec <HAL_USB_USART_Receive_Data>
}
   b57b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b57b6:	bd08      	pop	{r3, pc}

000b57b8 <_ZN9USBSerial4peekEv>:
{
   b57b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b57ba:	2101      	movs	r1, #1
   b57bc:	7c00      	ldrb	r0, [r0, #16]
   b57be:	f7ff f895 	bl	b48ec <HAL_USB_USART_Receive_Data>
}
   b57c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b57c6:	bd08      	pop	{r3, pc}

000b57c8 <_ZN9USBSerial17availableForWriteEv>:
{
   b57c8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b57ca:	7c00      	ldrb	r0, [r0, #16]
   b57cc:	f7ff f886 	bl	b48dc <HAL_USB_USART_Available_Data_For_Write>
}
   b57d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b57d4:	bd08      	pop	{r3, pc}

000b57d6 <_ZN9USBSerial9availableEv>:
{
   b57d6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b57d8:	7c00      	ldrb	r0, [r0, #16]
   b57da:	f7ff f877 	bl	b48cc <HAL_USB_USART_Available_Data>
}
   b57de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b57e2:	bd08      	pop	{r3, pc}

000b57e4 <_ZN9USBSerial5writeEh>:
{
   b57e4:	b513      	push	{r0, r1, r4, lr}
   b57e6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b57e8:	7c00      	ldrb	r0, [r0, #16]
{
   b57ea:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b57ec:	f7ff f876 	bl	b48dc <HAL_USB_USART_Available_Data_For_Write>
   b57f0:	2800      	cmp	r0, #0
   b57f2:	9901      	ldr	r1, [sp, #4]
   b57f4:	dc01      	bgt.n	b57fa <_ZN9USBSerial5writeEh+0x16>
   b57f6:	7c60      	ldrb	r0, [r4, #17]
   b57f8:	b120      	cbz	r0, b5804 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b57fa:	7c20      	ldrb	r0, [r4, #16]
   b57fc:	f7ff f87e 	bl	b48fc <HAL_USB_USART_Send_Data>
   b5800:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5804:	b002      	add	sp, #8
   b5806:	bd10      	pop	{r4, pc}

000b5808 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5808:	7c00      	ldrb	r0, [r0, #16]
   b580a:	f7ff b87f 	b.w	b490c <HAL_USB_USART_Flush_Data>

000b580e <_ZN9USBSerialD0Ev>:
   b580e:	b510      	push	{r4, lr}
   b5810:	2114      	movs	r1, #20
   b5812:	4604      	mov	r4, r0
   b5814:	f7fe fc41 	bl	b409a <_ZdlPvj>
   b5818:	4620      	mov	r0, r4
   b581a:	bd10      	pop	{r4, pc}

000b581c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b581c:	b510      	push	{r4, lr}
   b581e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5822:	4604      	mov	r4, r0
   b5824:	4608      	mov	r0, r1
   b5826:	2100      	movs	r1, #0
   b5828:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b582c:	4b04      	ldr	r3, [pc, #16]	; (b5840 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b582e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5830:	2301      	movs	r3, #1
  _serial = serial;
   b5832:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5834:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5836:	4611      	mov	r1, r2
   b5838:	f7ff f838 	bl	b48ac <HAL_USB_USART_Init>
}
   b583c:	4620      	mov	r0, r4
   b583e:	bd10      	pop	{r4, pc}
   b5840:	000b5fc8 	.word	0x000b5fc8

000b5844 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5844:	7c00      	ldrb	r0, [r0, #16]
   b5846:	2200      	movs	r2, #0
   b5848:	f7ff b838 	b.w	b48bc <HAL_USB_USART_Begin>

000b584c <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   b584c:	7c00      	ldrb	r0, [r0, #16]
   b584e:	f7ff b865 	b.w	b491c <HAL_USB_USART_Is_Enabled>

000b5852 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   b5852:	f7ff bffb 	b.w	b584c <_ZN9USBSerial9isEnabledEv>

000b5856 <_Z19acquireSerialBufferv>:
{
   b5856:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5858:	2214      	movs	r2, #20
{
   b585a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b585c:	2100      	movs	r1, #0
   b585e:	f000 f9e8 	bl	b5c32 <memset>
}
   b5862:	4620      	mov	r0, r4
   b5864:	bd10      	pop	{r4, pc}
	...

000b5868 <_Z16_fetch_usbserialv>:
{
   b5868:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b586a:	4c0f      	ldr	r4, [pc, #60]	; (b58a8 <_Z16_fetch_usbserialv+0x40>)
{
   b586c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b586e:	a803      	add	r0, sp, #12
   b5870:	f7ff fff1 	bl	b5856 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5874:	7821      	ldrb	r1, [r4, #0]
   b5876:	f3bf 8f5b 	dmb	ish
   b587a:	f011 0101 	ands.w	r1, r1, #1
   b587e:	d10f      	bne.n	b58a0 <_Z16_fetch_usbserialv+0x38>
   b5880:	4620      	mov	r0, r4
   b5882:	9101      	str	r1, [sp, #4]
   b5884:	f7fe fc0b 	bl	b409e <__cxa_guard_acquire>
   b5888:	9901      	ldr	r1, [sp, #4]
   b588a:	b148      	cbz	r0, b58a0 <_Z16_fetch_usbserialv+0x38>
   b588c:	aa03      	add	r2, sp, #12
   b588e:	4807      	ldr	r0, [pc, #28]	; (b58ac <_Z16_fetch_usbserialv+0x44>)
   b5890:	f7ff ffc4 	bl	b581c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5894:	4620      	mov	r0, r4
   b5896:	f7fe fc07 	bl	b40a8 <__cxa_guard_release>
   b589a:	4805      	ldr	r0, [pc, #20]	; (b58b0 <_Z16_fetch_usbserialv+0x48>)
   b589c:	f000 f9b5 	bl	b5c0a <atexit>
	return _usbserial;
}
   b58a0:	4802      	ldr	r0, [pc, #8]	; (b58ac <_Z16_fetch_usbserialv+0x44>)
   b58a2:	b008      	add	sp, #32
   b58a4:	bd10      	pop	{r4, pc}
   b58a6:	bf00      	nop
   b58a8:	2003e700 	.word	0x2003e700
   b58ac:	2003e704 	.word	0x2003e704
   b58b0:	000b57a5 	.word	0x000b57a5

000b58b4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b58b4:	2200      	movs	r2, #0
   b58b6:	6840      	ldr	r0, [r0, #4]
   b58b8:	4611      	mov	r1, r2
   b58ba:	f7ff b89b 	b.w	b49f4 <network_ready>

000b58be <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b58be:	2200      	movs	r2, #0
   b58c0:	6840      	ldr	r0, [r0, #4]
   b58c2:	4611      	mov	r1, r2
   b58c4:	f7ff b8b6 	b.w	b4a34 <network_listening>

000b58c8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b58c8:	2200      	movs	r2, #0
   b58ca:	6840      	ldr	r0, [r0, #4]
   b58cc:	4611      	mov	r1, r2
   b58ce:	f7ff b8c1 	b.w	b4a54 <network_get_listen_timeout>

000b58d2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b58d2:	6840      	ldr	r0, [r0, #4]
   b58d4:	2200      	movs	r2, #0
   b58d6:	f7ff b8b5 	b.w	b4a44 <network_set_listen_timeout>

000b58da <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b58da:	6840      	ldr	r0, [r0, #4]
   b58dc:	2200      	movs	r2, #0
   b58de:	f081 0101 	eor.w	r1, r1, #1
   b58e2:	f7ff b89f 	b.w	b4a24 <network_listen>

000b58e6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b58e6:	2300      	movs	r3, #0
   b58e8:	6840      	ldr	r0, [r0, #4]
   b58ea:	461a      	mov	r2, r3
   b58ec:	4619      	mov	r1, r3
   b58ee:	f7ff b891 	b.w	b4a14 <network_off>

000b58f2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b58f2:	2300      	movs	r3, #0
   b58f4:	6840      	ldr	r0, [r0, #4]
   b58f6:	461a      	mov	r2, r3
   b58f8:	4619      	mov	r1, r3
   b58fa:	f7ff b883 	b.w	b4a04 <network_on>

000b58fe <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b58fe:	2200      	movs	r2, #0
   b5900:	6840      	ldr	r0, [r0, #4]
   b5902:	4611      	mov	r1, r2
   b5904:	f7ff b866 	b.w	b49d4 <network_connecting>

000b5908 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5908:	6840      	ldr	r0, [r0, #4]
   b590a:	2200      	movs	r2, #0
   b590c:	2102      	movs	r1, #2
   b590e:	f7ff b869 	b.w	b49e4 <network_disconnect>

000b5912 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5912:	2300      	movs	r3, #0
   b5914:	6840      	ldr	r0, [r0, #4]
   b5916:	461a      	mov	r2, r3
   b5918:	f7ff b854 	b.w	b49c4 <network_connect>

000b591c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b591c:	4b02      	ldr	r3, [pc, #8]	; (b5928 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b591e:	2204      	movs	r2, #4
   b5920:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5922:	4a02      	ldr	r2, [pc, #8]	; (b592c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5924:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5926:	4770      	bx	lr
   b5928:	2003e718 	.word	0x2003e718
   b592c:	000b5ff8 	.word	0x000b5ff8

000b5930 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5930:	b510      	push	{r4, lr}
   b5932:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5934:	f000 f9d9 	bl	b5cea <strlen>
   b5938:	3801      	subs	r0, #1
   b593a:	1823      	adds	r3, r4, r0
   b593c:	4620      	mov	r0, r4
	while(i<j){
   b593e:	4283      	cmp	r3, r0
   b5940:	d906      	bls.n	b5950 <_Z11str_reversePc+0x20>
		c = *i;
   b5942:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5944:	7819      	ldrb	r1, [r3, #0]
   b5946:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b594a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b594e:	e7f6      	b.n	b593e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5950:	bd10      	pop	{r4, pc}

000b5952 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5952:	b570      	push	{r4, r5, r6, lr}
   b5954:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5956:	1e91      	subs	r1, r2, #2
   b5958:	2922      	cmp	r1, #34	; 0x22
   b595a:	d81d      	bhi.n	b5998 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b595c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b595e:	b930      	cbnz	r0, b596e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5960:	4423      	add	r3, r4
            *ptr++ = '0';
   b5962:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5964:	429d      	cmp	r5, r3
   b5966:	d210      	bcs.n	b598a <ultoa+0x38>
            *ptr++ = '0';
   b5968:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b596c:	e7fa      	b.n	b5964 <ultoa+0x12>
            result.quot = a/radix;
   b596e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5972:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5976:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5978:	2809      	cmp	r0, #9
                *ptr += '0';
   b597a:	bf94      	ite	ls
   b597c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b597e:	3157      	addhi	r1, #87	; 0x57
   b5980:	b2c9      	uxtb	r1, r1
   b5982:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5986:	4630      	mov	r0, r6
	while(a){
   b5988:	e7e9      	b.n	b595e <ultoa+0xc>

	*ptr = '\0';
   b598a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b598c:	4620      	mov	r0, r4
	*ptr = '\0';
   b598e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5990:	f7ff ffce 	bl	b5930 <_Z11str_reversePc>
	return buffer;
   b5994:	4620      	mov	r0, r4
}
   b5996:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5998:	2000      	movs	r0, #0
   b599a:	e7fc      	b.n	b5996 <ultoa+0x44>

000b599c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b599c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b599e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b59a0:	460c      	mov	r4, r1
   b59a2:	4615      	mov	r5, r2
	if(a<0){
   b59a4:	da0e      	bge.n	b59c4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b59a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b59aa:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b59ae:	bf14      	ite	ne
   b59b0:	4258      	negne	r0, r3
   b59b2:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b59b4:	2301      	movs	r3, #1
		*buffer = '-';
   b59b6:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b59b8:	462a      	mov	r2, r5
   b59ba:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b59bc:	f7ff ffc9 	bl	b5952 <ultoa>
	}
	return buffer;
}
   b59c0:	4620      	mov	r0, r4
   b59c2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b59c4:	2301      	movs	r3, #1
   b59c6:	e7f9      	b.n	b59bc <itoa+0x20>

000b59c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b59c8:	4b01      	ldr	r3, [pc, #4]	; (b59d0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b59ca:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b59cc:	4770      	bx	lr
   b59ce:	bf00      	nop
   b59d0:	2003e640 	.word	0x2003e640

000b59d4 <serialEventRun>:
{
   b59d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b59d6:	4b0b      	ldr	r3, [pc, #44]	; (b5a04 <serialEventRun+0x30>)
   b59d8:	b143      	cbz	r3, b59ec <serialEventRun+0x18>
   b59da:	f7ff ff45 	bl	b5868 <_Z16_fetch_usbserialv>
   b59de:	6803      	ldr	r3, [r0, #0]
   b59e0:	691b      	ldr	r3, [r3, #16]
   b59e2:	4798      	blx	r3
   b59e4:	2800      	cmp	r0, #0
   b59e6:	dd01      	ble.n	b59ec <serialEventRun+0x18>
        serialEvent();
   b59e8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b59ec:	4b06      	ldr	r3, [pc, #24]	; (b5a08 <serialEventRun+0x34>)
   b59ee:	b143      	cbz	r3, b5a02 <serialEventRun+0x2e>
   b59f0:	f000 f8e2 	bl	b5bb8 <_Z22__fetch_global_Serial1v>
   b59f4:	6803      	ldr	r3, [r0, #0]
   b59f6:	691b      	ldr	r3, [r3, #16]
   b59f8:	4798      	blx	r3
   b59fa:	2800      	cmp	r0, #0
   b59fc:	dd01      	ble.n	b5a02 <serialEventRun+0x2e>
        serialEvent1();
   b59fe:	f3af 8000 	nop.w
}
   b5a02:	bd08      	pop	{r3, pc}
	...

000b5a0c <_post_loop>:
{
   b5a0c:	b508      	push	{r3, lr}
	serialEventRun();
   b5a0e:	f7ff ffe1 	bl	b59d4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5a12:	f7fe fea3 	bl	b475c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5a16:	4b01      	ldr	r3, [pc, #4]	; (b5a1c <_post_loop+0x10>)
   b5a18:	6018      	str	r0, [r3, #0]
}
   b5a1a:	bd08      	pop	{r3, pc}
   b5a1c:	2003e728 	.word	0x2003e728

000b5a20 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5a20:	4805      	ldr	r0, [pc, #20]	; (b5a38 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5a22:	4a06      	ldr	r2, [pc, #24]	; (b5a3c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5a24:	4906      	ldr	r1, [pc, #24]	; (b5a40 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5a26:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5a28:	1a12      	subs	r2, r2, r0
   b5a2a:	f000 f8f4 	bl	b5c16 <memcpy>
    __backup_sram_signature = signature;
   b5a2e:	4b05      	ldr	r3, [pc, #20]	; (b5a44 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5a30:	4a05      	ldr	r2, [pc, #20]	; (b5a48 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5a32:	601a      	str	r2, [r3, #0]
}
   b5a34:	bd08      	pop	{r3, pc}
   b5a36:	bf00      	nop
   b5a38:	2003f400 	.word	0x2003f400
   b5a3c:	2003f404 	.word	0x2003f404
   b5a40:	000b60f4 	.word	0x000b60f4
   b5a44:	2003f400 	.word	0x2003f400
   b5a48:	9a271c1e 	.word	0x9a271c1e

000b5a4c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5a4c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5a4e:	2300      	movs	r3, #0
   b5a50:	9300      	str	r3, [sp, #0]
   b5a52:	461a      	mov	r2, r3
   b5a54:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5a58:	f7fe ff92 	bl	b4980 <system_ctrl_set_result>
}
   b5a5c:	b003      	add	sp, #12
   b5a5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5a64 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5a64:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5a66:	8843      	ldrh	r3, [r0, #2]
   b5a68:	2b0a      	cmp	r3, #10
   b5a6a:	d008      	beq.n	b5a7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5a6c:	2b50      	cmp	r3, #80	; 0x50
   b5a6e:	d10b      	bne.n	b5a88 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5a70:	4b09      	ldr	r3, [pc, #36]	; (b5a98 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5a72:	681b      	ldr	r3, [r3, #0]
   b5a74:	b14b      	cbz	r3, b5a8a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5a76:	b003      	add	sp, #12
   b5a78:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5a7c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5a7e:	f7ff ffe5 	bl	b5a4c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5a82:	b003      	add	sp, #12
   b5a84:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5a88:	2300      	movs	r3, #0
   b5a8a:	9300      	str	r3, [sp, #0]
   b5a8c:	461a      	mov	r2, r3
   b5a8e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5a92:	f7fe ff75 	bl	b4980 <system_ctrl_set_result>
}
   b5a96:	e7f4      	b.n	b5a82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5a98:	2003e724 	.word	0x2003e724

000b5a9c <module_user_init_hook>:
{
   b5a9c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5a9e:	4812      	ldr	r0, [pc, #72]	; (b5ae8 <module_user_init_hook+0x4c>)
   b5aa0:	2100      	movs	r1, #0
   b5aa2:	f7ff f81f 	bl	b4ae4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5aa6:	4b11      	ldr	r3, [pc, #68]	; (b5aec <module_user_init_hook+0x50>)
   b5aa8:	681a      	ldr	r2, [r3, #0]
   b5aaa:	4b11      	ldr	r3, [pc, #68]	; (b5af0 <module_user_init_hook+0x54>)
   b5aac:	429a      	cmp	r2, r3
   b5aae:	4b11      	ldr	r3, [pc, #68]	; (b5af4 <module_user_init_hook+0x58>)
   b5ab0:	bf0c      	ite	eq
   b5ab2:	2201      	moveq	r2, #1
   b5ab4:	2200      	movne	r2, #0
   b5ab6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5ab8:	d001      	beq.n	b5abe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5aba:	f7ff ffb1 	bl	b5a20 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5abe:	f7fe fe45 	bl	b474c <HAL_RNG_GetRandomNumber>
   b5ac2:	4604      	mov	r4, r0
    srand(seed);
   b5ac4:	f000 f8be 	bl	b5c44 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5ac8:	4b0b      	ldr	r3, [pc, #44]	; (b5af8 <module_user_init_hook+0x5c>)
   b5aca:	b113      	cbz	r3, b5ad2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5acc:	4620      	mov	r0, r4
   b5ace:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5ad2:	2100      	movs	r1, #0
   b5ad4:	4808      	ldr	r0, [pc, #32]	; (b5af8 <module_user_init_hook+0x5c>)
   b5ad6:	f7fe ff6d 	bl	b49b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5ade:	4807      	ldr	r0, [pc, #28]	; (b5afc <module_user_init_hook+0x60>)
   b5ae0:	2100      	movs	r1, #0
   b5ae2:	f7fe bf43 	b.w	b496c <system_ctrl_set_app_request_handler>
   b5ae6:	bf00      	nop
   b5ae8:	000b59c9 	.word	0x000b59c9
   b5aec:	2003f400 	.word	0x2003f400
   b5af0:	9a271c1e 	.word	0x9a271c1e
   b5af4:	2003e720 	.word	0x2003e720
   b5af8:	00000000 	.word	0x00000000
   b5afc:	000b5a65 	.word	0x000b5a65

000b5b00 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5b00:	4770      	bx	lr
	...

000b5b04 <_Z17acquireWireBufferv>:
{
   b5b04:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5b06:	4b0a      	ldr	r3, [pc, #40]	; (b5b30 <_Z17acquireWireBufferv+0x2c>)
   b5b08:	6003      	str	r3, [r0, #0]
   b5b0a:	2301      	movs	r3, #1
{
   b5b0c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5b0e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5b10:	4908      	ldr	r1, [pc, #32]	; (b5b34 <_Z17acquireWireBufferv+0x30>)
   b5b12:	2020      	movs	r0, #32
   b5b14:	f000 f874 	bl	b5c00 <_ZnajRKSt9nothrow_t>
	};
   b5b18:	2520      	movs	r5, #32
   b5b1a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5b1c:	4905      	ldr	r1, [pc, #20]	; (b5b34 <_Z17acquireWireBufferv+0x30>)
	};
   b5b1e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5b20:	4628      	mov	r0, r5
   b5b22:	f000 f86d 	bl	b5c00 <_ZnajRKSt9nothrow_t>
	};
   b5b26:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5b2a:	4620      	mov	r0, r4
   b5b2c:	bd38      	pop	{r3, r4, r5, pc}
   b5b2e:	bf00      	nop
   b5b30:	00010018 	.word	0x00010018
   b5b34:	000b602c 	.word	0x000b602c

000b5b38 <_Z19__fetch_global_Wirev>:
{
   b5b38:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5b3a:	4d0e      	ldr	r5, [pc, #56]	; (b5b74 <_Z19__fetch_global_Wirev+0x3c>)
   b5b3c:	7829      	ldrb	r1, [r5, #0]
   b5b3e:	f3bf 8f5b 	dmb	ish
   b5b42:	f011 0401 	ands.w	r4, r1, #1
{
   b5b46:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5b48:	d111      	bne.n	b5b6e <_Z19__fetch_global_Wirev+0x36>
   b5b4a:	4628      	mov	r0, r5
   b5b4c:	f7fe faa7 	bl	b409e <__cxa_guard_acquire>
   b5b50:	b168      	cbz	r0, b5b6e <_Z19__fetch_global_Wirev+0x36>
   b5b52:	4668      	mov	r0, sp
   b5b54:	f7ff ffd6 	bl	b5b04 <_Z17acquireWireBufferv>
   b5b58:	466a      	mov	r2, sp
   b5b5a:	4621      	mov	r1, r4
   b5b5c:	4806      	ldr	r0, [pc, #24]	; (b5b78 <_Z19__fetch_global_Wirev+0x40>)
   b5b5e:	f7ff fb05 	bl	b516c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5b62:	4628      	mov	r0, r5
   b5b64:	f7fe faa0 	bl	b40a8 <__cxa_guard_release>
   b5b68:	4804      	ldr	r0, [pc, #16]	; (b5b7c <_Z19__fetch_global_Wirev+0x44>)
   b5b6a:	f000 f84e 	bl	b5c0a <atexit>
	return wire;
}
   b5b6e:	4802      	ldr	r0, [pc, #8]	; (b5b78 <_Z19__fetch_global_Wirev+0x40>)
   b5b70:	b007      	add	sp, #28
   b5b72:	bd30      	pop	{r4, r5, pc}
   b5b74:	2003e72c 	.word	0x2003e72c
   b5b78:	2003e730 	.word	0x2003e730
   b5b7c:	000b5b01 	.word	0x000b5b01

000b5b80 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5b80:	4770      	bx	lr
	...

000b5b84 <_Z20acquireSerial1Bufferv>:
{
   b5b84:	b538      	push	{r3, r4, r5, lr}
   b5b86:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5b88:	2514      	movs	r5, #20
   b5b8a:	462a      	mov	r2, r5
   b5b8c:	2100      	movs	r1, #0
   b5b8e:	f000 f850 	bl	b5c32 <memset>
   b5b92:	8025      	strh	r5, [r4, #0]
   b5b94:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b96:	4907      	ldr	r1, [pc, #28]	; (b5bb4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5b98:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b9a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5b9c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b9e:	f000 f82f 	bl	b5c00 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ba2:	4904      	ldr	r1, [pc, #16]	; (b5bb4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5ba4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ba6:	4628      	mov	r0, r5
   b5ba8:	f000 f82a 	bl	b5c00 <_ZnajRKSt9nothrow_t>
    };
   b5bac:	60e0      	str	r0, [r4, #12]
}
   b5bae:	4620      	mov	r0, r4
   b5bb0:	bd38      	pop	{r3, r4, r5, pc}
   b5bb2:	bf00      	nop
   b5bb4:	000b602c 	.word	0x000b602c

000b5bb8 <_Z22__fetch_global_Serial1v>:
{
   b5bb8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5bba:	4d0e      	ldr	r5, [pc, #56]	; (b5bf4 <_Z22__fetch_global_Serial1v+0x3c>)
   b5bbc:	7829      	ldrb	r1, [r5, #0]
   b5bbe:	f3bf 8f5b 	dmb	ish
   b5bc2:	f011 0401 	ands.w	r4, r1, #1
{
   b5bc6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5bc8:	d111      	bne.n	b5bee <_Z22__fetch_global_Serial1v+0x36>
   b5bca:	4628      	mov	r0, r5
   b5bcc:	f7fe fa67 	bl	b409e <__cxa_guard_acquire>
   b5bd0:	b168      	cbz	r0, b5bee <_Z22__fetch_global_Serial1v+0x36>
   b5bd2:	a801      	add	r0, sp, #4
   b5bd4:	f7ff ffd6 	bl	b5b84 <_Z20acquireSerial1Bufferv>
   b5bd8:	aa01      	add	r2, sp, #4
   b5bda:	4621      	mov	r1, r4
   b5bdc:	4806      	ldr	r0, [pc, #24]	; (b5bf8 <_Z22__fetch_global_Serial1v+0x40>)
   b5bde:	f7ff fdcb 	bl	b5778 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5be2:	4628      	mov	r0, r5
   b5be4:	f7fe fa60 	bl	b40a8 <__cxa_guard_release>
   b5be8:	4804      	ldr	r0, [pc, #16]	; (b5bfc <_Z22__fetch_global_Serial1v+0x44>)
   b5bea:	f000 f80e 	bl	b5c0a <atexit>
    return serial1;
}
   b5bee:	4802      	ldr	r0, [pc, #8]	; (b5bf8 <_Z22__fetch_global_Serial1v+0x40>)
   b5bf0:	b007      	add	sp, #28
   b5bf2:	bd30      	pop	{r4, r5, pc}
   b5bf4:	2003e744 	.word	0x2003e744
   b5bf8:	2003e748 	.word	0x2003e748
   b5bfc:	000b5b81 	.word	0x000b5b81

000b5c00 <_ZnajRKSt9nothrow_t>:
   b5c00:	f7fe ba49 	b.w	b4096 <_Znaj>

000b5c04 <_ZSt25__throw_bad_function_callv>:
   b5c04:	b508      	push	{r3, lr}
   b5c06:	f7fe ff55 	bl	b4ab4 <abort>

000b5c0a <atexit>:
   b5c0a:	2300      	movs	r3, #0
   b5c0c:	4601      	mov	r1, r0
   b5c0e:	461a      	mov	r2, r3
   b5c10:	4618      	mov	r0, r3
   b5c12:	f000 b873 	b.w	b5cfc <__register_exitproc>

000b5c16 <memcpy>:
   b5c16:	440a      	add	r2, r1
   b5c18:	4291      	cmp	r1, r2
   b5c1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5c1e:	d100      	bne.n	b5c22 <memcpy+0xc>
   b5c20:	4770      	bx	lr
   b5c22:	b510      	push	{r4, lr}
   b5c24:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5c28:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5c2c:	4291      	cmp	r1, r2
   b5c2e:	d1f9      	bne.n	b5c24 <memcpy+0xe>
   b5c30:	bd10      	pop	{r4, pc}

000b5c32 <memset>:
   b5c32:	4402      	add	r2, r0
   b5c34:	4603      	mov	r3, r0
   b5c36:	4293      	cmp	r3, r2
   b5c38:	d100      	bne.n	b5c3c <memset+0xa>
   b5c3a:	4770      	bx	lr
   b5c3c:	f803 1b01 	strb.w	r1, [r3], #1
   b5c40:	e7f9      	b.n	b5c36 <memset+0x4>
	...

000b5c44 <srand>:
   b5c44:	b538      	push	{r3, r4, r5, lr}
   b5c46:	4b10      	ldr	r3, [pc, #64]	; (b5c88 <srand+0x44>)
   b5c48:	681d      	ldr	r5, [r3, #0]
   b5c4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5c4c:	4604      	mov	r4, r0
   b5c4e:	b9b3      	cbnz	r3, b5c7e <srand+0x3a>
   b5c50:	2018      	movs	r0, #24
   b5c52:	f7fe ff17 	bl	b4a84 <malloc>
   b5c56:	4602      	mov	r2, r0
   b5c58:	63a8      	str	r0, [r5, #56]	; 0x38
   b5c5a:	b920      	cbnz	r0, b5c66 <srand+0x22>
   b5c5c:	4b0b      	ldr	r3, [pc, #44]	; (b5c8c <srand+0x48>)
   b5c5e:	480c      	ldr	r0, [pc, #48]	; (b5c90 <srand+0x4c>)
   b5c60:	2142      	movs	r1, #66	; 0x42
   b5c62:	f7fe ff37 	bl	b4ad4 <__assert_func>
   b5c66:	490b      	ldr	r1, [pc, #44]	; (b5c94 <srand+0x50>)
   b5c68:	4b0b      	ldr	r3, [pc, #44]	; (b5c98 <srand+0x54>)
   b5c6a:	e9c0 1300 	strd	r1, r3, [r0]
   b5c6e:	4b0b      	ldr	r3, [pc, #44]	; (b5c9c <srand+0x58>)
   b5c70:	6083      	str	r3, [r0, #8]
   b5c72:	230b      	movs	r3, #11
   b5c74:	8183      	strh	r3, [r0, #12]
   b5c76:	2100      	movs	r1, #0
   b5c78:	2001      	movs	r0, #1
   b5c7a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5c7e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5c80:	2200      	movs	r2, #0
   b5c82:	611c      	str	r4, [r3, #16]
   b5c84:	615a      	str	r2, [r3, #20]
   b5c86:	bd38      	pop	{r3, r4, r5, pc}
   b5c88:	2003e640 	.word	0x2003e640
   b5c8c:	000b602d 	.word	0x000b602d
   b5c90:	000b6044 	.word	0x000b6044
   b5c94:	abcd330e 	.word	0xabcd330e
   b5c98:	e66d1234 	.word	0xe66d1234
   b5c9c:	0005deec 	.word	0x0005deec

000b5ca0 <strcpy>:
   b5ca0:	4603      	mov	r3, r0
   b5ca2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b5ca6:	f803 2b01 	strb.w	r2, [r3], #1
   b5caa:	2a00      	cmp	r2, #0
   b5cac:	d1f9      	bne.n	b5ca2 <strcpy+0x2>
   b5cae:	4770      	bx	lr

000b5cb0 <strdup>:
   b5cb0:	4b02      	ldr	r3, [pc, #8]	; (b5cbc <strdup+0xc>)
   b5cb2:	4601      	mov	r1, r0
   b5cb4:	6818      	ldr	r0, [r3, #0]
   b5cb6:	f000 b803 	b.w	b5cc0 <_strdup_r>
   b5cba:	bf00      	nop
   b5cbc:	2003e640 	.word	0x2003e640

000b5cc0 <_strdup_r>:
   b5cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5cc2:	4604      	mov	r4, r0
   b5cc4:	4608      	mov	r0, r1
   b5cc6:	460d      	mov	r5, r1
   b5cc8:	f000 f80f 	bl	b5cea <strlen>
   b5ccc:	1c42      	adds	r2, r0, #1
   b5cce:	4611      	mov	r1, r2
   b5cd0:	4620      	mov	r0, r4
   b5cd2:	9201      	str	r2, [sp, #4]
   b5cd4:	f7fe fef6 	bl	b4ac4 <_malloc_r>
   b5cd8:	4604      	mov	r4, r0
   b5cda:	b118      	cbz	r0, b5ce4 <_strdup_r+0x24>
   b5cdc:	9a01      	ldr	r2, [sp, #4]
   b5cde:	4629      	mov	r1, r5
   b5ce0:	f7ff ff99 	bl	b5c16 <memcpy>
   b5ce4:	4620      	mov	r0, r4
   b5ce6:	b003      	add	sp, #12
   b5ce8:	bd30      	pop	{r4, r5, pc}

000b5cea <strlen>:
   b5cea:	4603      	mov	r3, r0
   b5cec:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5cf0:	2a00      	cmp	r2, #0
   b5cf2:	d1fb      	bne.n	b5cec <strlen+0x2>
   b5cf4:	1a18      	subs	r0, r3, r0
   b5cf6:	3801      	subs	r0, #1
   b5cf8:	4770      	bx	lr
	...

000b5cfc <__register_exitproc>:
   b5cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5d00:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5dbc <__register_exitproc+0xc0>
   b5d04:	4606      	mov	r6, r0
   b5d06:	f8d8 0000 	ldr.w	r0, [r8]
   b5d0a:	461f      	mov	r7, r3
   b5d0c:	460d      	mov	r5, r1
   b5d0e:	4691      	mov	r9, r2
   b5d10:	f000 f856 	bl	b5dc0 <__retarget_lock_acquire_recursive>
   b5d14:	4b25      	ldr	r3, [pc, #148]	; (b5dac <__register_exitproc+0xb0>)
   b5d16:	681c      	ldr	r4, [r3, #0]
   b5d18:	b934      	cbnz	r4, b5d28 <__register_exitproc+0x2c>
   b5d1a:	4c25      	ldr	r4, [pc, #148]	; (b5db0 <__register_exitproc+0xb4>)
   b5d1c:	601c      	str	r4, [r3, #0]
   b5d1e:	4b25      	ldr	r3, [pc, #148]	; (b5db4 <__register_exitproc+0xb8>)
   b5d20:	b113      	cbz	r3, b5d28 <__register_exitproc+0x2c>
   b5d22:	681b      	ldr	r3, [r3, #0]
   b5d24:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5d28:	6863      	ldr	r3, [r4, #4]
   b5d2a:	2b1f      	cmp	r3, #31
   b5d2c:	dd07      	ble.n	b5d3e <__register_exitproc+0x42>
   b5d2e:	f8d8 0000 	ldr.w	r0, [r8]
   b5d32:	f000 f847 	bl	b5dc4 <__retarget_lock_release_recursive>
   b5d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5d3e:	b34e      	cbz	r6, b5d94 <__register_exitproc+0x98>
   b5d40:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5d44:	b988      	cbnz	r0, b5d6a <__register_exitproc+0x6e>
   b5d46:	4b1c      	ldr	r3, [pc, #112]	; (b5db8 <__register_exitproc+0xbc>)
   b5d48:	b923      	cbnz	r3, b5d54 <__register_exitproc+0x58>
   b5d4a:	f8d8 0000 	ldr.w	r0, [r8]
   b5d4e:	f000 f838 	bl	b5dc2 <__retarget_lock_release>
   b5d52:	e7f0      	b.n	b5d36 <__register_exitproc+0x3a>
   b5d54:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5d58:	f7fe fe94 	bl	b4a84 <malloc>
   b5d5c:	2800      	cmp	r0, #0
   b5d5e:	d0f4      	beq.n	b5d4a <__register_exitproc+0x4e>
   b5d60:	2300      	movs	r3, #0
   b5d62:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5d66:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5d6a:	6863      	ldr	r3, [r4, #4]
   b5d6c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5d70:	2201      	movs	r2, #1
   b5d72:	409a      	lsls	r2, r3
   b5d74:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5d78:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5d7c:	4313      	orrs	r3, r2
   b5d7e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5d82:	2e02      	cmp	r6, #2
   b5d84:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5d88:	bf02      	ittt	eq
   b5d8a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5d8e:	4313      	orreq	r3, r2
   b5d90:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5d94:	6863      	ldr	r3, [r4, #4]
   b5d96:	f8d8 0000 	ldr.w	r0, [r8]
   b5d9a:	1c5a      	adds	r2, r3, #1
   b5d9c:	3302      	adds	r3, #2
   b5d9e:	6062      	str	r2, [r4, #4]
   b5da0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5da4:	f000 f80e 	bl	b5dc4 <__retarget_lock_release_recursive>
   b5da8:	2000      	movs	r0, #0
   b5daa:	e7c6      	b.n	b5d3a <__register_exitproc+0x3e>
   b5dac:	2003e7e8 	.word	0x2003e7e8
   b5db0:	2003e75c 	.word	0x2003e75c
   b5db4:	00000000 	.word	0x00000000
   b5db8:	000b4a85 	.word	0x000b4a85
   b5dbc:	2003e6a4 	.word	0x2003e6a4

000b5dc0 <__retarget_lock_acquire_recursive>:
   b5dc0:	4770      	bx	lr

000b5dc2 <__retarget_lock_release>:
   b5dc2:	4770      	bx	lr

000b5dc4 <__retarget_lock_release_recursive>:
   b5dc4:	4770      	bx	lr

000b5dc6 <link_code_end>:
	...

000b5dc8 <dynalib_user>:
   b5dc8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5dd8:	0000 0000 4753 3350 2030 6574 7473 5300     ....SGP30 test.S
   b5de8:	6e65 6f73 2072 6f6e 2074 6f66 6e75 0064     ensor not found.
   b5df8:	6f46 6e75 2064 4753 3350 2030 6573 6972     Found SGP30 seri
   b5e08:	6c61 2320 5400 4f56 2043 2000 7070 0962     al #.TVOC . ppb.
   b5e18:	6500 4f43 2032 2000 7070 006d 6152 2077     .eCO2 . ppm.Raw 
   b5e28:	654d 7361 7275 6d65 6e65 2074 6166 6c69     Measurement fail
   b5e38:	6465 5200 7761 4820 2032 2000 0009 6152     ed.Raw H2 . ..Ra
   b5e48:	2077 7445 6168 6f6e 206c 4600 6961 656c     w Ethanol .Faile
   b5e58:	2064 6f74 6720 7465 6220 7361 6c65 6e69     d to get baselin
   b5e68:	2065 6572 6461 6e69 7367 2a00 2a2a 422a     e readings.****B
   b5e78:	7361 6c65 6e69 2065 6176 756c 7365 203a     aseline values: 
   b5e88:	4365 324f 203a 7830 2000 2026 5654 434f     eCO2: 0x. & TVOC
   b5e98:	203a 7830 0000 0000                         : 0x....

000b5ea0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b5ea8:	4b69 000b 4b6f 000b 4bad 000b 4b7d 000b     iK..oK...K..}K..
   b5eb8:	4b6b 000b                                   kK..

000b5ebc <_ZTVN5spark13EthernetClassE>:
	...
   b5ec4:	50f7 000b 50ed 000b 50e3 000b 50d9 000b     .P...P...P...P..
   b5ed4:	50cd 000b 50c1 000b 535d 000b 5365 000b     .P...P..]S..eS..
   b5ee4:	50b5 000b 50ad 000b 50a3 000b 5099 000b     .P...P...P...P..
   b5ef4:	5395 000b                                   .S..

000b5ef8 <_ZTV7TwoWire>:
	...
   b5f00:	5115 000b 515f 000b 5137 000b 5117 000b     .Q.._Q..7Q...Q..
   b5f10:	513f 000b 5147 000b 514f 000b 5157 000b     ?Q..GQ..OQ..WQ..

000b5f20 <_ZTV9IPAddress>:
	...
   b5f28:	522d 000b 521d 000b 521f 000b 7061 0070     -R...R...R..app.

000b5f38 <_ZTVN5spark12NetworkClassE>:
	...
   b5f40:	531d 000b 5327 000b 5331 000b 533b 000b     .S..'S..1S..;S..
   b5f50:	5345 000b 5351 000b 535d 000b 5365 000b     ES..QS..]S..eS..
   b5f60:	536d 000b 5379 000b 5381 000b 538b 000b     mS..yS...S...S..
   b5f70:	5395 000b 5925 252d 2d6d 6425 2554 3a48     .S..%Y-%m-%dT%H:
   b5f80:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b5f90 <_ZTV11USARTSerial>:
	...
   b5f98:	56fd 000b 5769 000b 5741 000b 5481 000b     .V..iW..AW...T..
   b5fa8:	5711 000b 572d 000b 571f 000b 573b 000b     .W..-W...W..;W..
   b5fb8:	56ff 000b 5703 000b                         .V...W..

000b5fc0 <_ZTV9USBSerial>:
	...
   b5fc8:	57a7 000b 580f 000b 57e5 000b 5481 000b     .W...X...W...T..
   b5fd8:	57d7 000b 57a9 000b 57b9 000b 5809 000b     .W...W...W...X..
   b5fe8:	57c9 000b 57a1 000b                         .W...W..

000b5ff0 <_ZTVN5spark9WiFiClassE>:
	...
   b5ff8:	5913 000b 5909 000b 58ff 000b 58b5 000b     .Y...Y...X...X..
   b6008:	58f3 000b 58e7 000b 535d 000b 5365 000b     .X...X..]S..eS..
   b6018:	58db 000b 58d3 000b 58c9 000b 58bf 000b     .X...X...X...X..
   b6028:	5395 000b                                   .S..

000b602c <_ZSt7nothrow>:
   b602c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b603c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b604c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b605c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b606c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b607c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b608c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b609d <link_const_variable_data_end>:
   b609d:	00          	.byte	0x00
	...

000b60a0 <link_constructors_location>:
   b60a0:	000b43d9 	.word	0x000b43d9
   b60a4:	000b4b59 	.word	0x000b4b59
   b60a8:	000b5101 	.word	0x000b5101
   b60ac:	000b530d 	.word	0x000b530d
   b60b0:	000b546d 	.word	0x000b546d
   b60b4:	000b5541 	.word	0x000b5541
   b60b8:	000b56c5 	.word	0x000b56c5
   b60bc:	000b56e9 	.word	0x000b56e9
   b60c0:	000b591d 	.word	0x000b591d

000b60c4 <link_constructors_end>:
	...
