
/Users/friedl/Desktop/Projects/Air_Quality_Sensor/target/5.3.1/p2/Air_Quality_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fa628  085fa088  0000a628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000059cc  023fa630  085fa090  0000a630  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  6 .data         00000074  1007ad7c  085ffa5c  0001ad7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f8  1007adf0  1007adf0  0002adf0  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffad0  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000004e4  085ffad4  085ffad4  0001fad4  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fad4  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0015493d  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00016da7  00000000  00000000  0017493d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0004519c  00000000  00000000  0018b6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002f90  00000000  00000000  001d0880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000b978  00000000  00000000  001d3810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d57b  00000000  00000000  001df188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004e9a6  00000000  00000000  0020c703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cf4f0  00000000  00000000  0025b0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008a48  00000000  00000000  0032a59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	480e      	ldr	r0, [pc, #56]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa01a:	490f      	ldr	r1, [pc, #60]	; (85fa058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a0e      	ldr	r2, [pc, #56]	; (85fa05c <module_user_pre_init+0x44>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b0d      	ldr	r3, [pc, #52]	; (85fa060 <module_user_pre_init+0x48>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	480d      	ldr	r0, [pc, #52]	; (85fa064 <module_user_pre_init+0x4c>)
 85fa030:	4a0d      	ldr	r2, [pc, #52]	; (85fa068 <module_user_pre_init+0x50>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b0d      	ldr	r3, [pc, #52]	; (85fa06c <module_user_pre_init+0x54>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa03a:	480d      	ldr	r0, [pc, #52]	; (85fa070 <module_user_pre_init+0x58>)
 85fa03c:	490d      	ldr	r1, [pc, #52]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a0d      	ldr	r2, [pc, #52]	; (85fa078 <module_user_pre_init+0x60>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa048:	4b05      	ldr	r3, [pc, #20]	; (85fa060 <module_user_pre_init+0x48>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa04e:	4801      	ldr	r0, [pc, #4]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa050:	bd08      	pop	{r3, pc}
 85fa052:	bf00      	nop
 85fa054:	1007ad7c 	.word	0x1007ad7c
 85fa058:	085ffa5c 	.word	0x085ffa5c
 85fa05c:	1007adf0 	.word	0x1007adf0
 85fa060:	10110d2d 	.word	0x10110d2d
 85fa064:	1007adf0 	.word	0x1007adf0
 85fa068:	1007afe8 	.word	0x1007afe8
 85fa06c:	10110ea1 	.word	0x10110ea1
 85fa070:	023fa628 	.word	0x023fa628
 85fa074:	085fa088 	.word	0x085fa088
 85fa078:	023ffffc 	.word	0x023ffffc

085fa07c <dynalib_preinit>:
 85fa07c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fa630 <strlen>:
 23fa630:	4603      	mov	r3, r0
 23fa632:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fa636:	2a00      	cmp	r2, #0
 23fa638:	d1fb      	bne.n	23fa632 <strlen+0x2>
 23fa63a:	1a18      	subs	r0, r3, r0
 23fa63c:	3801      	subs	r0, #1
 23fa63e:	4770      	bx	lr

023fa640 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fa640:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fa642:	f003 f991 	bl	23fd968 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa646:	2500      	movs	r5, #0
 23fa648:	4e05      	ldr	r6, [pc, #20]	; (23fa660 <module_user_init+0x20>)
 23fa64a:	4c06      	ldr	r4, [pc, #24]	; (23fa664 <module_user_init+0x24>)
 23fa64c:	1ba4      	subs	r4, r4, r6
 23fa64e:	08a4      	lsrs	r4, r4, #2
 23fa650:	42ac      	cmp	r4, r5
 23fa652:	d100      	bne.n	23fa656 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fa654:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fa656:	f856 3b04 	ldr.w	r3, [r6], #4
 23fa65a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa65c:	3501      	adds	r5, #1
 23fa65e:	e7f7      	b.n	23fa650 <module_user_init+0x10>
 23fa660:	023fffd8 	.word	0x023fffd8
 23fa664:	023ffffc 	.word	0x023ffffc

023fa668 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fa668:	f000 b902 	b.w	23fa870 <setup>

023fa66c <module_user_loop>:
}

void module_user_loop() {
 23fa66c:	b508      	push	{r3, lr}
    loop();
 23fa66e:	f000 fae7 	bl	23fac40 <loop>
    _post_loop();
}
 23fa672:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fa676:	f003 b92f 	b.w	23fd8d8 <_post_loop>

023fa67a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fa67a:	f002 b993 	b.w	23fc9a4 <malloc>

023fa67e <_Znaj>:
 23fa67e:	f002 b991 	b.w	23fc9a4 <malloc>

023fa682 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fa682:	f002 b99d 	b.w	23fc9c0 <free>
	...

023fa688 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa688:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fa68a:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa68c:	4a02      	ldr	r2, [pc, #8]	; (23fa698 <__cxa_pure_virtual+0x10>)
 23fa68e:	4903      	ldr	r1, [pc, #12]	; (23fa69c <__cxa_pure_virtual+0x14>)
 23fa690:	f002 f854 	bl	23fc73c <panic_>
  while (1);
 23fa694:	e7fe      	b.n	23fa694 <__cxa_pure_virtual+0xc>
 23fa696:	bf00      	nop
 23fa698:	023fc1e1 	.word	0x023fc1e1
 23fa69c:	023fded8 	.word	0x023fded8

023fa6a0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fa6a0:	7800      	ldrb	r0, [r0, #0]
 23fa6a2:	fab0 f080 	clz	r0, r0
 23fa6a6:	0940      	lsrs	r0, r0, #5
 23fa6a8:	4770      	bx	lr

023fa6aa <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fa6aa:	2301      	movs	r3, #1
 23fa6ac:	7003      	strb	r3, [r0, #0]
 23fa6ae:	4770      	bx	lr

023fa6b0 <_Z11draw_screenv>:
  }

  draw_screen();                                                                         // calls draw_screen() function
}

void draw_screen() {
 23fa6b0:	b510      	push	{r4, lr}
  
  tft.setFont(&FreeSansBold12pt7b);                                                      // set font
 23fa6b2:	4c0f      	ldr	r4, [pc, #60]	; (23fa6f0 <_Z11draw_screenv+0x40>)
 23fa6b4:	490f      	ldr	r1, [pc, #60]	; (23fa6f4 <_Z11draw_screenv+0x44>)
 23fa6b6:	4620      	mov	r0, r4
 23fa6b8:	f000 fe79 	bl	23fb3ae <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fa6bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fa6c0:	6163      	str	r3, [r4, #20]
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(boolean w) { wrap = w; }
 23fa6c2:	2300      	movs	r3, #0
  tft.setTextColor(ST77XX_WHITE);                                                        // set font colour
  tft.setTextWrap(false); 
  tft.setTextSize(3);                                                                    // set font size
 23fa6c4:	4620      	mov	r0, r4
 23fa6c6:	2103      	movs	r1, #3
 23fa6c8:	76e3      	strb	r3, [r4, #27]
 23fa6ca:	f000 fe6a 	bl	23fb3a2 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fa6ce:	4b0a      	ldr	r3, [pc, #40]	; (23fa6f8 <_Z11draw_screenv+0x48>)
  
  tft.setCursor(45, 70);                                                                 // set sursor to start writing text
  tft.print("CO2");
 23fa6d0:	4620      	mov	r0, r4
 23fa6d2:	490a      	ldr	r1, [pc, #40]	; (23fa6fc <_Z11draw_screenv+0x4c>)
 23fa6d4:	6123      	str	r3, [r4, #16]
 23fa6d6:	f002 fea5 	bl	23fd424 <_ZN5Print5printEPKc>
 23fa6da:	4b09      	ldr	r3, [pc, #36]	; (23fa700 <_Z11draw_screenv+0x50>)
  
  tft.setCursor(15, 235);
  tft.print("TVOC");
 23fa6dc:	4620      	mov	r0, r4
 23fa6de:	4909      	ldr	r1, [pc, #36]	; (23fa704 <_Z11draw_screenv+0x54>)
 23fa6e0:	6123      	str	r3, [r4, #16]
 23fa6e2:	f002 fe9f 	bl	23fd424 <_ZN5Print5printEPKc>
  
  delay(50);

}
 23fa6e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(50);
 23fa6ea:	2032      	movs	r0, #50	; 0x32
 23fa6ec:	f002 b9ae 	b.w	23fca4c <delay>
 23fa6f0:	1007ae20 	.word	0x1007ae20
 23fa6f4:	023fdf68 	.word	0x023fdf68
 23fa6f8:	0046002d 	.word	0x0046002d
 23fa6fc:	023fdeed 	.word	0x023fdeed
 23fa700:	00eb000f 	.word	0x00eb000f
 23fa704:	023fdef1 	.word	0x023fdef1

023fa708 <_Z12print_valuesv>:

void print_values() {
 23fa708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 
  tft.fillRect(0,95,120,60,ST77XX_WHITE);                                               // draws background fills for readings
 23fa70a:	253c      	movs	r5, #60	; 0x3c
 23fa70c:	f64f 77ff 	movw	r7, #65535	; 0xffff
  tft.fillRect(121,95,120,60,ST77XX_BLUE);                                               
 23fa710:	261f      	movs	r6, #31
  tft.fillRect(0,95,120,60,ST77XX_WHITE);                                               // draws background fills for readings
 23fa712:	4c3d      	ldr	r4, [pc, #244]	; (23fa808 <_Z12print_valuesv+0x100>)
 23fa714:	e9cd 5700 	strd	r5, r7, [sp]
 23fa718:	4620      	mov	r0, r4
 23fa71a:	2378      	movs	r3, #120	; 0x78
 23fa71c:	225f      	movs	r2, #95	; 0x5f
 23fa71e:	2100      	movs	r1, #0
 23fa720:	f001 f83b 	bl	23fb79a <_ZN15Adafruit_SPITFT8fillRectEsssst>
  tft.fillRect(121,95,120,60,ST77XX_BLUE);                                               
 23fa724:	4620      	mov	r0, r4
 23fa726:	e9cd 5600 	strd	r5, r6, [sp]
 23fa72a:	2378      	movs	r3, #120	; 0x78
 23fa72c:	225f      	movs	r2, #95	; 0x5f
 23fa72e:	2179      	movs	r1, #121	; 0x79
 23fa730:	f001 f833 	bl	23fb79a <_ZN15Adafruit_SPITFT8fillRectEsssst>
    
  tft.fillRect(0,260,120,60,ST77XX_WHITE);
 23fa734:	4620      	mov	r0, r4
 23fa736:	e9cd 5700 	strd	r5, r7, [sp]
 23fa73a:	2378      	movs	r3, #120	; 0x78
 23fa73c:	f44f 7282 	mov.w	r2, #260	; 0x104
 23fa740:	2100      	movs	r1, #0
 23fa742:	f001 f82a 	bl	23fb79a <_ZN15Adafruit_SPITFT8fillRectEsssst>
  tft.fillRect(121,260,120,60,ST77XX_BLUE);
 23fa746:	4620      	mov	r0, r4
 23fa748:	e9cd 5600 	strd	r5, r6, [sp]
 23fa74c:	2378      	movs	r3, #120	; 0x78
 23fa74e:	f44f 7282 	mov.w	r2, #260	; 0x104
 23fa752:	2179      	movs	r1, #121	; 0x79
 23fa754:	f001 f821 	bl	23fb79a <_ZN15Adafruit_SPITFT8fillRectEsssst>
  void setTextWrap(boolean w) { wrap = w; }
 23fa758:	2300      	movs	r3, #0
 23fa75a:	76e3      	strb	r3, [r4, #27]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fa75c:	f04f 131f 	mov.w	r3, #2031647	; 0x1f001f
 23fa760:	4a2a      	ldr	r2, [pc, #168]	; (23fa80c <_Z12print_valuesv+0x104>)
  tft.setTextWrap(false);
  tft.setCursor(25, 120);
  tft.setTextColor(ST77XX_BLUE);
  tft.setFont(&FreeSansOblique12pt7b);
  tft.setTextSize(1);
  tft.println(sgp.eCO2);
 23fa762:	4d2b      	ldr	r5, [pc, #172]	; (23fa810 <_Z12print_valuesv+0x108>)
  tft.setFont(&FreeSansOblique12pt7b);
 23fa764:	4620      	mov	r0, r4
 23fa766:	492b      	ldr	r1, [pc, #172]	; (23fa814 <_Z12print_valuesv+0x10c>)
 23fa768:	e9c4 2304 	strd	r2, r3, [r4, #16]
 23fa76c:	f000 fe1f 	bl	23fb3ae <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.setTextSize(1);
 23fa770:	4620      	mov	r0, r4
 23fa772:	2101      	movs	r1, #1
 23fa774:	f000 fe15 	bl	23fb3a2 <_ZN12Adafruit_GFX11setTextSizeEh>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fa778:	220a      	movs	r2, #10
 23fa77a:	8869      	ldrh	r1, [r5, #2]
 23fa77c:	4620      	mov	r0, r4
 23fa77e:	f002 fe6e 	bl	23fd45e <_ZN5Print11printNumberEmh>
        n += println();
 23fa782:	4620      	mov	r0, r4
 23fa784:	f002 fe55 	bl	23fd432 <_ZN5Print7printlnEv>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fa788:	4b23      	ldr	r3, [pc, #140]	; (23fa818 <_Z12print_valuesv+0x110>)
  tft.setCursor(25, 145);
  tft.println("ppm");
 23fa78a:	4620      	mov	r0, r4
 23fa78c:	4923      	ldr	r1, [pc, #140]	; (23fa81c <_Z12print_valuesv+0x114>)
 23fa78e:	6123      	str	r3, [r4, #16]
 23fa790:	f002 fe5b 	bl	23fd44a <_ZN5Print7printlnEPKc>
 23fa794:	4b22      	ldr	r3, [pc, #136]	; (23fa820 <_Z12print_valuesv+0x118>)
        return printNumber(val, base) + t;
 23fa796:	220a      	movs	r2, #10
 23fa798:	8829      	ldrh	r1, [r5, #0]
 23fa79a:	4620      	mov	r0, r4
 23fa79c:	6123      	str	r3, [r4, #16]
 23fa79e:	f002 fe5e 	bl	23fd45e <_ZN5Print11printNumberEmh>
        n += println();
 23fa7a2:	4620      	mov	r0, r4
 23fa7a4:	f002 fe45 	bl	23fd432 <_ZN5Print7printlnEv>
 23fa7a8:	4b1e      	ldr	r3, [pc, #120]	; (23fa824 <_Z12print_valuesv+0x11c>)
  //Serial.print("G_eCO2 "); Serial.print(sgp.eCO2); Serial.print(" ppm");              // DEBUG
  
  tft.setCursor(25, 285);
  tft.println(sgp.TVOC); 
  tft.setCursor(25, 310);
  tft.println("ppb\\t");
 23fa7aa:	4620      	mov	r0, r4
 23fa7ac:	491e      	ldr	r1, [pc, #120]	; (23fa828 <_Z12print_valuesv+0x120>)
 23fa7ae:	6123      	str	r3, [r4, #16]
 23fa7b0:	f002 fe4b 	bl	23fd44a <_ZN5Print7printlnEPKc>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fa7b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fa7b8:	491c      	ldr	r1, [pc, #112]	; (23fa82c <_Z12print_valuesv+0x124>)
        return printNumber(val, base) + t;
 23fa7ba:	220a      	movs	r2, #10
 23fa7bc:	e9c4 1304 	strd	r1, r3, [r4, #16]
 23fa7c0:	4620      	mov	r0, r4
 23fa7c2:	88a9      	ldrh	r1, [r5, #4]
 23fa7c4:	f002 fe4b 	bl	23fd45e <_ZN5Print11printNumberEmh>
        n += println();
 23fa7c8:	4620      	mov	r0, r4
 23fa7ca:	f002 fe32 	bl	23fd432 <_ZN5Print7printlnEv>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fa7ce:	4b18      	ldr	r3, [pc, #96]	; (23fa830 <_Z12print_valuesv+0x128>)

  tft.setCursor(150, 120);
  tft.setTextColor(ST77XX_WHITE);
  tft.println(sgp.rawH2);
  tft.setCursor(150, 145); 
  tft.println("H2 \\t");
 23fa7d0:	4620      	mov	r0, r4
 23fa7d2:	4918      	ldr	r1, [pc, #96]	; (23fa834 <_Z12print_valuesv+0x12c>)
 23fa7d4:	6123      	str	r3, [r4, #16]
 23fa7d6:	f002 fe38 	bl	23fd44a <_ZN5Print7printlnEPKc>
 23fa7da:	4b17      	ldr	r3, [pc, #92]	; (23fa838 <_Z12print_valuesv+0x130>)
        return printNumber(val, base) + t;
 23fa7dc:	220a      	movs	r2, #10
 23fa7de:	88e9      	ldrh	r1, [r5, #6]
 23fa7e0:	4620      	mov	r0, r4
 23fa7e2:	6123      	str	r3, [r4, #16]
 23fa7e4:	f002 fe3b 	bl	23fd45e <_ZN5Print11printNumberEmh>
        n += println();
 23fa7e8:	4620      	mov	r0, r4
 23fa7ea:	f002 fe22 	bl	23fd432 <_ZN5Print7printlnEv>
 23fa7ee:	4b13      	ldr	r3, [pc, #76]	; (23fa83c <_Z12print_valuesv+0x134>)

  tft.setCursor(150, 285);
  tft.println(sgp.rawEthanol); 
  tft.setCursor(145, 310);
  tft.print("Ethanol"); 
 23fa7f0:	4620      	mov	r0, r4
 23fa7f2:	4913      	ldr	r1, [pc, #76]	; (23fa840 <_Z12print_valuesv+0x138>)
 23fa7f4:	6123      	str	r3, [r4, #16]
 23fa7f6:	f002 fe15 	bl	23fd424 <_ZN5Print5printEPKc>

  delay(50);
 23fa7fa:	2032      	movs	r0, #50	; 0x32

}
 23fa7fc:	b003      	add	sp, #12
 23fa7fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  delay(50);
 23fa802:	f002 b923 	b.w	23fca4c <delay>
 23fa806:	bf00      	nop
 23fa808:	1007ae20 	.word	0x1007ae20
 23fa80c:	00780019 	.word	0x00780019
 23fa810:	1007ae0c 	.word	0x1007ae0c
 23fa814:	023fdf74 	.word	0x023fdf74
 23fa818:	00910019 	.word	0x00910019
 23fa81c:	023fdf44 	.word	0x023fdf44
 23fa820:	011d0019 	.word	0x011d0019
 23fa824:	01360019 	.word	0x01360019
 23fa828:	023fdef6 	.word	0x023fdef6
 23fa82c:	00780096 	.word	0x00780096
 23fa830:	00910096 	.word	0x00910096
 23fa834:	023fdefc 	.word	0x023fdefc
 23fa838:	011d0096 	.word	0x011d0096
 23fa83c:	01360091 	.word	0x01360091
 23fa840:	023fdf02 	.word	0x023fdf02

023fa844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fa844:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fa846:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fa848:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fa84a:	b17c      	cbz	r4, 23fa86c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fa84c:	6863      	ldr	r3, [r4, #4]
 23fa84e:	3b01      	subs	r3, #1
 23fa850:	6063      	str	r3, [r4, #4]
 23fa852:	b95b      	cbnz	r3, 23fa86c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fa854:	6823      	ldr	r3, [r4, #0]
 23fa856:	4620      	mov	r0, r4
 23fa858:	689b      	ldr	r3, [r3, #8]
 23fa85a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fa85c:	68a3      	ldr	r3, [r4, #8]
 23fa85e:	3b01      	subs	r3, #1
 23fa860:	60a3      	str	r3, [r4, #8]
 23fa862:	b91b      	cbnz	r3, 23fa86c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fa864:	6823      	ldr	r3, [r4, #0]
 23fa866:	4620      	mov	r0, r4
 23fa868:	68db      	ldr	r3, [r3, #12]
 23fa86a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fa86c:	4628      	mov	r0, r5
 23fa86e:	bd38      	pop	{r3, r4, r5, pc}

023fa870 <setup>:
void setup() {
 23fa870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  pinMode(FAN, OUTPUT);                                                                // sets the pin as output
 23fa872:	4c22      	ldr	r4, [pc, #136]	; (23fa8fc <setup+0x8c>)
  Serial.begin(115200);                                                                // Start serial
 23fa874:	f002 ffa0 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fa878:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23fa87c:	f002 ff8a 	bl	23fd794 <_ZN9USBSerial5beginEl>
  pinMode(FAN, OUTPUT);                                                                // sets the pin as output
 23fa880:	2101      	movs	r1, #1
 23fa882:	8820      	ldrh	r0, [r4, #0]
 23fa884:	f003 f8e0 	bl	23fda48 <pinMode>
  analogWriteResolution(FAN, 12);                                                      // sets analogWrite resolution to 12 bits
 23fa888:	210c      	movs	r1, #12
 23fa88a:	8820      	ldrh	r0, [r4, #0]
 23fa88c:	f003 f922 	bl	23fdad4 <_Z21analogWriteResolutionth>
  analogWrite(FAN, 3000, 1000);                                                        // 3000/4095 = ~73% duty cycle at 1kHz               
 23fa890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23fa894:	f640 31b8 	movw	r1, #3000	; 0xbb8
 23fa898:	8820      	ldrh	r0, [r4, #0]
 23fa89a:	f003 f8ff 	bl	23fda9c <_Z11analogWritetmm>
  tft.init(240, 320);                                                                  // Init ST7789 320x240 
 23fa89e:	21f0      	movs	r1, #240	; 0xf0
 23fa8a0:	4817      	ldr	r0, [pc, #92]	; (23fa900 <setup+0x90>)
 23fa8a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 23fa8a6:	f001 f9f5 	bl	23fbc94 <_ZN15Adafruit_ST77894initEtt>
  tft.fillScreen(ST77XX_BLACK);                                                        // creates black background in dsiplay
 23fa8aa:	2100      	movs	r1, #0
 23fa8ac:	4814      	ldr	r0, [pc, #80]	; (23fa900 <setup+0x90>)
 23fa8ae:	f000 fad5 	bl	23fae5c <_ZN12Adafruit_GFX10fillScreenEt>
  while (!Serial) { delay(10); }                                                       // Wait for serial console to open!
 23fa8b2:	f002 ff81 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fa8b6:	f002 ff74 	bl	23fd7a2 <_ZN9USBSerialcvbEv>
 23fa8ba:	b918      	cbnz	r0, 23fa8c4 <setup+0x54>
 23fa8bc:	200a      	movs	r0, #10
 23fa8be:	f002 f8c5 	bl	23fca4c <delay>
 23fa8c2:	e7f6      	b.n	23fa8b2 <setup+0x42>
  if (! sgp.begin()){                                                                  // initialise SGP30 sensor
 23fa8c4:	f003 f948 	bl	23fdb58 <_Z19__fetch_global_Wirev>
 23fa8c8:	2201      	movs	r2, #1
 23fa8ca:	4601      	mov	r1, r0
 23fa8cc:	480d      	ldr	r0, [pc, #52]	; (23fa904 <setup+0x94>)
 23fa8ce:	f001 fbe8 	bl	23fc0a2 <_ZN14Adafruit_SGP305beginEP7TwoWireb>
 23fa8d2:	4602      	mov	r2, r0
 23fa8d4:	b960      	cbnz	r0, 23fa8f0 <setup+0x80>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23fa8d6:	4b0c      	ldr	r3, [pc, #48]	; (23fa908 <setup+0x98>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23fa8d8:	a802      	add	r0, sp, #8
 23fa8da:	781b      	ldrb	r3, [r3, #0]
 23fa8dc:	490b      	ldr	r1, [pc, #44]	; (23fa90c <setup+0x9c>)
 23fa8de:	f88d 3000 	strb.w	r3, [sp]
 23fa8e2:	233c      	movs	r3, #60	; 0x3c
 23fa8e4:	f002 fa18 	bl	23fcd18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23fa8e8:	a803      	add	r0, sp, #12
 23fa8ea:	f7ff ffab 	bl	23fa844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    while (1);
 23fa8ee:	e7fe      	b.n	23fa8ee <setup+0x7e>
  delay(50);
 23fa8f0:	2032      	movs	r0, #50	; 0x32
}
 23fa8f2:	b004      	add	sp, #16
 23fa8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(50);
 23fa8f8:	f002 b8a8 	b.w	23fca4c <delay>
 23fa8fc:	1007ad80 	.word	0x1007ad80
 23fa900:	1007ae20 	.word	0x1007ae20
 23fa904:	1007ae0c 	.word	0x1007ae0c
 23fa908:	1007adf0 	.word	0x1007adf0
 23fa90c:	023fdf0a 	.word	0x023fdf0a

023fa910 <_Z7measurev>:
void measure() {
 23fa910:	b570      	push	{r4, r5, r6, lr}
  if (! sgp.IAQmeasure()) {
 23fa912:	4dbf      	ldr	r5, [pc, #764]	; (23fac10 <_Z7measurev+0x300>)
void measure() {
 23fa914:	b086      	sub	sp, #24
  if (! sgp.IAQmeasure()) {
 23fa916:	4628      	mov	r0, r5
 23fa918:	f001 fc11 	bl	23fc13e <_ZN14Adafruit_SGP3010IAQmeasureEv>
 23fa91c:	b938      	cbnz	r0, 23fa92e <_Z7measurev+0x1e>
    Serial.println("Measurement failed");                                             // cofirm wiring if this fails
 23fa91e:	f002 ff4b 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fa922:	49bc      	ldr	r1, [pc, #752]	; (23fac14 <_Z7measurev+0x304>)
}
 23fa924:	b006      	add	sp, #24
 23fa926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("Measurement failed");                                             // cofirm wiring if this fails
 23fa92a:	f002 bd8e 	b.w	23fd44a <_ZN5Print7printlnEPKc>
  if ((sgp.TVOC >= 0) && (sgp.TVOC <= 220) && (tvoc_state[0] == 0)) {                  // TVOC measurement brackets to define warning indicator colour.
 23fa92e:	882b      	ldrh	r3, [r5, #0]
 23fa930:	4cb9      	ldr	r4, [pc, #740]	; (23fac18 <_Z7measurev+0x308>)
 23fa932:	2bdc      	cmp	r3, #220	; 0xdc
 23fa934:	d858      	bhi.n	23fa9e8 <_Z7measurev+0xd8>
 23fa936:	6826      	ldr	r6, [r4, #0]
 23fa938:	bb0e      	cbnz	r6, 23fa97e <_Z7measurev+0x6e>
    Serial.print("G_TVOC "); Serial.print(sgp.TVOC); Serial.print(" ppb\t");           // DEBUG
 23fa93a:	f002 ff3d 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fa93e:	49b7      	ldr	r1, [pc, #732]	; (23fac1c <_Z7measurev+0x30c>)
 23fa940:	f002 fd70 	bl	23fd424 <_ZN5Print5printEPKc>
 23fa944:	f002 ff38 	bl	23fd7b8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 23fa948:	220a      	movs	r2, #10
 23fa94a:	8829      	ldrh	r1, [r5, #0]
 23fa94c:	f002 fd87 	bl	23fd45e <_ZN5Print11printNumberEmh>
 23fa950:	f002 ff32 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fa954:	49b2      	ldr	r1, [pc, #712]	; (23fac20 <_Z7measurev+0x310>)
 23fa956:	f002 fd65 	bl	23fd424 <_ZN5Print5printEPKc>
    tft.fillRect(0,165,240,95,ST77XX_GREEN);
 23fa95a:	235f      	movs	r3, #95	; 0x5f
 23fa95c:	f44f 6cfc 	mov.w	ip, #2016	; 0x7e0
 23fa960:	22a5      	movs	r2, #165	; 0xa5
 23fa962:	e9cd 3c00 	strd	r3, ip, [sp]
 23fa966:	4631      	mov	r1, r6
 23fa968:	23f0      	movs	r3, #240	; 0xf0
 23fa96a:	48ae      	ldr	r0, [pc, #696]	; (23fac24 <_Z7measurev+0x314>)
 23fa96c:	f000 ff15 	bl	23fb79a <_ZN15Adafruit_SPITFT8fillRectEsssst>
    tvoc_state[0] = 1;                                                                  // Array is contructed to prevent code from writing the images consitently if there has been no change
 23fa970:	2301      	movs	r3, #1
    tvoc_state[3] = 0;
 23fa972:	e9c4 6602 	strd	r6, r6, [r4, #8]
    tvoc_state[1] = 0;                                                                  // This applies to the entire IF stament for both TVOC and CO2   
 23fa976:	e9c4 3600 	strd	r3, r6, [r4]
    print_values();
 23fa97a:	f7ff fec5 	bl	23fa708 <_Z12print_valuesv>
if ((sgp.eCO2 >= 0) && (sgp.eCO2 <= 1000) && (co2_state[0] == 0)) {
 23fa97e:	886b      	ldrh	r3, [r5, #2]
 23fa980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 23fa984:	f200 80a9 	bhi.w	23faada <_Z7measurev+0x1ca>
 23fa988:	4ea7      	ldr	r6, [pc, #668]	; (23fac28 <_Z7measurev+0x318>)
 23fa98a:	6834      	ldr	r4, [r6, #0]
 23fa98c:	b9fc      	cbnz	r4, 23fa9ce <_Z7measurev+0xbe>
  Serial.print("G_CO2 "); Serial.print(sgp.eCO2); Serial.print(" ppm");                // DEBUG
 23fa98e:	f002 ff13 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fa992:	49a6      	ldr	r1, [pc, #664]	; (23fac2c <_Z7measurev+0x31c>)
 23fa994:	f002 fd46 	bl	23fd424 <_ZN5Print5printEPKc>
 23fa998:	f002 ff0e 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fa99c:	220a      	movs	r2, #10
 23fa99e:	8869      	ldrh	r1, [r5, #2]
 23fa9a0:	f002 fd5d 	bl	23fd45e <_ZN5Print11printNumberEmh>
 23fa9a4:	f002 ff08 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fa9a8:	49a1      	ldr	r1, [pc, #644]	; (23fac30 <_Z7measurev+0x320>)
 23fa9aa:	f002 fd3b 	bl	23fd424 <_ZN5Print5printEPKc>
  tft.fillRect(0,0,240,95,ST77XX_GREEN);
 23fa9ae:	235f      	movs	r3, #95	; 0x5f
 23fa9b0:	f44f 6cfc 	mov.w	ip, #2016	; 0x7e0
 23fa9b4:	4622      	mov	r2, r4
 23fa9b6:	e9cd 3c00 	strd	r3, ip, [sp]
 23fa9ba:	4621      	mov	r1, r4
 23fa9bc:	23f0      	movs	r3, #240	; 0xf0
 23fa9be:	4899      	ldr	r0, [pc, #612]	; (23fac24 <_Z7measurev+0x314>)
 23fa9c0:	f000 feeb 	bl	23fb79a <_ZN15Adafruit_SPITFT8fillRectEsssst>
  co2_state[0] = 1;
 23fa9c4:	2301      	movs	r3, #1
  co2_state[1] = 0;
 23fa9c6:	e9c6 3400 	strd	r3, r4, [r6]
          co2_state[2] = 0;
 23fa9ca:	60b4      	str	r4, [r6, #8]
          co2_state[3] = 0;
 23fa9cc:	60f4      	str	r4, [r6, #12]
  counter++;                                
 23fa9ce:	4b99      	ldr	r3, [pc, #612]	; (23fac34 <_Z7measurev+0x324>)
 23fa9d0:	681a      	ldr	r2, [r3, #0]
  if (counter == 30) {
 23fa9d2:	2a1d      	cmp	r2, #29
  counter++;                                
 23fa9d4:	f102 0101 	add.w	r1, r2, #1
  if (counter == 30) {
 23fa9d8:	f000 80ff 	beq.w	23fabda <_Z7measurev+0x2ca>
  counter++;                                
 23fa9dc:	6019      	str	r1, [r3, #0]
}
 23fa9de:	b006      	add	sp, #24
 23fa9e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  draw_screen();                                                                         // calls draw_screen() function
 23fa9e4:	f7ff be64 	b.w	23fa6b0 <_Z11draw_screenv>
  } else if ((sgp.TVOC >= 221) && (sgp.TVOC <= 660) && (tvoc_state[1] == 0)) {
 23fa9e8:	f1a3 02dd 	sub.w	r2, r3, #221	; 0xdd
 23fa9ec:	f5b2 7fdc 	cmp.w	r2, #440	; 0x1b8
 23fa9f0:	d223      	bcs.n	23faa3a <_Z7measurev+0x12a>
 23fa9f2:	6866      	ldr	r6, [r4, #4]
 23fa9f4:	2e00      	cmp	r6, #0
 23fa9f6:	d1c2      	bne.n	23fa97e <_Z7measurev+0x6e>
          Serial.print("G_TVOC "); Serial.print(sgp.TVOC); Serial.print(" ppb\t");     // DEBUG
 23fa9f8:	f002 fede 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fa9fc:	4987      	ldr	r1, [pc, #540]	; (23fac1c <_Z7measurev+0x30c>)
 23fa9fe:	f002 fd11 	bl	23fd424 <_ZN5Print5printEPKc>
 23faa02:	f002 fed9 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23faa06:	220a      	movs	r2, #10
 23faa08:	8829      	ldrh	r1, [r5, #0]
 23faa0a:	f002 fd28 	bl	23fd45e <_ZN5Print11printNumberEmh>
 23faa0e:	f002 fed3 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23faa12:	4983      	ldr	r1, [pc, #524]	; (23fac20 <_Z7measurev+0x310>)
 23faa14:	f002 fd06 	bl	23fd424 <_ZN5Print5printEPKc>
          tft.fillRect(0,165,240,95,ST77XX_YELLOW);
 23faa18:	235f      	movs	r3, #95	; 0x5f
 23faa1a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 23faa1e:	22a5      	movs	r2, #165	; 0xa5
 23faa20:	e9cd 3000 	strd	r3, r0, [sp]
 23faa24:	4631      	mov	r1, r6
 23faa26:	23f0      	movs	r3, #240	; 0xf0
 23faa28:	487e      	ldr	r0, [pc, #504]	; (23fac24 <_Z7measurev+0x314>)
 23faa2a:	f000 feb6 	bl	23fb79a <_ZN15Adafruit_SPITFT8fillRectEsssst>
          tvoc_state[1] = 1;
 23faa2e:	2301      	movs	r3, #1
          tvoc_state[2] = 0;
 23faa30:	e9c4 3601 	strd	r3, r6, [r4, #4]
          tvoc_state[0] = 0;
 23faa34:	6026      	str	r6, [r4, #0]
          tvoc_state[3] = 0;
 23faa36:	60e6      	str	r6, [r4, #12]
 23faa38:	e7a1      	b.n	23fa97e <_Z7measurev+0x6e>
  } else if ((sgp.TVOC >= 661) && (sgp.TVOC <= 1430) && (tvoc_state[2] == 0)) {
 23faa3a:	f46f 7125 	mvn.w	r1, #660	; 0x294
 23faa3e:	f240 3201 	movw	r2, #769	; 0x301
 23faa42:	440b      	add	r3, r1
 23faa44:	b29b      	uxth	r3, r3
 23faa46:	4293      	cmp	r3, r2
 23faa48:	d822      	bhi.n	23faa90 <_Z7measurev+0x180>
 23faa4a:	68a6      	ldr	r6, [r4, #8]
 23faa4c:	2e00      	cmp	r6, #0
 23faa4e:	d196      	bne.n	23fa97e <_Z7measurev+0x6e>
          Serial.print("G_TVOC "); Serial.print(sgp.TVOC); Serial.print(" ppb\t");    // DEBUG
 23faa50:	f002 feb2 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23faa54:	4971      	ldr	r1, [pc, #452]	; (23fac1c <_Z7measurev+0x30c>)
 23faa56:	f002 fce5 	bl	23fd424 <_ZN5Print5printEPKc>
 23faa5a:	f002 fead 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23faa5e:	220a      	movs	r2, #10
 23faa60:	8829      	ldrh	r1, [r5, #0]
 23faa62:	f002 fcfc 	bl	23fd45e <_ZN5Print11printNumberEmh>
 23faa66:	f002 fea7 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23faa6a:	496d      	ldr	r1, [pc, #436]	; (23fac20 <_Z7measurev+0x310>)
 23faa6c:	f002 fcda 	bl	23fd424 <_ZN5Print5printEPKc>
          tft.fillRect(0,165,240,95,ST77XX_ORANGE);
 23faa70:	235f      	movs	r3, #95	; 0x5f
 23faa72:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 23faa76:	4631      	mov	r1, r6
 23faa78:	e9cd 3200 	strd	r3, r2, [sp]
 23faa7c:	4869      	ldr	r0, [pc, #420]	; (23fac24 <_Z7measurev+0x314>)
 23faa7e:	23f0      	movs	r3, #240	; 0xf0
 23faa80:	22a5      	movs	r2, #165	; 0xa5
 23faa82:	f000 fe8a 	bl	23fb79a <_ZN15Adafruit_SPITFT8fillRectEsssst>
          tvoc_state[2] = 1;
 23faa86:	2301      	movs	r3, #1
          tvoc_state[1] = 0;
 23faa88:	e9c4 6600 	strd	r6, r6, [r4]
          tvoc_state[2] = 1;
 23faa8c:	60a3      	str	r3, [r4, #8]
 23faa8e:	e7d2      	b.n	23faa36 <_Z7measurev+0x126>
  } else if ((sgp.TVOC >= 1431) && (tvoc_state[3] == 0)) {
 23faa90:	68e6      	ldr	r6, [r4, #12]
 23faa92:	2e00      	cmp	r6, #0
 23faa94:	f47f af73 	bne.w	23fa97e <_Z7measurev+0x6e>
          Serial.print("G_TVOC "); Serial.print(sgp.TVOC); Serial.print(" ppb\t");     // DEBUG
 23faa98:	f002 fe8e 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23faa9c:	495f      	ldr	r1, [pc, #380]	; (23fac1c <_Z7measurev+0x30c>)
 23faa9e:	f002 fcc1 	bl	23fd424 <_ZN5Print5printEPKc>
 23faaa2:	f002 fe89 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23faaa6:	220a      	movs	r2, #10
 23faaa8:	8829      	ldrh	r1, [r5, #0]
 23faaaa:	f002 fcd8 	bl	23fd45e <_ZN5Print11printNumberEmh>
 23faaae:	f002 fe83 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23faab2:	495b      	ldr	r1, [pc, #364]	; (23fac20 <_Z7measurev+0x310>)
 23faab4:	f002 fcb6 	bl	23fd424 <_ZN5Print5printEPKc>
          tft.fillRect(0,165,240,95,ST77XX_RED);
 23faab8:	235f      	movs	r3, #95	; 0x5f
 23faaba:	f44f 4e78 	mov.w	lr, #63488	; 0xf800
 23faabe:	22a5      	movs	r2, #165	; 0xa5
 23faac0:	e9cd 3e00 	strd	r3, lr, [sp]
 23faac4:	4631      	mov	r1, r6
 23faac6:	23f0      	movs	r3, #240	; 0xf0
 23faac8:	4856      	ldr	r0, [pc, #344]	; (23fac24 <_Z7measurev+0x314>)
 23faaca:	f000 fe66 	bl	23fb79a <_ZN15Adafruit_SPITFT8fillRectEsssst>
          tvoc_state[3] = 1;
 23faace:	2301      	movs	r3, #1
          tvoc_state[1] = 0;
 23faad0:	e9c4 6600 	strd	r6, r6, [r4]
          tvoc_state[2] = 0;
 23faad4:	60a6      	str	r6, [r4, #8]
          tvoc_state[3] = 1;
 23faad6:	60e3      	str	r3, [r4, #12]
 23faad8:	e751      	b.n	23fa97e <_Z7measurev+0x6e>
  } else if ((sgp.eCO2 >= 1001) && (sgp.eCO2 <= 2000) && (co2_state[1] == 0)) {
 23faada:	f46f 767a 	mvn.w	r6, #1000	; 0x3e8
 23faade:	199a      	adds	r2, r3, r6
 23faae0:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 23faae4:	d223      	bcs.n	23fab2e <_Z7measurev+0x21e>
 23faae6:	4e50      	ldr	r6, [pc, #320]	; (23fac28 <_Z7measurev+0x318>)
 23faae8:	6874      	ldr	r4, [r6, #4]
 23faaea:	2c00      	cmp	r4, #0
 23faaec:	f47f af6f 	bne.w	23fa9ce <_Z7measurev+0xbe>
          Serial.print("G_CO2 "); Serial.print(sgp.eCO2); Serial.print(" ppm");        // DEBUG
 23faaf0:	f002 fe62 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23faaf4:	494d      	ldr	r1, [pc, #308]	; (23fac2c <_Z7measurev+0x31c>)
 23faaf6:	f002 fc95 	bl	23fd424 <_ZN5Print5printEPKc>
 23faafa:	f002 fe5d 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23faafe:	220a      	movs	r2, #10
 23fab00:	8869      	ldrh	r1, [r5, #2]
 23fab02:	f002 fcac 	bl	23fd45e <_ZN5Print11printNumberEmh>
 23fab06:	f002 fe57 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fab0a:	4949      	ldr	r1, [pc, #292]	; (23fac30 <_Z7measurev+0x320>)
 23fab0c:	f002 fc8a 	bl	23fd424 <_ZN5Print5printEPKc>
          tft.fillRect(0,0,240,95,ST77XX_YELLOW);
 23fab10:	f64f 75e0 	movw	r5, #65504	; 0xffe0
 23fab14:	235f      	movs	r3, #95	; 0x5f
 23fab16:	4622      	mov	r2, r4
 23fab18:	e9cd 3500 	strd	r3, r5, [sp]
 23fab1c:	4621      	mov	r1, r4
 23fab1e:	23f0      	movs	r3, #240	; 0xf0
 23fab20:	4840      	ldr	r0, [pc, #256]	; (23fac24 <_Z7measurev+0x314>)
 23fab22:	f000 fe3a 	bl	23fb79a <_ZN15Adafruit_SPITFT8fillRectEsssst>
          co2_state[1] = 1;
 23fab26:	2301      	movs	r3, #1
          co2_state[0] = 0;
 23fab28:	6034      	str	r4, [r6, #0]
          co2_state[1] = 1;
 23fab2a:	6073      	str	r3, [r6, #4]
 23fab2c:	e74d      	b.n	23fa9ca <_Z7measurev+0xba>
  } else if ((sgp.eCO2 >= 2001) && (sgp.eCO2 <= 5000) && (co2_state[2] == 0)) {
 23fab2e:	f46f 60fa 	mvn.w	r0, #2000	; 0x7d0
 23fab32:	f640 31b7 	movw	r1, #2999	; 0xbb7
 23fab36:	181a      	adds	r2, r3, r0
 23fab38:	b292      	uxth	r2, r2
 23fab3a:	428a      	cmp	r2, r1
 23fab3c:	d822      	bhi.n	23fab84 <_Z7measurev+0x274>
 23fab3e:	4e3a      	ldr	r6, [pc, #232]	; (23fac28 <_Z7measurev+0x318>)
 23fab40:	68b4      	ldr	r4, [r6, #8]
 23fab42:	b9fc      	cbnz	r4, 23fab84 <_Z7measurev+0x274>
          Serial.print("G_CO2 "); Serial.print(sgp.eCO2); Serial.print(" ppm");        // DEBUG
 23fab44:	f002 fe38 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fab48:	4938      	ldr	r1, [pc, #224]	; (23fac2c <_Z7measurev+0x31c>)
 23fab4a:	f002 fc6b 	bl	23fd424 <_ZN5Print5printEPKc>
 23fab4e:	f002 fe33 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fab52:	220a      	movs	r2, #10
 23fab54:	8869      	ldrh	r1, [r5, #2]
 23fab56:	f002 fc82 	bl	23fd45e <_ZN5Print11printNumberEmh>
 23fab5a:	f002 fe2d 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fab5e:	4934      	ldr	r1, [pc, #208]	; (23fac30 <_Z7measurev+0x320>)
 23fab60:	f002 fc60 	bl	23fd424 <_ZN5Print5printEPKc>
          tft.fillRect(0,0,240,95,ST77XX_ORANGE);
 23fab64:	235f      	movs	r3, #95	; 0x5f
 23fab66:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 23fab6a:	4622      	mov	r2, r4
 23fab6c:	e9cd 3100 	strd	r3, r1, [sp]
 23fab70:	482c      	ldr	r0, [pc, #176]	; (23fac24 <_Z7measurev+0x314>)
 23fab72:	23f0      	movs	r3, #240	; 0xf0
 23fab74:	4621      	mov	r1, r4
 23fab76:	f000 fe10 	bl	23fb79a <_ZN15Adafruit_SPITFT8fillRectEsssst>
          co2_state[2] = 1;
 23fab7a:	2301      	movs	r3, #1
          co2_state[1] = 0;
 23fab7c:	e9c6 4400 	strd	r4, r4, [r6]
          co2_state[2] = 1;
 23fab80:	60b3      	str	r3, [r6, #8]
          co2_state[3] = 0;
 23fab82:	e723      	b.n	23fa9cc <_Z7measurev+0xbc>
  } else if ((sgp.eCO2 >= 5000) && (co2_state[3] == 0)) {
 23fab84:	f241 3287 	movw	r2, #4999	; 0x1387
 23fab88:	4293      	cmp	r3, r2
 23fab8a:	f67f af20 	bls.w	23fa9ce <_Z7measurev+0xbe>
 23fab8e:	4e26      	ldr	r6, [pc, #152]	; (23fac28 <_Z7measurev+0x318>)
 23fab90:	68f4      	ldr	r4, [r6, #12]
 23fab92:	2c00      	cmp	r4, #0
 23fab94:	f47f af1b 	bne.w	23fa9ce <_Z7measurev+0xbe>
          Serial.print("G_CO2 "); Serial.print(sgp.eCO2); Serial.print(" ppm");        // DEBUG
 23fab98:	f002 fe0e 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fab9c:	4923      	ldr	r1, [pc, #140]	; (23fac2c <_Z7measurev+0x31c>)
 23fab9e:	f002 fc41 	bl	23fd424 <_ZN5Print5printEPKc>
 23faba2:	f002 fe09 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23faba6:	220a      	movs	r2, #10
 23faba8:	8869      	ldrh	r1, [r5, #2]
 23fabaa:	f002 fc58 	bl	23fd45e <_ZN5Print11printNumberEmh>
 23fabae:	f002 fe03 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fabb2:	491f      	ldr	r1, [pc, #124]	; (23fac30 <_Z7measurev+0x320>)
 23fabb4:	f002 fc36 	bl	23fd424 <_ZN5Print5printEPKc>
          tft.fillRect(0,0,240,95,ST77XX_RED);
 23fabb8:	235f      	movs	r3, #95	; 0x5f
 23fabba:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 23fabbe:	4621      	mov	r1, r4
 23fabc0:	e9cd 3200 	strd	r3, r2, [sp]
 23fabc4:	4817      	ldr	r0, [pc, #92]	; (23fac24 <_Z7measurev+0x314>)
 23fabc6:	23f0      	movs	r3, #240	; 0xf0
 23fabc8:	4622      	mov	r2, r4
 23fabca:	f000 fde6 	bl	23fb79a <_ZN15Adafruit_SPITFT8fillRectEsssst>
          co2_state[3] = 1;
 23fabce:	2301      	movs	r3, #1
          co2_state[1] = 0;
 23fabd0:	e9c6 4400 	strd	r4, r4, [r6]
          co2_state[2] = 0;
 23fabd4:	60b4      	str	r4, [r6, #8]
          co2_state[3] = 1;
 23fabd6:	60f3      	str	r3, [r6, #12]
 23fabd8:	e6f9      	b.n	23fa9ce <_Z7measurev+0xbe>
    counter = 0;
 23fabda:	2200      	movs	r2, #0
    if (! sgp.getIAQBaseline(&eCO2_base, &TVOC_base)) {
 23fabdc:	480c      	ldr	r0, [pc, #48]	; (23fac10 <_Z7measurev+0x300>)
    counter = 0;
 23fabde:	601a      	str	r2, [r3, #0]
    if (! sgp.getIAQBaseline(&eCO2_base, &TVOC_base)) {
 23fabe0:	f10d 010e 	add.w	r1, sp, #14
 23fabe4:	aa03      	add	r2, sp, #12
 23fabe6:	f001 fac3 	bl	23fc170 <_ZN14Adafruit_SGP3014getIAQBaselineEPtS0_>
 23fabea:	4602      	mov	r2, r0
 23fabec:	2800      	cmp	r0, #0
 23fabee:	f47f aef6 	bne.w	23fa9de <_Z7measurev+0xce>
 23fabf2:	4b11      	ldr	r3, [pc, #68]	; (23fac38 <_Z7measurev+0x328>)
 23fabf4:	4911      	ldr	r1, [pc, #68]	; (23fac3c <_Z7measurev+0x32c>)
 23fabf6:	781b      	ldrb	r3, [r3, #0]
 23fabf8:	a804      	add	r0, sp, #16
 23fabfa:	f88d 3000 	strb.w	r3, [sp]
 23fabfe:	233c      	movs	r3, #60	; 0x3c
 23fac00:	f002 f88a 	bl	23fcd18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23fac04:	a805      	add	r0, sp, #20
 23fac06:	f7ff fe1d 	bl	23fa844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fac0a:	b006      	add	sp, #24
 23fac0c:	bd70      	pop	{r4, r5, r6, pc}
 23fac0e:	bf00      	nop
 23fac10:	1007ae0c 	.word	0x1007ae0c
 23fac14:	023fdf1b 	.word	0x023fdf1b
 23fac18:	1007ae70 	.word	0x1007ae70
 23fac1c:	023fdf2e 	.word	0x023fdf2e
 23fac20:	023fdf36 	.word	0x023fdf36
 23fac24:	1007ae20 	.word	0x1007ae20
 23fac28:	1007adf4 	.word	0x1007adf4
 23fac2c:	023fdf3c 	.word	0x023fdf3c
 23fac30:	023fdf43 	.word	0x023fdf43
 23fac34:	1007ae04 	.word	0x1007ae04
 23fac38:	1007adf0 	.word	0x1007adf0
 23fac3c:	023fdf48 	.word	0x023fdf48

023fac40 <loop>:

void loop() {
 23fac40:	b538      	push	{r3, r4, r5, lr}

  measure();                                                                            // calls measure() function
 23fac42:	f7ff fe65 	bl	23fa910 <_Z7measurev>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fac46:	f001 fad9 	bl	23fc1fc <HAL_Timer_Get_Milli_Seconds>

  unsigned long currentMillis = millis();                                               // starts timer.  when timer has ellapsed, print_values() function is called.
  if (currentMillis - previousMillis >= interval) {
 23fac4a:	f242 720f 	movw	r2, #9999	; 0x270f
 23fac4e:	4d05      	ldr	r5, [pc, #20]	; (23fac64 <loop+0x24>)
 23fac50:	4604      	mov	r4, r0
 23fac52:	682b      	ldr	r3, [r5, #0]
 23fac54:	1ac3      	subs	r3, r0, r3
 23fac56:	4293      	cmp	r3, r2
 23fac58:	d902      	bls.n	23fac60 <loop+0x20>
    print_values();
 23fac5a:	f7ff fd55 	bl	23fa708 <_Z12print_valuesv>
    previousMillis = currentMillis;
 23fac5e:	602c      	str	r4, [r5, #0]
  }
}
 23fac60:	bd38      	pop	{r3, r4, r5, pc}
 23fac62:	bf00      	nop
 23fac64:	1007ae08 	.word	0x1007ae08

023fac68 <_GLOBAL__sub_I_tvoc_state>:
        val_(val) {
 23fac68:	2201      	movs	r2, #1
 23fac6a:	b508      	push	{r3, lr}
 23fac6c:	4b06      	ldr	r3, [pc, #24]	; (23fac88 <_GLOBAL__sub_I_tvoc_state+0x20>)
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);     // Hardware SPI
 23fac6e:	2112      	movs	r1, #18
 23fac70:	701a      	strb	r2, [r3, #0]
 23fac72:	4806      	ldr	r0, [pc, #24]	; (23fac8c <_GLOBAL__sub_I_tvoc_state+0x24>)
 23fac74:	2306      	movs	r3, #6
 23fac76:	2205      	movs	r2, #5
 23fac78:	f001 f802 	bl	23fbc80 <_ZN15Adafruit_ST7789C1Eaaa>
}
 23fac7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_SGP30 sgp;                                                 // call SPG30 sensor
 23fac80:	4803      	ldr	r0, [pc, #12]	; (23fac90 <_GLOBAL__sub_I_tvoc_state+0x28>)
 23fac82:	f001 b99a 	b.w	23fbfba <_ZN14Adafruit_SGP30C1Ev>
 23fac86:	bf00      	nop
 23fac88:	1007adf0 	.word	0x1007adf0
 23fac8c:	1007ae20 	.word	0x1007ae20
 23fac90:	1007ae0c 	.word	0x1007ae0c

023fac94 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fac94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fac98:	461f      	mov	r7, r3
 23fac9a:	b085      	sub	sp, #20
 23fac9c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23faca0:	eba7 0a01 	sub.w	sl, r7, r1
 23faca4:	eba8 0902 	sub.w	r9, r8, r2
 23faca8:	f1b9 0f00 	cmp.w	r9, #0
 23facac:	bfb8      	it	lt
 23facae:	f1c9 0900 	rsblt	r9, r9, #0
 23facb2:	f1ba 0f00 	cmp.w	sl, #0
 23facb6:	bfb8      	it	lt
 23facb8:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
 23facbc:	45d1      	cmp	r9, sl
        uint16_t color) {
 23facbe:	4683      	mov	fp, r0
 23facc0:	460c      	mov	r4, r1
 23facc2:	4615      	mov	r5, r2
 23facc4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (steep) {
 23facc8:	dd04      	ble.n	23facd4 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23facca:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
 23faccc:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
 23facce:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
 23facd0:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
 23facd2:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
 23facd4:	42bc      	cmp	r4, r7
 23facd6:	dd05      	ble.n	23face4 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23facd8:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
 23facda:	4645      	mov	r5, r8
 23facdc:	4690      	mov	r8, r2
    if (x0 > x1) {
 23facde:	4622      	mov	r2, r4
 23face0:	463c      	mov	r4, r7
 23face2:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
 23face4:	1b3e      	subs	r6, r7, r4
 23face6:	b2b2      	uxth	r2, r6
 23face8:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
 23facea:	eba8 0205 	sub.w	r2, r8, r5
 23facee:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23facf2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
 23facf6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23facfa:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 23facfe:	4545      	cmp	r5, r8
 23fad00:	bfb4      	ite	lt
 23fad02:	2201      	movlt	r2, #1
 23fad04:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
 23fad08:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
 23fad0a:	1076      	asrs	r6, r6, #1
        ystep = -1;
 23fad0c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
 23fad0e:	42bc      	cmp	r4, r7
 23fad10:	dc1c      	bgt.n	23fad4c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
 23fad12:	f8db 2000 	ldr.w	r2, [fp]
        if (steep) {
 23fad16:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
 23fad18:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23fad1c:	bfc7      	ittee	gt
 23fad1e:	4629      	movgt	r1, r5
 23fad20:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
 23fad22:	462a      	movle	r2, r5
 23fad24:	4621      	movle	r1, r4
            writePixel(y0, x0, color);
 23fad26:	9303      	str	r3, [sp, #12]
            writePixel(x0, y0, color);
 23fad28:	4658      	mov	r0, fp
 23fad2a:	47c0      	blx	r8
        }
        err -= dy;
 23fad2c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
 23fad2e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
 23fad30:	1ab6      	subs	r6, r6, r2
 23fad32:	b2b1      	uxth	r1, r6
 23fad34:	b236      	sxth	r6, r6
        if (err < 0) {
 23fad36:	2e00      	cmp	r6, #0
 23fad38:	da05      	bge.n	23fad46 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
 23fad3a:	9a02      	ldr	r2, [sp, #8]
 23fad3c:	4415      	add	r5, r2
            err += dx;
 23fad3e:	9a00      	ldr	r2, [sp, #0]
            y0 += ystep;
 23fad40:	b22d      	sxth	r5, r5
            err += dx;
 23fad42:	1856      	adds	r6, r2, r1
 23fad44:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
 23fad46:	3401      	adds	r4, #1
 23fad48:	b224      	sxth	r4, r4
 23fad4a:	e7e0      	b.n	23fad0e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
 23fad4c:	b005      	add	sp, #20
 23fad4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fad52 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
 23fad52:	4770      	bx	lr

023fad54 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
 23fad54:	b410      	push	{r4}
    drawPixel(x, y, color);
 23fad56:	6804      	ldr	r4, [r0, #0]
 23fad58:	6924      	ldr	r4, [r4, #16]
 23fad5a:	46a4      	mov	ip, r4
}
 23fad5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
 23fad60:	4760      	bx	ip

023fad62 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fad62:	b430      	push	{r4, r5}
 23fad64:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 23fad68:	6804      	ldr	r4, [r0, #0]
 23fad6a:	9502      	str	r5, [sp, #8]
 23fad6c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fad6e:	46a4      	mov	ip, r4
}
 23fad70:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
 23fad72:	4760      	bx	ip

023fad74 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23fad74:	b430      	push	{r4, r5}
 23fad76:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 23fad7a:	6804      	ldr	r4, [r0, #0]
 23fad7c:	9502      	str	r5, [sp, #8]
 23fad7e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23fad80:	46a4      	mov	ip, r4
}
 23fad82:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
 23fad84:	4760      	bx	ip

023fad86 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fad86:	b470      	push	{r4, r5, r6}
 23fad88:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23fad8c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 23fad90:	6804      	ldr	r4, [r0, #0]
 23fad92:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23fad96:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23fad98:	46a4      	mov	ip, r4
}
 23fad9a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
 23fad9c:	4760      	bx	ip

023fad9e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fad9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fada2:	461c      	mov	r4, r3
 23fada4:	4616      	mov	r6, r2
 23fada6:	4605      	mov	r5, r0
 23fada8:	460f      	mov	r7, r1
    startWrite();
 23fadaa:	6803      	ldr	r3, [r0, #0]
    writeLine(x, y, x, y+h-1, color);
 23fadac:	3c01      	subs	r4, #1
        int16_t h, uint16_t color) {
 23fadae:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fadb2:	695b      	ldr	r3, [r3, #20]
    writeLine(x, y, x, y+h-1, color);
 23fadb4:	4434      	add	r4, r6
    startWrite();
 23fadb6:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
 23fadb8:	b224      	sxth	r4, r4
 23fadba:	682b      	ldr	r3, [r5, #0]
 23fadbc:	f8cd 8004 	str.w	r8, [sp, #4]
 23fadc0:	9400      	str	r4, [sp, #0]
 23fadc2:	4628      	mov	r0, r5
 23fadc4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23fadc6:	4632      	mov	r2, r6
 23fadc8:	463b      	mov	r3, r7
 23fadca:	4639      	mov	r1, r7
 23fadcc:	47a0      	blx	r4
    endWrite();
 23fadce:	4628      	mov	r0, r5
 23fadd0:	682b      	ldr	r3, [r5, #0]
 23fadd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fadd4:	b002      	add	sp, #8
 23fadd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fadda:	4718      	bx	r3

023faddc <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23faddc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fade0:	4617      	mov	r7, r2
 23fade2:	4604      	mov	r4, r0
 23fade4:	461d      	mov	r5, r3
 23fade6:	460e      	mov	r6, r1
    startWrite();
 23fade8:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
 23fadea:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fadee:	695b      	ldr	r3, [r3, #20]
 23fadf0:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
 23fadf2:	e9cd 7800 	strd	r7, r8, [sp]
 23fadf6:	6822      	ldr	r2, [r4, #0]
 23fadf8:	1e6b      	subs	r3, r5, #1
 23fadfa:	4433      	add	r3, r6
 23fadfc:	4620      	mov	r0, r4
 23fadfe:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23fae00:	4631      	mov	r1, r6
 23fae02:	463a      	mov	r2, r7
 23fae04:	b21b      	sxth	r3, r3
 23fae06:	47a8      	blx	r5
    endWrite();
 23fae08:	4620      	mov	r0, r4
 23fae0a:	6823      	ldr	r3, [r4, #0]
 23fae0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fae0e:	b002      	add	sp, #8
 23fae10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fae14:	4718      	bx	r3

023fae16 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fae16:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fae1a:	461e      	mov	r6, r3
    startWrite();
 23fae1c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23fae1e:	460c      	mov	r4, r1
    startWrite();
 23fae20:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23fae22:	4605      	mov	r5, r0
 23fae24:	4617      	mov	r7, r2
 23fae26:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fae2a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23fae2e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
 23fae30:	4426      	add	r6, r4
 23fae32:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
 23fae34:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
 23fae36:	da0b      	bge.n	23fae50 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
 23fae38:	f8cd 8000 	str.w	r8, [sp]
 23fae3c:	4621      	mov	r1, r4
 23fae3e:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fae42:	463a      	mov	r2, r7
 23fae44:	464b      	mov	r3, r9
 23fae46:	4628      	mov	r0, r5
 23fae48:	3401      	adds	r4, #1
 23fae4a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
 23fae4c:	b224      	sxth	r4, r4
 23fae4e:	e7f0      	b.n	23fae32 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
 23fae50:	4628      	mov	r0, r5
 23fae52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fae54:	b002      	add	sp, #8
 23fae56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23fae5a:	4718      	bx	r3

023fae5c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23fae5c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
 23fae5e:	9101      	str	r1, [sp, #4]
 23fae60:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fae64:	6802      	ldr	r2, [r0, #0]
 23fae66:	9100      	str	r1, [sp, #0]
 23fae68:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fae6a:	2200      	movs	r2, #0
 23fae6c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fae70:	4611      	mov	r1, r2
 23fae72:	47a0      	blx	r4
}
 23fae74:	b002      	add	sp, #8
 23fae76:	bd10      	pop	{r4, pc}

023fae78 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fae78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
 23fae7c:	4299      	cmp	r1, r3
        uint16_t color) {
 23fae7e:	4616      	mov	r6, r2
 23fae80:	4680      	mov	r8, r0
 23fae82:	460d      	mov	r5, r1
 23fae84:	461c      	mov	r4, r3
 23fae86:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fae8a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fae8e:	6802      	ldr	r2, [r0, #0]
    if(x0 == x1){
 23fae90:	d112      	bne.n	23faeb8 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
        if(y0 > y1) _swap_int16_t(y0, y1);
 23fae92:	42be      	cmp	r6, r7
 23fae94:	bfc2      	ittt	gt
 23fae96:	4633      	movgt	r3, r6
 23fae98:	463e      	movgt	r6, r7
 23fae9a:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fae9c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23faea0:	1c7b      	adds	r3, r7, #1
 23faea2:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23faea4:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23faea6:	4632      	mov	r2, r6
 23faea8:	4629      	mov	r1, r5
 23faeaa:	4640      	mov	r0, r8
 23faeac:	46a4      	mov	ip, r4
 23faeae:	b21b      	sxth	r3, r3
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
 23faeb0:	b003      	add	sp, #12
 23faeb2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23faeb6:	4760      	bx	ip
    } else if(y0 == y1){
 23faeb8:	42be      	cmp	r6, r7
 23faeba:	d10a      	bne.n	23faed2 <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
        if(x0 > x1) _swap_int16_t(x0, x1);
 23faebc:	4299      	cmp	r1, r3
 23faebe:	bfc2      	ittt	gt
 23faec0:	460b      	movgt	r3, r1
 23faec2:	4625      	movgt	r5, r4
 23faec4:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23faec6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23faeca:	1c63      	adds	r3, r4, #1
 23faecc:	1b5b      	subs	r3, r3, r5
 23faece:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23faed0:	e7e9      	b.n	23faea6 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
        startWrite();
 23faed2:	6953      	ldr	r3, [r2, #20]
 23faed4:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
 23faed6:	e9cd 7900 	strd	r7, r9, [sp]
 23faeda:	f8d8 3000 	ldr.w	r3, [r8]
 23faede:	4640      	mov	r0, r8
 23faee0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23faee2:	4632      	mov	r2, r6
 23faee4:	4623      	mov	r3, r4
 23faee6:	4629      	mov	r1, r5
 23faee8:	47b8      	blx	r7
        endWrite();
 23faeea:	4640      	mov	r0, r8
 23faeec:	f8d8 3000 	ldr.w	r3, [r8]
 23faef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23faef2:	b003      	add	sp, #12
 23faef4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 23faef8:	4718      	bx	r3

023faefa <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23faefa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23faefe:	4604      	mov	r4, r0
 23faf00:	460f      	mov	r7, r1
 23faf02:	4616      	mov	r6, r2
 23faf04:	461d      	mov	r5, r3
    startWrite();
 23faf06:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23faf08:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23faf0c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23faf0e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
 23faf12:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
 23faf14:	6823      	ldr	r3, [r4, #0]
 23faf16:	f8cd 8000 	str.w	r8, [sp]
 23faf1a:	4632      	mov	r2, r6
 23faf1c:	4639      	mov	r1, r7
 23faf1e:	4620      	mov	r0, r4
 23faf20:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23faf24:	462b      	mov	r3, r5
 23faf26:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
 23faf28:	6823      	ldr	r3, [r4, #0]
 23faf2a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23faf2e:	f8cd 8000 	str.w	r8, [sp]
 23faf32:	4432      	add	r2, r6
 23faf34:	4639      	mov	r1, r7
 23faf36:	4620      	mov	r0, r4
 23faf38:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23faf3c:	b212      	sxth	r2, r2
 23faf3e:	462b      	mov	r3, r5
 23faf40:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
 23faf42:	6823      	ldr	r3, [r4, #0]
 23faf44:	f8cd 8000 	str.w	r8, [sp]
 23faf48:	4632      	mov	r2, r6
 23faf4a:	4639      	mov	r1, r7
 23faf4c:	4620      	mov	r0, r4
 23faf4e:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23faf52:	464b      	mov	r3, r9
 23faf54:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
 23faf56:	1e6b      	subs	r3, r5, #1
 23faf58:	19d9      	adds	r1, r3, r7
 23faf5a:	6823      	ldr	r3, [r4, #0]
 23faf5c:	f8cd 8000 	str.w	r8, [sp]
 23faf60:	4620      	mov	r0, r4
 23faf62:	6a1d      	ldr	r5, [r3, #32]
 23faf64:	4632      	mov	r2, r6
 23faf66:	464b      	mov	r3, r9
 23faf68:	b209      	sxth	r1, r1
 23faf6a:	47a8      	blx	r5
    endWrite();
 23faf6c:	4620      	mov	r0, r4
 23faf6e:	6823      	ldr	r3, [r4, #0]
 23faf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23faf72:	b002      	add	sp, #8
 23faf74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23faf78:	4718      	bx	r3

023faf7a <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
 23faf7a:	4770      	bx	lr

023faf7c <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
 23faf7c:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
 23faf80:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
 23faf84:	7683      	strb	r3, [r0, #26]
            _width  = WIDTH;
 23faf86:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    switch(rotation) {
 23faf8a:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
 23faf8c:	bf59      	ittee	pl
 23faf8e:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
 23faf90:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
 23faf92:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
 23faf94:	81c3      	strhmi	r3, [r0, #14]
}
 23faf96:	4770      	bx	lr

023faf98 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 23faf98:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
 23faf9a:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 23faf9c:	2400      	movs	r4, #0
    _width    = WIDTH;
 23faf9e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
 23fafa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
WIDTH(w), HEIGHT(h)
 23fafa4:	4d05      	ldr	r5, [pc, #20]	; (23fafbc <_ZN12Adafruit_GFXC1Ess+0x24>)
 23fafa6:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
 23fafa8:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
 23fafaa:	4a05      	ldr	r2, [pc, #20]	; (23fafc0 <_ZN12Adafruit_GFXC1Ess+0x28>)
 23fafac:	6044      	str	r4, [r0, #4]
 23fafae:	e9c0 1205 	strd	r1, r2, [r0, #20]
WIDTH(w), HEIGHT(h)
 23fafb2:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
 23fafb4:	6104      	str	r4, [r0, #16]
    _cp437    = false;
 23fafb6:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
 23fafb8:	6204      	str	r4, [r0, #32]
}
 23fafba:	bd30      	pop	{r4, r5, pc}
 23fafbc:	023ffc3c 	.word	0x023ffc3c
 23fafc0:	01000101 	.word	0x01000101

023fafc4 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23fafc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fafc8:	ed2d 8b02 	vpush	{d8}
 23fafcc:	b091      	sub	sp, #68	; 0x44
 23fafce:	4616      	mov	r6, r2
 23fafd0:	461f      	mov	r7, r3
    if(!gfxFont) { // 'Classic' built-in font
 23fafd2:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23fafd4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23fafd8:	4683      	mov	fp, r0
 23fafda:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23fafde:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23fafe2:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23fafe6:	9103      	str	r1, [sp, #12]
 23fafe8:	9304      	str	r3, [sp, #16]
    if(!gfxFont) { // 'Classic' built-in font
 23fafea:	2a00      	cmp	r2, #0
 23fafec:	f040 80c5 	bne.w	23fb17a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
 23faff0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23faff4:	428b      	cmp	r3, r1
 23faff6:	f340 814c 	ble.w	23fb292 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23faffa:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23faffe:	42b3      	cmp	r3, r6
 23fb000:	f340 8147 	ble.w	23fb292 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fb004:	2306      	movs	r3, #6
 23fb006:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
 23fb00a:	2b00      	cmp	r3, #0
 23fb00c:	f340 8141 	ble.w	23fb292 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
 23fb010:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fb014:	2b00      	cmp	r3, #0
 23fb016:	f340 813c 	ble.w	23fb292 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 23fb01a:	7f03      	ldrb	r3, [r0, #28]
 23fb01c:	b91b      	cbnz	r3, 23fb026 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23fb01e:	2faf      	cmp	r7, #175	; 0xaf
 23fb020:	bf84      	itt	hi
 23fb022:	3701      	addhi	r7, #1
 23fb024:	b2ff      	uxtbhi	r7, r7
        startWrite();
 23fb026:	f8db 3000 	ldr.w	r3, [fp]
 23fb02a:	4658      	mov	r0, fp
 23fb02c:	695b      	ldr	r3, [r3, #20]
 23fb02e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fb030:	2205      	movs	r2, #5
 23fb032:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fb034:	2200      	movs	r2, #0
 23fb036:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fb038:	4a98      	ldr	r2, [pc, #608]	; (23fb29c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23fb03a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23fb03e:	18d3      	adds	r3, r2, r3
 23fb040:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
 23fb042:	b2b3      	uxth	r3, r6
 23fb044:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fb046:	9a05      	ldr	r2, [sp, #20]
 23fb048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fb04a:	fb02 f905 	mul.w	r9, r2, r5
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fb04e:	5c9b      	ldrb	r3, [r3, r2]
 23fb050:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fb052:	b2ab      	uxth	r3, r5
 23fb054:	930b      	str	r3, [sp, #44]	; 0x2c
 23fb056:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fb05a:	9308      	str	r3, [sp, #32]
 23fb05c:	9b03      	ldr	r3, [sp, #12]
 23fb05e:	fa19 f983 	uxtah	r9, r9, r3
 23fb062:	fa0f f389 	sxth.w	r3, r9
 23fb066:	ee08 3a10 	vmov	s16, r3
 23fb06a:	2308      	movs	r3, #8
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fb06c:	f04f 0900 	mov.w	r9, #0
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fb070:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
 23fb072:	9b03      	ldr	r3, [sp, #12]
 23fb074:	eb02 0a03 	add.w	sl, r2, r3
 23fb078:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
 23fb07c:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
 23fb07e:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
 23fb082:	07d2      	lsls	r2, r2, #31
 23fb084:	d552      	bpl.n	23fb12c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
 23fb086:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fb088:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fb08c:	d13e      	bne.n	23fb10c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23fb08e:	2c01      	cmp	r4, #1
 23fb090:	d13c      	bne.n	23fb10c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
 23fb092:	699b      	ldr	r3, [r3, #24]
 23fb094:	9906      	ldr	r1, [sp, #24]
 23fb096:	461f      	mov	r7, r3
 23fb098:	9b04      	ldr	r3, [sp, #16]
 23fb09a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
 23fb09c:	4651      	mov	r1, sl
 23fb09e:	4658      	mov	r0, fp
 23fb0a0:	b212      	sxth	r2, r2
 23fb0a2:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fb0a4:	f109 0301 	add.w	r3, r9, #1
 23fb0a8:	fa4f f983 	sxtb.w	r9, r3
 23fb0ac:	9b07      	ldr	r3, [sp, #28]
 23fb0ae:	085b      	lsrs	r3, r3, #1
 23fb0b0:	9307      	str	r3, [sp, #28]
 23fb0b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fb0b4:	3b01      	subs	r3, #1
 23fb0b6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fb0ba:	930a      	str	r3, [sp, #40]	; 0x28
 23fb0bc:	d1de      	bne.n	23fb07c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fb0be:	9f05      	ldr	r7, [sp, #20]
 23fb0c0:	3701      	adds	r7, #1
 23fb0c2:	b27b      	sxtb	r3, r7
 23fb0c4:	9305      	str	r3, [sp, #20]
 23fb0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fb0c8:	3b01      	subs	r3, #1
 23fb0ca:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fb0ce:	9309      	str	r3, [sp, #36]	; 0x24
 23fb0d0:	d1b9      	bne.n	23fb046 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
 23fb0d2:	9b04      	ldr	r3, [sp, #16]
 23fb0d4:	4543      	cmp	r3, r8
 23fb0d6:	d00f      	beq.n	23fb0f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 23fb0d8:	2d01      	cmp	r5, #1
 23fb0da:	f8db 3000 	ldr.w	r3, [fp]
 23fb0de:	d13b      	bne.n	23fb158 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fb0e0:	2c01      	cmp	r4, #1
 23fb0e2:	d139      	bne.n	23fb158 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fb0e4:	9908      	ldr	r1, [sp, #32]
 23fb0e6:	f8cd 8000 	str.w	r8, [sp]
 23fb0ea:	3105      	adds	r1, #5
 23fb0ec:	6a1c      	ldr	r4, [r3, #32]
 23fb0ee:	4632      	mov	r2, r6
 23fb0f0:	2308      	movs	r3, #8
 23fb0f2:	4658      	mov	r0, fp
 23fb0f4:	b209      	sxth	r1, r1
 23fb0f6:	47a0      	blx	r4
        endWrite();
 23fb0f8:	4658      	mov	r0, fp
 23fb0fa:	f8db 3000 	ldr.w	r3, [fp]
 23fb0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb100:	b011      	add	sp, #68	; 0x44
 23fb102:	ecbd 8b02 	vpop	{d8}
 23fb106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
 23fb10a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 23fb10c:	fb14 f202 	smulbb	r2, r4, r2
 23fb110:	9906      	ldr	r1, [sp, #24]
 23fb112:	440a      	add	r2, r1
 23fb114:	9904      	ldr	r1, [sp, #16]
 23fb116:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fb118:	9400      	str	r4, [sp, #0]
 23fb11a:	69db      	ldr	r3, [r3, #28]
 23fb11c:	ee18 1a10 	vmov	r1, s16
 23fb120:	461f      	mov	r7, r3
 23fb122:	4658      	mov	r0, fp
 23fb124:	462b      	mov	r3, r5
 23fb126:	b212      	sxth	r2, r2
 23fb128:	47b8      	blx	r7
 23fb12a:	e7bb      	b.n	23fb0a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
 23fb12c:	9a04      	ldr	r2, [sp, #16]
 23fb12e:	4542      	cmp	r2, r8
 23fb130:	d0b8      	beq.n	23fb0a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
 23fb132:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fb134:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fb138:	d107      	bne.n	23fb14a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23fb13a:	2c01      	cmp	r4, #1
 23fb13c:	d105      	bne.n	23fb14a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
 23fb13e:	699b      	ldr	r3, [r3, #24]
 23fb140:	9906      	ldr	r1, [sp, #24]
 23fb142:	461f      	mov	r7, r3
 23fb144:	440a      	add	r2, r1
 23fb146:	4643      	mov	r3, r8
 23fb148:	e7a8      	b.n	23fb09c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fb14a:	fb14 f202 	smulbb	r2, r4, r2
 23fb14e:	9906      	ldr	r1, [sp, #24]
 23fb150:	f8cd 8004 	str.w	r8, [sp, #4]
 23fb154:	440a      	add	r2, r1
 23fb156:	e7df      	b.n	23fb118 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 23fb158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fb15a:	00e4      	lsls	r4, r4, #3
 23fb15c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23fb160:	9a08      	ldr	r2, [sp, #32]
 23fb162:	f8cd 8004 	str.w	r8, [sp, #4]
 23fb166:	440a      	add	r2, r1
 23fb168:	4611      	mov	r1, r2
 23fb16a:	9400      	str	r4, [sp, #0]
 23fb16c:	69dc      	ldr	r4, [r3, #28]
 23fb16e:	4632      	mov	r2, r6
 23fb170:	462b      	mov	r3, r5
 23fb172:	4658      	mov	r0, fp
 23fb174:	b209      	sxth	r1, r1
 23fb176:	47a0      	blx	r4
        endWrite();
 23fb178:	e7be      	b.n	23fb0f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fb17a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
 23fb17c:	6851      	ldr	r1, [r2, #4]
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fb17e:	1aff      	subs	r7, r7, r3
    return gfxFont->bitmap;
 23fb180:	6812      	ldr	r2, [r2, #0]
    return gfxFont->glyph + c;
 23fb182:	b2ff      	uxtb	r7, r7
    return gfxFont->bitmap;
 23fb184:	920b      	str	r2, [sp, #44]	; 0x2c
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fb186:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
    return gfxFont->glyph + c;
 23fb18a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fb18e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fb190:	789a      	ldrb	r2, [r3, #2]
        if(size_x > 1 || size_y > 1) {
 23fb192:	2d01      	cmp	r5, #1
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fb194:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
 23fb196:	78da      	ldrb	r2, [r3, #3]
                 yo = pgm_read_byte(&glyph->yOffset);
 23fb198:	f993 a006 	ldrsb.w	sl, [r3, #6]
                 h  = pgm_read_byte(&glyph->height);
 23fb19c:	920c      	str	r2, [sp, #48]	; 0x30
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 23fb19e:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23fb1a2:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
 23fb1a4:	d801      	bhi.n	23fb1aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23fb1a6:	2c01      	cmp	r4, #1
 23fb1a8:	d957      	bls.n	23fb25a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
 23fb1aa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23fb1ae:	9308      	str	r3, [sp, #32]
            yo16 = yo;
 23fb1b0:	fa0f f38a 	sxth.w	r3, sl
 23fb1b4:	9307      	str	r3, [sp, #28]
        uint8_t  xx, yy, bits = 0, bit = 0;
 23fb1b6:	f04f 0800 	mov.w	r8, #0
 23fb1ba:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
 23fb1bc:	4647      	mov	r7, r8
        startWrite();
 23fb1be:	f8db 3000 	ldr.w	r3, [fp]
 23fb1c2:	4658      	mov	r0, fp
 23fb1c4:	695b      	ldr	r3, [r3, #20]
 23fb1c6:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fb1c8:	b2b3      	uxth	r3, r6
 23fb1ca:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fb1cc:	fa1a f386 	uxtah	r3, sl, r6
 23fb1d0:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
 23fb1d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fb1d4:	429f      	cmp	r7, r3
 23fb1d6:	d28f      	bcs.n	23fb0f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fb1d8:	9b07      	ldr	r3, [sp, #28]
 23fb1da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23fb1dc:	443b      	add	r3, r7
 23fb1de:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
 23fb1e2:	2200      	movs	r2, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fb1e4:	b21b      	sxth	r3, r3
 23fb1e6:	ee08 3a10 	vmov	s16, r3
 23fb1ea:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
 23fb1ec:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fb1ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23fb1f0:	eb02 0a07 	add.w	sl, r2, r7
 23fb1f4:	fa0f fa8a 	sxth.w	sl, sl
            for(xx=0; xx<w; xx++) {
 23fb1f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fb1fa:	9905      	ldr	r1, [sp, #20]
 23fb1fc:	4291      	cmp	r1, r2
 23fb1fe:	d241      	bcs.n	23fb284 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
 23fb200:	1c5a      	adds	r2, r3, #1
 23fb202:	b2d2      	uxtb	r2, r2
 23fb204:	075b      	lsls	r3, r3, #29
 23fb206:	920d      	str	r2, [sp, #52]	; 0x34
 23fb208:	d107      	bne.n	23fb21a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
 23fb20a:	9b06      	ldr	r3, [sp, #24]
 23fb20c:	9906      	ldr	r1, [sp, #24]
 23fb20e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fb210:	3301      	adds	r3, #1
 23fb212:	b29b      	uxth	r3, r3
 23fb214:	f812 9001 	ldrb.w	r9, [r2, r1]
 23fb218:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
 23fb21a:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fb21e:	d012      	beq.n	23fb246 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
 23fb220:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fb222:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fb226:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
 23fb22a:	d11a      	bne.n	23fb262 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23fb22c:	2c01      	cmp	r4, #1
 23fb22e:	d118      	bne.n	23fb262 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fb230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fb232:	699b      	ldr	r3, [r3, #24]
 23fb234:	4411      	add	r1, r2
 23fb236:	9a05      	ldr	r2, [sp, #20]
 23fb238:	461e      	mov	r6, r3
 23fb23a:	4411      	add	r1, r2
 23fb23c:	4658      	mov	r0, fp
 23fb23e:	4652      	mov	r2, sl
 23fb240:	9b04      	ldr	r3, [sp, #16]
 23fb242:	b209      	sxth	r1, r1
 23fb244:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
 23fb246:	9e05      	ldr	r6, [sp, #20]
                bits <<= 1;
 23fb248:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
 23fb24c:	3601      	adds	r6, #1
 23fb24e:	b2f3      	uxtb	r3, r6
 23fb250:	9305      	str	r3, [sp, #20]
                bits <<= 1;
 23fb252:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
 23fb256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
 23fb258:	e7ce      	b.n	23fb1f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
 23fb25a:	2300      	movs	r3, #0
 23fb25c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23fb260:	e7a9      	b.n	23fb1b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fb262:	9805      	ldr	r0, [sp, #20]
 23fb264:	9a08      	ldr	r2, [sp, #32]
 23fb266:	4402      	add	r2, r0
 23fb268:	fb02 1105 	mla	r1, r2, r5, r1
 23fb26c:	9a04      	ldr	r2, [sp, #16]
 23fb26e:	4658      	mov	r0, fp
 23fb270:	e9cd 4200 	strd	r4, r2, [sp]
 23fb274:	69db      	ldr	r3, [r3, #28]
 23fb276:	ee18 2a10 	vmov	r2, s16
 23fb27a:	461e      	mov	r6, r3
 23fb27c:	b209      	sxth	r1, r1
 23fb27e:	462b      	mov	r3, r5
 23fb280:	47b0      	blx	r6
 23fb282:	e7e0      	b.n	23fb246 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23fb284:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
 23fb286:	3701      	adds	r7, #1
 23fb288:	4498      	add	r8, r3
 23fb28a:	fa5f f888 	uxtb.w	r8, r8
 23fb28e:	b2ff      	uxtb	r7, r7
 23fb290:	e79f      	b.n	23fb1d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23fb292:	b011      	add	sp, #68	; 0x44
 23fb294:	ecbd 8b02 	vpop	{d8}
 23fb298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb29c:	023ff734 	.word	0x023ff734

023fb2a0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23fb2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
 23fb2a2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23fb2a4:	4604      	mov	r4, r0
 23fb2a6:	460b      	mov	r3, r1
 23fb2a8:	b085      	sub	sp, #20
    if(!gfxFont) { // 'Classic' built-in font
 23fb2aa:	2a00      	cmp	r2, #0
 23fb2ac:	d134      	bne.n	23fb318 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
 23fb2ae:	290a      	cmp	r1, #10
 23fb2b0:	d108      	bne.n	23fb2c4 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
 23fb2b2:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
 23fb2b4:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fb2b6:	7e42      	ldrb	r2, [r0, #25]
 23fb2b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
 23fb2bc:	8263      	strh	r3, [r4, #18]
}
 23fb2be:	2001      	movs	r0, #1
 23fb2c0:	b005      	add	sp, #20
 23fb2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
 23fb2c4:	290d      	cmp	r1, #13
 23fb2c6:	d0fa      	beq.n	23fb2be <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fb2c8:	7ee1      	ldrb	r1, [r4, #27]
 23fb2ca:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fb2cc:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fb2ce:	b171      	cbz	r1, 23fb2ee <_ZN12Adafruit_GFX5writeEh+0x4e>
 23fb2d0:	2106      	movs	r1, #6
 23fb2d2:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23fb2d6:	fb11 6100 	smlabb	r1, r1, r0, r6
 23fb2da:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23fb2de:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
 23fb2e0:	bfc1      	itttt	gt
 23fb2e2:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
 23fb2e6:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
 23fb2e8:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23fb2ec:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fb2ee:	8ae2      	ldrh	r2, [r4, #22]
 23fb2f0:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23fb2f4:	9201      	str	r2, [sp, #4]
 23fb2f6:	8aa2      	ldrh	r2, [r4, #20]
 23fb2f8:	4620      	mov	r0, r4
 23fb2fa:	9200      	str	r2, [sp, #0]
 23fb2fc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fb300:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fb304:	f7ff fe5e 	bl	23fafc4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
 23fb308:	7e23      	ldrb	r3, [r4, #24]
 23fb30a:	8a22      	ldrh	r2, [r4, #16]
 23fb30c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fb310:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fb314:	8223      	strh	r3, [r4, #16]
 23fb316:	e7d2      	b.n	23fb2be <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
 23fb318:	290a      	cmp	r1, #10
 23fb31a:	d107      	bne.n	23fb32c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
 23fb31c:	2300      	movs	r3, #0
 23fb31e:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
 23fb320:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fb322:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
 23fb324:	8a43      	ldrh	r3, [r0, #18]
 23fb326:	fb01 3302 	mla	r3, r1, r2, r3
 23fb32a:	e7c7      	b.n	23fb2bc <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
 23fb32c:	290d      	cmp	r1, #13
 23fb32e:	d0c6      	beq.n	23fb2be <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 23fb330:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23fb332:	42a9      	cmp	r1, r5
 23fb334:	d3c3      	bcc.n	23fb2be <_ZN12Adafruit_GFX5writeEh+0x1e>
 23fb336:	7a51      	ldrb	r1, [r2, #9]
 23fb338:	4299      	cmp	r1, r3
 23fb33a:	d3c0      	bcc.n	23fb2be <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
 23fb33c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
 23fb33e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
 23fb340:	b2ed      	uxtb	r5, r5
 23fb342:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
 23fb346:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23fb348:	b328      	cbz	r0, 23fb396 <_ZN12Adafruit_GFX5writeEh+0xf6>
 23fb34a:	78e9      	ldrb	r1, [r5, #3]
 23fb34c:	b319      	cbz	r1, 23fb396 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fb34e:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fb350:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fb352:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fb354:	b191      	cbz	r1, 23fb37c <_ZN12Adafruit_GFX5writeEh+0xdc>
 23fb356:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23fb35a:	4408      	add	r0, r1
 23fb35c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fb360:	fb06 1100 	mla	r1, r6, r0, r1
 23fb364:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23fb368:	4281      	cmp	r1, r0
 23fb36a:	dd07      	ble.n	23fb37c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
 23fb36c:	2000      	movs	r0, #0
 23fb36e:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fb370:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fb374:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
 23fb376:	fb02 1207 	mla	r2, r2, r7, r1
 23fb37a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fb37c:	8ae2      	ldrh	r2, [r4, #22]
 23fb37e:	4620      	mov	r0, r4
 23fb380:	9201      	str	r2, [sp, #4]
 23fb382:	8aa2      	ldrh	r2, [r4, #20]
 23fb384:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23fb388:	9200      	str	r2, [sp, #0]
 23fb38a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fb38e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fb392:	f7ff fe17 	bl	23fafc4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fb396:	7929      	ldrb	r1, [r5, #4]
 23fb398:	7e22      	ldrb	r2, [r4, #24]
 23fb39a:	8a23      	ldrh	r3, [r4, #16]
 23fb39c:	fb01 3302 	mla	r3, r1, r2, r3
 23fb3a0:	e7b8      	b.n	23fb314 <_ZN12Adafruit_GFX5writeEh+0x74>

023fb3a2 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
 23fb3a2:	2901      	cmp	r1, #1
 23fb3a4:	bf38      	it	cc
 23fb3a6:	2101      	movcc	r1, #1
 23fb3a8:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
 23fb3aa:	7641      	strb	r1, [r0, #25]
}
 23fb3ac:	4770      	bx	lr

023fb3ae <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
        if(!gfxFont) { // And no current font struct?
 23fb3ae:	6a03      	ldr	r3, [r0, #32]
    if(f) {            // Font struct pointer passed in?
 23fb3b0:	b129      	cbz	r1, 23fb3be <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x10>
        if(!gfxFont) { // And no current font struct?
 23fb3b2:	b913      	cbnz	r3, 23fb3ba <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
            cursor_y += 6;
 23fb3b4:	8a43      	ldrh	r3, [r0, #18]
 23fb3b6:	3306      	adds	r3, #6
        cursor_y -= 6;
 23fb3b8:	8243      	strh	r3, [r0, #18]
    gfxFont = (GFXfont *)f;
 23fb3ba:	6201      	str	r1, [r0, #32]
}
 23fb3bc:	4770      	bx	lr
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 23fb3be:	2b00      	cmp	r3, #0
 23fb3c0:	d0fb      	beq.n	23fb3ba <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
        cursor_y -= 6;
 23fb3c2:	8a43      	ldrh	r3, [r0, #18]
 23fb3c4:	3b06      	subs	r3, #6
 23fb3c6:	e7f7      	b.n	23fb3b8 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xa>

023fb3c8 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>:
  #endif
 #else  // !HAS_PORT_SET_CLR
    *swspi.sckPort   &= swspi.sckPinMaskClr;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(swspi._sck, LOW);
 23fb3c8:	2100      	movs	r1, #0
 23fb3ca:	b280      	uxth	r0, r0
 23fb3cc:	f002 bb4d 	b.w	23fda6a <digitalWrite>

023fb3d0 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>:
    digitalWrite(swspi._sck, HIGH);
 23fb3d0:	2101      	movs	r1, #1
 23fb3d2:	b280      	uxth	r0, r0
 23fb3d4:	f002 bb49 	b.w	23fda6a <digitalWrite>

023fb3d8 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>:
    digitalWrite(swspi._mosi, LOW);
 23fb3d8:	2100      	movs	r1, #0
 23fb3da:	b280      	uxth	r0, r0
 23fb3dc:	f002 bb45 	b.w	23fda6a <digitalWrite>

023fb3e0 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>:
    digitalWrite(swspi._mosi, HIGH);
 23fb3e0:	2101      	movs	r1, #1
 23fb3e2:	b280      	uxth	r0, r0
 23fb3e4:	f002 bb41 	b.w	23fda6a <digitalWrite>

023fb3e8 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>:
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *dcPort   &= dcPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_dc, LOW);
 23fb3e8:	2100      	movs	r1, #0
 23fb3ea:	b280      	uxth	r0, r0
 23fb3ec:	f002 bb3d 	b.w	23fda6a <digitalWrite>

023fb3f0 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>:
        digitalWrite(_dc, HIGH);
 23fb3f0:	2101      	movs	r1, #1
 23fb3f2:	b280      	uxth	r0, r0
 23fb3f4:	f002 bb39 	b.w	23fda6a <digitalWrite>

023fb3f8 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23fb3f8:	b538      	push	{r3, r4, r5, lr}
 23fb3fa:	4604      	mov	r4, r0
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fb3fc:	b212      	sxth	r2, r2
 23fb3fe:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23fb400:	461d      	mov	r5, r3
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fb402:	f7ff fdc9 	bl	23faf98 <_ZN12Adafruit_GFXC1Ess>
 23fb406:	2200      	movs	r2, #0
 23fb408:	4b0b      	ldr	r3, [pc, #44]	; (23fb438 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa+0x40>)
}
 23fb40a:	4620      	mov	r0, r4
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fb40c:	6023      	str	r3, [r4, #0]
 23fb40e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 23fb412:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 23fb416:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 23fb41a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 23fb41e:	6422      	str	r2, [r4, #64]	; 0x40
 23fb420:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 23fb424:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 23fb428:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 23fb42c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 23fb430:	64a2      	str	r2, [r4, #72]	; 0x48
    hwspi._spi = spiClass;
 23fb432:	6265      	str	r5, [r4, #36]	; 0x24
}
 23fb434:	bd38      	pop	{r3, r4, r5, pc}
 23fb436:	bf00      	nop
 23fb438:	023ffc94 	.word	0x023ffc94

023fb43c <_ZN15Adafruit_SPITFTC1Ettaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, int8_t cs,
 23fb43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb440:	4604      	mov	r4, r0
 23fb442:	460d      	mov	r5, r1
 23fb444:	4616      	mov	r6, r2
 23fb446:	461f      	mov	r7, r3

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fb448:	f8df 804c 	ldr.w	r8, [pc, #76]	; 23fb498 <_ZN15Adafruit_SPITFTC1Ettaaa+0x5c>
 23fb44c:	b086      	sub	sp, #24
 23fb44e:	e8d8 0f8f 	ldab	r0, [r8]
 23fb452:	f010 0101 	ands.w	r1, r0, #1
 23fb456:	d10b      	bne.n	23fb470 <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23fb458:	4640      	mov	r0, r8
 23fb45a:	9105      	str	r1, [sp, #20]
 23fb45c:	f7ff f920 	bl	23fa6a0 <__cxa_guard_acquire>
 23fb460:	9905      	ldr	r1, [sp, #20]
 23fb462:	b128      	cbz	r0, 23fb470 <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23fb464:	480b      	ldr	r0, [pc, #44]	; (23fb494 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23fb466:	f002 f825 	bl	23fd4b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fb46a:	4640      	mov	r0, r8
 23fb46c:	f7ff f91d 	bl	23fa6aa <__cxa_guard_release>
  int8_t dc, int8_t rst) : Adafruit_SPITFT(w, h, &SPI, cs, dc, rst) {
 23fb470:	f99d 3034 	ldrsb.w	r3, [sp, #52]	; 0x34
 23fb474:	4632      	mov	r2, r6
 23fb476:	9302      	str	r3, [sp, #8]
 23fb478:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
 23fb47c:	4629      	mov	r1, r5
 23fb47e:	e9cd 7300 	strd	r7, r3, [sp]
 23fb482:	4620      	mov	r0, r4
 23fb484:	4b03      	ldr	r3, [pc, #12]	; (23fb494 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23fb486:	f7ff ffb7 	bl	23fb3f8 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>
}
 23fb48a:	4620      	mov	r0, r4
 23fb48c:	b006      	add	sp, #24
 23fb48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fb492:	bf00      	nop
 23fb494:	1007ae84 	.word	0x1007ae84
 23fb498:	1007ae80 	.word	0x1007ae80

023fb49c <_ZN15Adafruit_SPITFT7initSPIEmh>:
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23fb49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb49e:	4604      	mov	r4, r0
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23fb4a0:	4f48      	ldr	r7, [pc, #288]	; (23fb5c4 <_ZN15Adafruit_SPITFT7initSPIEmh+0x128>)
    if(_cs >= 0) {
 23fb4a2:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23fb4a6:	2900      	cmp	r1, #0
 23fb4a8:	bf18      	it	ne
 23fb4aa:	460f      	movne	r7, r1
    if(_cs >= 0) {
 23fb4ac:	2800      	cmp	r0, #0
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23fb4ae:	4616      	mov	r6, r2
    if(_cs >= 0) {
 23fb4b0:	db09      	blt.n	23fb4c6 <_ZN15Adafruit_SPITFT7initSPIEmh+0x2a>
        pinMode(_cs, OUTPUT);
 23fb4b2:	2101      	movs	r1, #1
 23fb4b4:	b280      	uxth	r0, r0
 23fb4b6:	f002 fac7 	bl	23fda48 <pinMode>
        digitalWrite(_cs, HIGH); // Deselect
 23fb4ba:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23fb4be:	2101      	movs	r1, #1
 23fb4c0:	b280      	uxth	r0, r0
 23fb4c2:	f002 fad2 	bl	23fda6a <digitalWrite>
    pinMode(_dc, OUTPUT);
 23fb4c6:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23fb4ca:	2101      	movs	r1, #1
 23fb4cc:	b280      	uxth	r0, r0
 23fb4ce:	f002 fabb 	bl	23fda48 <pinMode>
    digitalWrite(_dc, HIGH); // Data mode
 23fb4d2:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23fb4d6:	2101      	movs	r1, #1
 23fb4d8:	b280      	uxth	r0, r0
 23fb4da:	f002 fac6 	bl	23fda6a <digitalWrite>
    if(connection == TFT_HARD_SPI) {
 23fb4de:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
 23fb4e2:	bb85      	cbnz	r5, 23fb546 <_ZN15Adafruit_SPITFT7initSPIEmh+0xaa>
    SPI_CLK_SYSTEM = 0,         // represents the system clock speed
    SPI_CLK_ARDUINO = 16*MHZ,
};

namespace particle {
class SPISettings : public Printable {
 23fb4e4:	2301      	movs	r3, #1
            hwspi._spi->begin();
 23fb4e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb4e8:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 23fb4ec:	6327      	str	r7, [r4, #48]	; 0x30
 23fb4ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 23fb4f2:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        hwspi._mode    = spiMode; // Save spiMode value for later
 23fb4f6:	63a6      	str	r6, [r4, #56]	; 0x38
            hwspi._spi->begin();
 23fb4f8:	f001 ffe6 	bl	23fd4c8 <_ZN8SPIClass5beginEv>
    if(_rst >= 0) {
 23fb4fc:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fb500:	2800      	cmp	r0, #0
 23fb502:	db5e      	blt.n	23fb5c2 <_ZN15Adafruit_SPITFT7initSPIEmh+0x126>
        pinMode(_rst, OUTPUT);
 23fb504:	2101      	movs	r1, #1
 23fb506:	b280      	uxth	r0, r0
 23fb508:	f002 fa9e 	bl	23fda48 <pinMode>
        digitalWrite(_rst, HIGH);
 23fb50c:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fb510:	2101      	movs	r1, #1
 23fb512:	b280      	uxth	r0, r0
 23fb514:	f002 faa9 	bl	23fda6a <digitalWrite>
        delay(100);
 23fb518:	2064      	movs	r0, #100	; 0x64
 23fb51a:	f001 fa97 	bl	23fca4c <delay>
        digitalWrite(_rst, LOW);
 23fb51e:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fb522:	2100      	movs	r1, #0
 23fb524:	b280      	uxth	r0, r0
 23fb526:	f002 faa0 	bl	23fda6a <digitalWrite>
        delay(100);
 23fb52a:	2064      	movs	r0, #100	; 0x64
 23fb52c:	f001 fa8e 	bl	23fca4c <delay>
        digitalWrite(_rst, HIGH);
 23fb530:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fb534:	2101      	movs	r1, #1
 23fb536:	b280      	uxth	r0, r0
 23fb538:	f002 fa97 	bl	23fda6a <digitalWrite>
}
 23fb53c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        delay(200);
 23fb540:	20c8      	movs	r0, #200	; 0xc8
 23fb542:	f001 ba83 	b.w	23fca4c <delay>
    } else if(connection == TFT_SOFT_SPI) {
 23fb546:	2d01      	cmp	r5, #1
 23fb548:	d120      	bne.n	23fb58c <_ZN15Adafruit_SPITFT7initSPIEmh+0xf0>
        pinMode(swspi._mosi, OUTPUT);
 23fb54a:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fb54e:	4629      	mov	r1, r5
 23fb550:	b280      	uxth	r0, r0
 23fb552:	f002 fa79 	bl	23fda48 <pinMode>
        digitalWrite(swspi._mosi, LOW);
 23fb556:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fb55a:	2100      	movs	r1, #0
 23fb55c:	b280      	uxth	r0, r0
 23fb55e:	f002 fa84 	bl	23fda6a <digitalWrite>
        pinMode(swspi._sck, OUTPUT);
 23fb562:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb566:	4629      	mov	r1, r5
 23fb568:	b280      	uxth	r0, r0
 23fb56a:	f002 fa6d 	bl	23fda48 <pinMode>
        digitalWrite(swspi._sck, LOW);
 23fb56e:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb572:	2100      	movs	r1, #0
 23fb574:	b280      	uxth	r0, r0
 23fb576:	f002 fa78 	bl	23fda6a <digitalWrite>
        if(swspi._miso >= 0) {
 23fb57a:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fb57e:	2800      	cmp	r0, #0
 23fb580:	dbbc      	blt.n	23fb4fc <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(swspi._miso, INPUT);
 23fb582:	2100      	movs	r1, #0
 23fb584:	b280      	uxth	r0, r0
 23fb586:	f002 fa5f 	bl	23fda48 <pinMode>
 23fb58a:	e7b7      	b.n	23fb4fc <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
        pinMode(tft8._wr, OUTPUT);
 23fb58c:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fb590:	2101      	movs	r1, #1
 23fb592:	b280      	uxth	r0, r0
 23fb594:	f002 fa58 	bl	23fda48 <pinMode>
        digitalWrite(tft8._wr, HIGH);
 23fb598:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fb59c:	2101      	movs	r1, #1
 23fb59e:	b280      	uxth	r0, r0
 23fb5a0:	f002 fa63 	bl	23fda6a <digitalWrite>
        if(tft8._rd >= 0) {
 23fb5a4:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb5a8:	2800      	cmp	r0, #0
 23fb5aa:	dba7      	blt.n	23fb4fc <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(tft8._rd, OUTPUT);
 23fb5ac:	2101      	movs	r1, #1
 23fb5ae:	b280      	uxth	r0, r0
 23fb5b0:	f002 fa4a 	bl	23fda48 <pinMode>
            digitalWrite(tft8._rd, HIGH);
 23fb5b4:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb5b8:	2101      	movs	r1, #1
 23fb5ba:	b280      	uxth	r0, r0
 23fb5bc:	f002 fa55 	bl	23fda6a <digitalWrite>
 23fb5c0:	e79c      	b.n	23fb4fc <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
}
 23fb5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fb5c4:	00f42400 	.word	0x00f42400

023fb5c8 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23fb5c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23fb5cc:	b923      	cbnz	r3, 23fb5d8 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x10>
        hwspi._spi->beginTransaction(hwspi.settings);
 23fb5ce:	f100 0128 	add.w	r1, r0, #40	; 0x28
 23fb5d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fb5d4:	f001 bfa6 	b.w	23fd524 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
}
 23fb5d8:	4770      	bx	lr

023fb5da <_ZN15Adafruit_SPITFT10startWriteEv>:
void Adafruit_SPITFT::startWrite(void) {
 23fb5da:	b510      	push	{r4, lr}
 23fb5dc:	4604      	mov	r4, r0
    SPI_BEGIN_TRANSACTION();
 23fb5de:	f7ff fff3 	bl	23fb5c8 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    if(_cs >= 0) SPI_CS_LOW();
 23fb5e2:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23fb5e6:	2800      	cmp	r0, #0
 23fb5e8:	db05      	blt.n	23fb5f6 <_ZN15Adafruit_SPITFT10startWriteEv+0x1c>
}
 23fb5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_cs, LOW);
 23fb5ee:	2100      	movs	r1, #0
 23fb5f0:	b280      	uxth	r0, r0
 23fb5f2:	f002 ba3a 	b.w	23fda6a <digitalWrite>
 23fb5f6:	bd10      	pop	{r4, pc}

023fb5f8 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23fb5f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23fb5fc:	b913      	cbnz	r3, 23fb604 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv+0xc>
        hwspi._spi->endTransaction();
 23fb5fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fb600:	f001 bf76 	b.w	23fd4f0 <_ZN8SPIClass14endTransactionEv>
}
 23fb604:	4770      	bx	lr

023fb606 <_ZN15Adafruit_SPITFT8endWriteEv>:
void Adafruit_SPITFT::endWrite(void) {
 23fb606:	b510      	push	{r4, lr}
 23fb608:	4604      	mov	r4, r0
    if(_cs >= 0) SPI_CS_HIGH();
 23fb60a:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
 23fb60e:	2800      	cmp	r0, #0
 23fb610:	db03      	blt.n	23fb61a <_ZN15Adafruit_SPITFT8endWriteEv+0x14>
        digitalWrite(_cs, HIGH);
 23fb612:	2101      	movs	r1, #1
 23fb614:	b280      	uxth	r0, r0
 23fb616:	f002 fa28 	bl	23fda6a <digitalWrite>
    SPI_END_TRANSACTION();
 23fb61a:	4620      	mov	r0, r4
 23fb61c:	f7ff ffec 	bl	23fb5f8 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>
}
 23fb620:	bd10      	pop	{r4, pc}

023fb622 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>:

/*!
    @brief  Set the WR line LOW, then HIGH. Used for parallel-connected
            interfaces when writing data.
*/
inline void Adafruit_SPITFT::TFT_WR_STROBE(void) {
 23fb622:	b510      	push	{r4, lr}
 23fb624:	4604      	mov	r4, r0
 #else  // !HAS_PORT_SET_CLR
    *tft8.wrPort   &= tft8.wrPinMaskClr;
    *tft8.wrPort   |= tft8.wrPinMaskSet;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(tft8._wr, LOW);
 23fb626:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 23fb62a:	2100      	movs	r1, #0
 23fb62c:	b280      	uxth	r0, r0
 23fb62e:	f002 fa1c 	bl	23fda6a <digitalWrite>
    digitalWrite(tft8._wr, HIGH);
 23fb632:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fb636:	2101      	movs	r1, #1
#endif // end !USE_FAST_PINIO
}
 23fb638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(tft8._wr, HIGH);
 23fb63c:	b280      	uxth	r0, r0
 23fb63e:	f002 ba14 	b.w	23fda6a <digitalWrite>

023fb642 <_ZN15Adafruit_SPITFT10writeColorEtm>:
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {
 23fb642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb646:	4605      	mov	r5, r0
 23fb648:	460e      	mov	r6, r1
    if(!len) return; // Avoid 0-byte transfers
 23fb64a:	4614      	mov	r4, r2
 23fb64c:	b17a      	cbz	r2, 23fb66e <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
    if(connection == TFT_HARD_SPI) {
 23fb64e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    uint8_t hi = color >> 8, lo = color;
 23fb652:	ea4f 2811 	mov.w	r8, r1, lsr #8
 23fb656:	b2cf      	uxtb	r7, r1
    if(connection == TFT_HARD_SPI) {
 23fb658:	b95b      	cbnz	r3, 23fb672 <_ZN15Adafruit_SPITFT10writeColorEtm+0x30>
            hwspi._spi->transfer(hi);
 23fb65a:	4641      	mov	r1, r8
 23fb65c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fb65e:	f001 ffcf 	bl	23fd600 <_ZN8SPIClass8transferEh>
            hwspi._spi->transfer(lo);
 23fb662:	4639      	mov	r1, r7
 23fb664:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fb666:	f001 ffcb 	bl	23fd600 <_ZN8SPIClass8transferEh>
        while(len--) {
 23fb66a:	3c01      	subs	r4, #1
 23fb66c:	d1f5      	bne.n	23fb65a <_ZN15Adafruit_SPITFT10writeColorEtm+0x18>
}
 23fb66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(connection == TFT_SOFT_SPI) {
 23fb672:	2b01      	cmp	r3, #1
 23fb674:	d11e      	bne.n	23fb6b4 <_ZN15Adafruit_SPITFT10writeColorEtm+0x72>
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fb676:	46b0      	mov	r8, r6
 23fb678:	2710      	movs	r7, #16
                if(x & 0x8000) SPI_MOSI_HIGH();
 23fb67a:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 23fb67e:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23fb682:	d014      	beq.n	23fb6ae <_ZN15Adafruit_SPITFT10writeColorEtm+0x6c>
 23fb684:	f7ff feac 	bl	23fb3e0 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
                SPI_SCK_HIGH();
 23fb688:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fb68c:	3f01      	subs	r7, #1
                SPI_SCK_HIGH();
 23fb68e:	f7ff fe9f 	bl	23fb3d0 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
                x <<= 1;
 23fb692:	ea4f 0848 	mov.w	r8, r8, lsl #1
                SPI_SCK_LOW();
 23fb696:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fb69a:	b2bf      	uxth	r7, r7
                SPI_SCK_LOW();
 23fb69c:	f7ff fe94 	bl	23fb3c8 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
                x <<= 1;
 23fb6a0:	fa1f f888 	uxth.w	r8, r8
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fb6a4:	2f00      	cmp	r7, #0
 23fb6a6:	d1e8      	bne.n	23fb67a <_ZN15Adafruit_SPITFT10writeColorEtm+0x38>
        while(len--) {
 23fb6a8:	3c01      	subs	r4, #1
 23fb6aa:	d1e4      	bne.n	23fb676 <_ZN15Adafruit_SPITFT10writeColorEtm+0x34>
 23fb6ac:	e7df      	b.n	23fb66e <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                else           SPI_MOSI_LOW();
 23fb6ae:	f7ff fe93 	bl	23fb3d8 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fb6b2:	e7e9      	b.n	23fb688 <_ZN15Adafruit_SPITFT10writeColorEtm+0x46>
        if(hi == lo) {
 23fb6b4:	45b8      	cmp	r8, r7
 23fb6b6:	d0da      	beq.n	23fb66e <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                TFT_WR_STROBE();
 23fb6b8:	4628      	mov	r0, r5
 23fb6ba:	f7ff ffb2 	bl	23fb622 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
            while(len--) {
 23fb6be:	3c01      	subs	r4, #1
 23fb6c0:	d1fa      	bne.n	23fb6b8 <_ZN15Adafruit_SPITFT10writeColorEtm+0x76>
 23fb6c2:	e7d4      	b.n	23fb66e <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>

023fb6c4 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fb6c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fb6c8:	461d      	mov	r5, r3
 23fb6ca:	4604      	mov	r4, r0
    setAddrWindow(x, y, w, h);
 23fb6cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  int16_t w, int16_t h, uint16_t color) {
 23fb6d0:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    setAddrWindow(x, y, w, h);
 23fb6d4:	9300      	str	r3, [sp, #0]
 23fb6d6:	6803      	ldr	r3, [r0, #0]
 23fb6d8:	b292      	uxth	r2, r2
 23fb6da:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
 23fb6de:	b289      	uxth	r1, r1
 23fb6e0:	b2ab      	uxth	r3, r5
  int16_t w, int16_t h, uint16_t color) {
 23fb6e2:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    setAddrWindow(x, y, w, h);
 23fb6e6:	47c0      	blx	r8
    writeColor(color, (uint32_t)w * h);
 23fb6e8:	4631      	mov	r1, r6
 23fb6ea:	4620      	mov	r0, r4
 23fb6ec:	fb05 f207 	mul.w	r2, r5, r7
}
 23fb6f0:	b002      	add	sp, #8
 23fb6f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    writeColor(color, (uint32_t)w * h);
 23fb6f6:	f7ff bfa4 	b.w	23fb642 <_ZN15Adafruit_SPITFT10writeColorEtm>

023fb6fa <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fb6fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fb6fe:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
    if(w && h) {                            // Nonzero width and height?
 23fb702:	2b00      	cmp	r3, #0
 23fb704:	d046      	beq.n	23fb794 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
 23fb706:	2c00      	cmp	r4, #0
 23fb708:	d044      	beq.n	23fb794 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
        if(w < 0) {                         // If negative width...
 23fb70a:	2b00      	cmp	r3, #0
 23fb70c:	da05      	bge.n	23fb71a <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x20>
            x +=  w + 1;                    //   Move X to left edge
 23fb70e:	3101      	adds	r1, #1
 23fb710:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                        //   Use positive width
 23fb714:	425b      	negs	r3, r3
            x +=  w + 1;                    //   Move X to left edge
 23fb716:	b209      	sxth	r1, r1
            w  = -w;                        //   Use positive width
 23fb718:	b21b      	sxth	r3, r3
        if(x < _width) {                    // Not off right
 23fb71a:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 23fb71e:	428e      	cmp	r6, r1
 23fb720:	dd38      	ble.n	23fb794 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
            if(h < 0) {                     // If negative height...
 23fb722:	2c00      	cmp	r4, #0
 23fb724:	da05      	bge.n	23fb732 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x38>
                y +=  h + 1;                //   Move Y to top edge
 23fb726:	3201      	adds	r2, #1
 23fb728:	fa12 f284 	uxtah	r2, r2, r4
                h  = -h;                    //   Use positive height
 23fb72c:	4264      	negs	r4, r4
                y +=  h + 1;                //   Move Y to top edge
 23fb72e:	b212      	sxth	r2, r2
                h  = -h;                    //   Use positive height
 23fb730:	b224      	sxth	r4, r4
            if(y < _height) {               // Not off bottom
 23fb732:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
 23fb736:	4295      	cmp	r5, r2
 23fb738:	dd2c      	ble.n	23fb794 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                int16_t x2 = x + w - 1;
 23fb73a:	eb01 0803 	add.w	r8, r1, r3
 23fb73e:	fa1f f888 	uxth.w	r8, r8
 23fb742:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 23fb746:	fa0f fc8c 	sxth.w	ip, ip
                if(x2 >= 0) {               // Not off left
 23fb74a:	f1bc 0f00 	cmp.w	ip, #0
 23fb74e:	db21      	blt.n	23fb794 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                    int16_t y2 = y + h - 1;
 23fb750:	eb02 0e04 	add.w	lr, r2, r4
 23fb754:	fa1f fe8e 	uxth.w	lr, lr
 23fb758:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
 23fb75c:	b23f      	sxth	r7, r7
                    if(y2 >= 0) {           // Not off top
 23fb75e:	2f00      	cmp	r7, #0
 23fb760:	db18      	blt.n	23fb794 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fb762:	2900      	cmp	r1, #0
 23fb764:	bfbc      	itt	lt
 23fb766:	2100      	movlt	r1, #0
 23fb768:	fa0f f388 	sxthlt.w	r3, r8
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fb76c:	2a00      	cmp	r2, #0
 23fb76e:	bfbc      	itt	lt
 23fb770:	2200      	movlt	r2, #0
 23fb772:	fa0f f48e 	sxthlt.w	r4, lr
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fb776:	4566      	cmp	r6, ip
 23fb778:	bfdc      	itt	le
 23fb77a:	1a73      	suble	r3, r6, r1
 23fb77c:	b21b      	sxthle	r3, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb77e:	42bd      	cmp	r5, r7
 23fb780:	bfd8      	it	le
 23fb782:	1aac      	suble	r4, r5, r2
                        writeFillRectPreclipped(x, y, w, h, color);
 23fb784:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb788:	bfd8      	it	le
 23fb78a:	b224      	sxthle	r4, r4
                        writeFillRectPreclipped(x, y, w, h, color);
 23fb78c:	e9cd 4500 	strd	r4, r5, [sp]
 23fb790:	f7ff ff98 	bl	23fb6c4 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fb794:	b002      	add	sp, #8
 23fb796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb79a <_ZN15Adafruit_SPITFT8fillRectEsssst>:
  uint16_t color) {
 23fb79a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fb79e:	4680      	mov	r8, r0
 23fb7a0:	460c      	mov	r4, r1
 23fb7a2:	4615      	mov	r5, r2
    if(w && h) {                            // Nonzero width and height?
 23fb7a4:	461e      	mov	r6, r3
  uint16_t color) {
 23fb7a6:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fb7aa:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if(w && h) {                            // Nonzero width and height?
 23fb7ae:	2b00      	cmp	r3, #0
 23fb7b0:	d052      	beq.n	23fb858 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
 23fb7b2:	2f00      	cmp	r7, #0
 23fb7b4:	d050      	beq.n	23fb858 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
        if(w < 0) {                         // If negative width...
 23fb7b6:	2b00      	cmp	r3, #0
 23fb7b8:	da05      	bge.n	23fb7c6 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x2c>
            x +=  w + 1;                    //   Move X to left edge
 23fb7ba:	3401      	adds	r4, #1
 23fb7bc:	fa14 f483 	uxtah	r4, r4, r3
            w  = -w;                        //   Use positive width
 23fb7c0:	425e      	negs	r6, r3
            x +=  w + 1;                    //   Move X to left edge
 23fb7c2:	b224      	sxth	r4, r4
            w  = -w;                        //   Use positive width
 23fb7c4:	b236      	sxth	r6, r6
        if(x < _width) {                    // Not off right
 23fb7c6:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 23fb7ca:	42a3      	cmp	r3, r4
 23fb7cc:	dd44      	ble.n	23fb858 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
            if(h < 0) {                     // If negative height...
 23fb7ce:	2f00      	cmp	r7, #0
 23fb7d0:	da05      	bge.n	23fb7de <_ZN15Adafruit_SPITFT8fillRectEsssst+0x44>
                y +=  h + 1;                //   Move Y to top edge
 23fb7d2:	3501      	adds	r5, #1
 23fb7d4:	fa15 f587 	uxtah	r5, r5, r7
                h  = -h;                    //   Use positive height
 23fb7d8:	427f      	negs	r7, r7
                y +=  h + 1;                //   Move Y to top edge
 23fb7da:	b22d      	sxth	r5, r5
                h  = -h;                    //   Use positive height
 23fb7dc:	b23f      	sxth	r7, r7
            if(y < _height) {               // Not off bottom
 23fb7de:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 23fb7e2:	42aa      	cmp	r2, r5
 23fb7e4:	dd38      	ble.n	23fb858 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                int16_t x2 = x + w - 1;
 23fb7e6:	eb04 0e06 	add.w	lr, r4, r6
 23fb7ea:	fa1f fe8e 	uxth.w	lr, lr
 23fb7ee:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 23fb7f2:	b200      	sxth	r0, r0
                if(x2 >= 0) {               // Not off left
 23fb7f4:	2800      	cmp	r0, #0
 23fb7f6:	db2f      	blt.n	23fb858 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                    int16_t y2 = y + h - 1;
 23fb7f8:	eb05 0c07 	add.w	ip, r5, r7
 23fb7fc:	fa1f fc8c 	uxth.w	ip, ip
 23fb800:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 23fb804:	b209      	sxth	r1, r1
                    if(y2 >= 0) {           // Not off top
 23fb806:	2900      	cmp	r1, #0
 23fb808:	db26      	blt.n	23fb858 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fb80a:	2c00      	cmp	r4, #0
 23fb80c:	bfbc      	itt	lt
 23fb80e:	2400      	movlt	r4, #0
 23fb810:	fa0f f68e 	sxthlt.w	r6, lr
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fb814:	2d00      	cmp	r5, #0
 23fb816:	bfbc      	itt	lt
 23fb818:	2500      	movlt	r5, #0
 23fb81a:	fa0f f78c 	sxthlt.w	r7, ip
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fb81e:	4283      	cmp	r3, r0
 23fb820:	bfdc      	itt	le
 23fb822:	1b1b      	suble	r3, r3, r4
 23fb824:	b21e      	sxthle	r6, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb826:	428a      	cmp	r2, r1
                        startWrite();
 23fb828:	f8d8 3000 	ldr.w	r3, [r8]
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb82c:	bfdc      	itt	le
 23fb82e:	1b52      	suble	r2, r2, r5
 23fb830:	b217      	sxthle	r7, r2
                        startWrite();
 23fb832:	4640      	mov	r0, r8
 23fb834:	695b      	ldr	r3, [r3, #20]
 23fb836:	4798      	blx	r3
                        writeFillRectPreclipped(x, y, w, h, color);
 23fb838:	4633      	mov	r3, r6
 23fb83a:	4640      	mov	r0, r8
 23fb83c:	462a      	mov	r2, r5
 23fb83e:	4621      	mov	r1, r4
 23fb840:	e9cd 7900 	strd	r7, r9, [sp]
 23fb844:	f7ff ff3e 	bl	23fb6c4 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                        endWrite();
 23fb848:	4640      	mov	r0, r8
 23fb84a:	f8d8 3000 	ldr.w	r3, [r8]
 23fb84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb850:	b003      	add	sp, #12
 23fb852:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                        endWrite();
 23fb856:	4718      	bx	r3
}
 23fb858:	b003      	add	sp, #12
 23fb85a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fb85e <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
  uint16_t color) {
 23fb85e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fb862:	1e17      	subs	r7, r2, #0
  uint16_t color) {
 23fb864:	4606      	mov	r6, r0
 23fb866:	460c      	mov	r4, r1
 23fb868:	461d      	mov	r5, r3
 23fb86a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fb86e:	db33      	blt.n	23fb8d8 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23fb870:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fb874:	42bb      	cmp	r3, r7
 23fb876:	dd2f      	ble.n	23fb8d8 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23fb878:	2d00      	cmp	r5, #0
 23fb87a:	d02d      	beq.n	23fb8d8 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
        if(w < 0) {                      // If negative width...
 23fb87c:	da05      	bge.n	23fb88a <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
            x +=  w + 1;                 //   Move X to left edge
 23fb87e:	3401      	adds	r4, #1
 23fb880:	fa14 f485 	uxtah	r4, r4, r5
            w  = -w;                     //   Use positive width
 23fb884:	426d      	negs	r5, r5
            x +=  w + 1;                 //   Move X to left edge
 23fb886:	b224      	sxth	r4, r4
            w  = -w;                     //   Use positive width
 23fb888:	b22d      	sxth	r5, r5
        if(x < _width) {                 // Not off right
 23fb88a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 23fb88e:	42a3      	cmp	r3, r4
 23fb890:	dd22      	ble.n	23fb8d8 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
            int16_t x2 = x + w - 1;
 23fb892:	1961      	adds	r1, r4, r5
 23fb894:	b289      	uxth	r1, r1
 23fb896:	1e4a      	subs	r2, r1, #1
 23fb898:	b212      	sxth	r2, r2
            if(x2 >= 0) {                // Not off left
 23fb89a:	2a00      	cmp	r2, #0
 23fb89c:	db1c      	blt.n	23fb8d8 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fb89e:	2c00      	cmp	r4, #0
 23fb8a0:	bfbc      	itt	lt
 23fb8a2:	2400      	movlt	r4, #0
 23fb8a4:	b20d      	sxthlt	r5, r1
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fb8a6:	4293      	cmp	r3, r2
 23fb8a8:	bfdc      	itt	le
 23fb8aa:	1b1b      	suble	r3, r3, r4
 23fb8ac:	b21d      	sxthle	r5, r3
                startWrite();
 23fb8ae:	6833      	ldr	r3, [r6, #0]
 23fb8b0:	4630      	mov	r0, r6
 23fb8b2:	695b      	ldr	r3, [r3, #20]
 23fb8b4:	4798      	blx	r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23fb8b6:	2301      	movs	r3, #1
 23fb8b8:	4630      	mov	r0, r6
 23fb8ba:	9300      	str	r3, [sp, #0]
 23fb8bc:	463a      	mov	r2, r7
 23fb8be:	462b      	mov	r3, r5
 23fb8c0:	4621      	mov	r1, r4
 23fb8c2:	f8cd 8004 	str.w	r8, [sp, #4]
 23fb8c6:	f7ff fefd 	bl	23fb6c4 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23fb8ca:	4630      	mov	r0, r6
 23fb8cc:	6833      	ldr	r3, [r6, #0]
 23fb8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb8d0:	b002      	add	sp, #8
 23fb8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23fb8d6:	4718      	bx	r3
}
 23fb8d8:	b002      	add	sp, #8
 23fb8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb8de <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
  uint16_t color) {
 23fb8de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fb8e2:	1e0f      	subs	r7, r1, #0
  uint16_t color) {
 23fb8e4:	4606      	mov	r6, r0
 23fb8e6:	4614      	mov	r4, r2
 23fb8e8:	461d      	mov	r5, r3
 23fb8ea:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fb8ee:	db31      	blt.n	23fb954 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23fb8f0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fb8f4:	42bb      	cmp	r3, r7
 23fb8f6:	dd2d      	ble.n	23fb954 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23fb8f8:	2d00      	cmp	r5, #0
 23fb8fa:	d02b      	beq.n	23fb954 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
        if(h < 0) {                     // If negative height...
 23fb8fc:	da05      	bge.n	23fb90a <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
            y +=  h + 1;                //   Move Y to top edge
 23fb8fe:	3401      	adds	r4, #1
 23fb900:	fa14 f485 	uxtah	r4, r4, r5
            h  = -h;                    //   Use positive height
 23fb904:	426d      	negs	r5, r5
            y +=  h + 1;                //   Move Y to top edge
 23fb906:	b224      	sxth	r4, r4
            h  = -h;                    //   Use positive height
 23fb908:	b22d      	sxth	r5, r5
        if(y < _height) {               // Not off bottom
 23fb90a:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 23fb90e:	42a3      	cmp	r3, r4
 23fb910:	dd20      	ble.n	23fb954 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
            int16_t y2 = y + h - 1;
 23fb912:	1961      	adds	r1, r4, r5
 23fb914:	b289      	uxth	r1, r1
 23fb916:	1e4a      	subs	r2, r1, #1
 23fb918:	b212      	sxth	r2, r2
            if(y2 >= 0) {               // Not off top
 23fb91a:	2a00      	cmp	r2, #0
 23fb91c:	db1a      	blt.n	23fb954 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fb91e:	2c00      	cmp	r4, #0
 23fb920:	bfbc      	itt	lt
 23fb922:	2400      	movlt	r4, #0
 23fb924:	b20d      	sxthlt	r5, r1
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb926:	4293      	cmp	r3, r2
 23fb928:	bfdc      	itt	le
 23fb92a:	1b1b      	suble	r3, r3, r4
 23fb92c:	b21d      	sxthle	r5, r3
                startWrite();
 23fb92e:	6833      	ldr	r3, [r6, #0]
 23fb930:	4630      	mov	r0, r6
 23fb932:	695b      	ldr	r3, [r3, #20]
 23fb934:	4798      	blx	r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fb936:	4630      	mov	r0, r6
 23fb938:	2301      	movs	r3, #1
 23fb93a:	4622      	mov	r2, r4
 23fb93c:	4639      	mov	r1, r7
 23fb93e:	e9cd 5800 	strd	r5, r8, [sp]
 23fb942:	f7ff febf 	bl	23fb6c4 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23fb946:	4630      	mov	r0, r6
 23fb948:	6833      	ldr	r3, [r6, #0]
 23fb94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb94c:	b002      	add	sp, #8
 23fb94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23fb952:	4718      	bx	r3
}
 23fb954:	b002      	add	sp, #8
 23fb956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb95a <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fb95a:	2a00      	cmp	r2, #0
  uint16_t color) {
 23fb95c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fb95e:	db26      	blt.n	23fb9ae <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23fb960:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fb964:	4294      	cmp	r4, r2
 23fb966:	dd22      	ble.n	23fb9ae <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23fb968:	2b00      	cmp	r3, #0
 23fb96a:	d020      	beq.n	23fb9ae <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
        if(w < 0) {                      // If negative width...
 23fb96c:	da05      	bge.n	23fb97a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x20>
            x +=  w + 1;                 //   Move X to left edge
 23fb96e:	3101      	adds	r1, #1
 23fb970:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                     //   Use positive width
 23fb974:	425b      	negs	r3, r3
            x +=  w + 1;                 //   Move X to left edge
 23fb976:	b209      	sxth	r1, r1
            w  = -w;                     //   Use positive width
 23fb978:	b21b      	sxth	r3, r3
        if(x < _width) {                 // Not off right
 23fb97a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fb97e:	428c      	cmp	r4, r1
 23fb980:	dd15      	ble.n	23fb9ae <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
            int16_t x2 = x + w - 1;
 23fb982:	18ce      	adds	r6, r1, r3
 23fb984:	b2b6      	uxth	r6, r6
 23fb986:	1e75      	subs	r5, r6, #1
 23fb988:	b22d      	sxth	r5, r5
            if(x2 >= 0) {                // Not off left
 23fb98a:	2d00      	cmp	r5, #0
 23fb98c:	db0f      	blt.n	23fb9ae <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fb98e:	2900      	cmp	r1, #0
 23fb990:	bfbc      	itt	lt
 23fb992:	2100      	movlt	r1, #0
 23fb994:	b233      	sxthlt	r3, r6
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fb996:	42ac      	cmp	r4, r5
 23fb998:	bfd8      	it	le
 23fb99a:	1a63      	suble	r3, r4, r1
                writeFillRectPreclipped(x, y, w, 1, color);
 23fb99c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fb9a0:	bfd8      	it	le
 23fb9a2:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23fb9a4:	9401      	str	r4, [sp, #4]
 23fb9a6:	2401      	movs	r4, #1
 23fb9a8:	9400      	str	r4, [sp, #0]
 23fb9aa:	f7ff fe8b 	bl	23fb6c4 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fb9ae:	b002      	add	sp, #8
 23fb9b0:	bd70      	pop	{r4, r5, r6, pc}

023fb9b2 <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
  uint16_t color) {
 23fb9b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fb9b4:	2900      	cmp	r1, #0
 23fb9b6:	db26      	blt.n	23fba06 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fb9b8:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fb9bc:	428c      	cmp	r4, r1
 23fb9be:	dd22      	ble.n	23fba06 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fb9c0:	2b00      	cmp	r3, #0
 23fb9c2:	d020      	beq.n	23fba06 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
        if(h < 0) {                     // If negative height...
 23fb9c4:	da05      	bge.n	23fb9d2 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x20>
            y +=  h + 1;                //   Move Y to top edge
 23fb9c6:	3201      	adds	r2, #1
 23fb9c8:	fa12 f283 	uxtah	r2, r2, r3
            h  = -h;                    //   Use positive height
 23fb9cc:	425b      	negs	r3, r3
            y +=  h + 1;                //   Move Y to top edge
 23fb9ce:	b212      	sxth	r2, r2
            h  = -h;                    //   Use positive height
 23fb9d0:	b21b      	sxth	r3, r3
        if(y < _height) {               // Not off bottom
 23fb9d2:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fb9d6:	4294      	cmp	r4, r2
 23fb9d8:	dd15      	ble.n	23fba06 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
            int16_t y2 = y + h - 1;
 23fb9da:	18d6      	adds	r6, r2, r3
 23fb9dc:	b2b6      	uxth	r6, r6
 23fb9de:	1e75      	subs	r5, r6, #1
 23fb9e0:	b22d      	sxth	r5, r5
            if(y2 >= 0) {               // Not off top
 23fb9e2:	2d00      	cmp	r5, #0
 23fb9e4:	db0f      	blt.n	23fba06 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fb9e6:	2a00      	cmp	r2, #0
 23fb9e8:	bfbc      	itt	lt
 23fb9ea:	2200      	movlt	r2, #0
 23fb9ec:	b233      	sxthlt	r3, r6
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb9ee:	42ac      	cmp	r4, r5
 23fb9f0:	bfd8      	it	le
 23fb9f2:	1aa3      	suble	r3, r4, r2
                writeFillRectPreclipped(x, y, 1, h, color);
 23fb9f4:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb9f8:	bfd8      	it	le
 23fb9fa:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fb9fc:	e9cd 3400 	strd	r3, r4, [sp]
 23fba00:	2301      	movs	r3, #1
 23fba02:	f7ff fe5f 	bl	23fb6c4 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fba06:	b002      	add	sp, #8
 23fba08:	bd70      	pop	{r4, r5, r6, pc}

023fba0a <_ZN15Adafruit_SPITFT8spiWriteEh>:
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fba0a:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fba0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fba10:	4604      	mov	r4, r0
 23fba12:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23fba14:	b923      	cbnz	r3, 23fba20 <_ZN15Adafruit_SPITFT8spiWriteEh+0x16>
}
 23fba16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(b);
 23fba1a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fba1c:	f001 bdf0 	b.w	23fd600 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fba20:	2b01      	cmp	r3, #1
 23fba22:	d118      	bne.n	23fba56 <_ZN15Adafruit_SPITFT8spiWriteEh+0x4c>
 23fba24:	2608      	movs	r6, #8
            if(b & 0x80) SPI_MOSI_HIGH();
 23fba26:	062b      	lsls	r3, r5, #24
 23fba28:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fba2c:	d510      	bpl.n	23fba50 <_ZN15Adafruit_SPITFT8spiWriteEh+0x46>
 23fba2e:	f7ff fcd7 	bl	23fb3e0 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fba32:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fba36:	f7ff fccb 	bl	23fb3d0 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<8; bit++) {
 23fba3a:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fba3c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fba40:	f7ff fcc2 	bl	23fb3c8 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            b <<= 1;
 23fba44:	006d      	lsls	r5, r5, #1
        for(uint8_t bit=0; bit<8; bit++) {
 23fba46:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            b <<= 1;
 23fba4a:	b2ed      	uxtb	r5, r5
        for(uint8_t bit=0; bit<8; bit++) {
 23fba4c:	d1eb      	bne.n	23fba26 <_ZN15Adafruit_SPITFT8spiWriteEh+0x1c>
}
 23fba4e:	bd70      	pop	{r4, r5, r6, pc}
            else         SPI_MOSI_LOW();
 23fba50:	f7ff fcc2 	bl	23fb3d8 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fba54:	e7ed      	b.n	23fba32 <_ZN15Adafruit_SPITFT8spiWriteEh+0x28>
        TFT_WR_STROBE();
 23fba56:	f7ff fde4 	bl	23fb622 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fba5a:	e7f8      	b.n	23fba4e <_ZN15Adafruit_SPITFT8spiWriteEh+0x44>

023fba5c <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23fba5c:	b513      	push	{r0, r1, r4, lr}
 23fba5e:	4604      	mov	r4, r0
    SPI_DC_LOW();
 23fba60:	f990 003f 	ldrsb.w	r0, [r0, #63]	; 0x3f
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23fba64:	9101      	str	r1, [sp, #4]
    SPI_DC_LOW();
 23fba66:	f7ff fcbf 	bl	23fb3e8 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>
    spiWrite(cmd);
 23fba6a:	4620      	mov	r0, r4
 23fba6c:	9901      	ldr	r1, [sp, #4]
 23fba6e:	f7ff ffcc 	bl	23fba0a <_ZN15Adafruit_SPITFT8spiWriteEh>
    SPI_DC_HIGH();
 23fba72:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
}
 23fba76:	b002      	add	sp, #8
 23fba78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SPI_DC_HIGH();
 23fba7c:	f7ff bcb8 	b.w	23fb3f0 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>

023fba80 <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
 23fba80:	b570      	push	{r4, r5, r6, lr}
 23fba82:	460d      	mov	r5, r1
    startWrite();
 23fba84:	6803      	ldr	r3, [r0, #0]
void Adafruit_SPITFT::invertDisplay(bool i) {
 23fba86:	4604      	mov	r4, r0
    startWrite();
 23fba88:	695b      	ldr	r3, [r3, #20]
 23fba8a:	4798      	blx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23fba8c:	b155      	cbz	r5, 23fbaa4 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x24>
 23fba8e:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 23fba92:	4620      	mov	r0, r4
 23fba94:	f7ff ffe2 	bl	23fba5c <_ZN15Adafruit_SPITFT12writeCommandEh>
    endWrite();
 23fba98:	6823      	ldr	r3, [r4, #0]
 23fba9a:	4620      	mov	r0, r4
}
 23fba9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    endWrite();
 23fbaa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbaa2:	4718      	bx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23fbaa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 23fbaa8:	e7f3      	b.n	23fba92 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x12>

023fbaaa <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>:
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23fbaaa:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fbaac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23fbab0:	4605      	mov	r5, r0
 23fbab2:	460c      	mov	r4, r1
    if(connection == TFT_HARD_SPI) {
 23fbab4:	b94b      	cbnz	r3, 23fbaca <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x20>
        hwspi._spi->transfer(w >> 8);
 23fbab6:	0a09      	lsrs	r1, r1, #8
 23fbab8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fbaba:	f001 fda1 	bl	23fd600 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(w);
 23fbabe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fbac0:	b2e1      	uxtb	r1, r4
}
 23fbac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(w);
 23fbac6:	f001 bd9b 	b.w	23fd600 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fbaca:	2b01      	cmp	r3, #1
 23fbacc:	d118      	bne.n	23fbb00 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x56>
 23fbace:	2610      	movs	r6, #16
            if(w & 0x8000) SPI_MOSI_HIGH();
 23fbad0:	0423      	lsls	r3, r4, #16
 23fbad2:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23fbad6:	d510      	bpl.n	23fbafa <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x50>
 23fbad8:	f7ff fc82 	bl	23fb3e0 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fbadc:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23fbae0:	f7ff fc76 	bl	23fb3d0 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<16; bit++) {
 23fbae4:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fbae6:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23fbaea:	f7ff fc6d 	bl	23fb3c8 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            w <<= 1;
 23fbaee:	0064      	lsls	r4, r4, #1
        for(uint8_t bit=0; bit<16; bit++) {
 23fbaf0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            w <<= 1;
 23fbaf4:	b2a4      	uxth	r4, r4
        for(uint8_t bit=0; bit<16; bit++) {
 23fbaf6:	d1eb      	bne.n	23fbad0 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x26>
}
 23fbaf8:	bd70      	pop	{r4, r5, r6, pc}
            else           SPI_MOSI_LOW();
 23fbafa:	f7ff fc6d 	bl	23fb3d8 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fbafe:	e7ed      	b.n	23fbadc <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x32>
        TFT_WR_STROBE();
 23fbb00:	f7ff fd8f 	bl	23fb622 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fbb04:	e7f8      	b.n	23fbaf8 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x4e>

023fbb06 <_ZN15Adafruit_SPITFT10writePixelEsst>:
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fbb06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fbb08:	2900      	cmp	r1, #0
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fbb0a:	4604      	mov	r4, r0
 23fbb0c:	461e      	mov	r6, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fbb0e:	db17      	blt.n	23fbb40 <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fbb10:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fbb14:	428b      	cmp	r3, r1
 23fbb16:	dd13      	ble.n	23fbb40 <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fbb18:	2a00      	cmp	r2, #0
 23fbb1a:	db11      	blt.n	23fbb40 <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fbb1c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fbb20:	4293      	cmp	r3, r2
 23fbb22:	dd0d      	ble.n	23fbb40 <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
        setAddrWindow(x, y, 1, 1);
 23fbb24:	2301      	movs	r3, #1
 23fbb26:	6805      	ldr	r5, [r0, #0]
 23fbb28:	9300      	str	r3, [sp, #0]
 23fbb2a:	6d6f      	ldr	r7, [r5, #84]	; 0x54
 23fbb2c:	b292      	uxth	r2, r2
 23fbb2e:	b289      	uxth	r1, r1
 23fbb30:	47b8      	blx	r7
        SPI_WRITE16(color);
 23fbb32:	4631      	mov	r1, r6
 23fbb34:	4620      	mov	r0, r4
}
 23fbb36:	b003      	add	sp, #12
 23fbb38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        SPI_WRITE16(color);
 23fbb3c:	f7ff bfb5 	b.w	23fbaaa <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
}
 23fbb40:	b003      	add	sp, #12
 23fbb42:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fbb44 <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fbb44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fbb48:	1e0d      	subs	r5, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fbb4a:	4604      	mov	r4, r0
 23fbb4c:	4616      	mov	r6, r2
 23fbb4e:	461f      	mov	r7, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fbb50:	db20      	blt.n	23fbb94 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fbb52:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fbb56:	42ab      	cmp	r3, r5
 23fbb58:	dd1c      	ble.n	23fbb94 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fbb5a:	2a00      	cmp	r2, #0
 23fbb5c:	db1a      	blt.n	23fbb94 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fbb5e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fbb62:	4293      	cmp	r3, r2
 23fbb64:	dd16      	ble.n	23fbb94 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
        startWrite();
 23fbb66:	6803      	ldr	r3, [r0, #0]
 23fbb68:	695b      	ldr	r3, [r3, #20]
 23fbb6a:	4798      	blx	r3
        setAddrWindow(x, y, 1, 1);
 23fbb6c:	2301      	movs	r3, #1
 23fbb6e:	6822      	ldr	r2, [r4, #0]
 23fbb70:	9300      	str	r3, [sp, #0]
 23fbb72:	4620      	mov	r0, r4
 23fbb74:	f8d2 8054 	ldr.w	r8, [r2, #84]	; 0x54
 23fbb78:	b2a9      	uxth	r1, r5
 23fbb7a:	b2b2      	uxth	r2, r6
 23fbb7c:	47c0      	blx	r8
        SPI_WRITE16(color);
 23fbb7e:	4620      	mov	r0, r4
 23fbb80:	4639      	mov	r1, r7
 23fbb82:	f7ff ff92 	bl	23fbaaa <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
        endWrite();
 23fbb86:	4620      	mov	r0, r4
 23fbb88:	6823      	ldr	r3, [r4, #0]
 23fbb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbb8c:	b002      	add	sp, #8
 23fbb8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        endWrite();
 23fbb92:	4718      	bx	r3
}
 23fbb94:	b002      	add	sp, #8
 23fbb96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fbb9a <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fbb9a:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fbb9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fbba0:	4604      	mov	r4, r0
 23fbba2:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23fbba4:	b99b      	cbnz	r3, 23fbbce <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x34>
        hwspi._spi->transfer(l >> 24);
 23fbba6:	0e09      	lsrs	r1, r1, #24
 23fbba8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fbbaa:	f001 fd29 	bl	23fd600 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 16);
 23fbbae:	f3c5 4107 	ubfx	r1, r5, #16, #8
 23fbbb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fbbb4:	f001 fd24 	bl	23fd600 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 8);
 23fbbb8:	f3c5 2107 	ubfx	r1, r5, #8, #8
 23fbbbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fbbbe:	f001 fd1f 	bl	23fd600 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l);
 23fbbc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fbbc4:	b2e9      	uxtb	r1, r5
}
 23fbbc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(l);
 23fbbca:	f001 bd19 	b.w	23fd600 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fbbce:	2b01      	cmp	r3, #1
 23fbbd0:	d118      	bne.n	23fbc04 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x6a>
 23fbbd2:	2620      	movs	r6, #32
            if(l & 0x80000000) SPI_MOSI_HIGH();
 23fbbd4:	2d00      	cmp	r5, #0
 23fbbd6:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fbbda:	da10      	bge.n	23fbbfe <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x64>
 23fbbdc:	f7ff fc00 	bl	23fb3e0 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fbbe0:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fbbe4:	f7ff fbf4 	bl	23fb3d0 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fbbe8:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fbbea:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fbbee:	f7ff fbeb 	bl	23fb3c8 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fbbf2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            l <<= 1;
 23fbbf6:	ea4f 0545 	mov.w	r5, r5, lsl #1
        for(uint8_t bit=0; bit<32; bit++) {
 23fbbfa:	d1eb      	bne.n	23fbbd4 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x3a>
}
 23fbbfc:	bd70      	pop	{r4, r5, r6, pc}
            else               SPI_MOSI_LOW();
 23fbbfe:	f7ff fbeb 	bl	23fb3d8 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fbc02:	e7ed      	b.n	23fbbe0 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x46>
        TFT_WR_STROBE();
 23fbc04:	f7ff fd0d 	bl	23fb622 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fbc08:	e7f8      	b.n	23fbbfc <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x62>

023fbc0a <_ZN15Adafruit_ST7789D1Ev>:

//#include "Adafruit_ST77xx.h"
#include "../lib/Adafruit_ST7735_RK/src/Adafruit_ST77xx.h"

/// Subclass of ST77XX type display for ST7789 TFT Driver
class Adafruit_ST7789 : public Adafruit_ST77xx {
 23fbc0a:	4770      	bx	lr

023fbc0c <_ZN15Adafruit_ST778911setRotationEh>:
*/
/**************************************************************************/
void Adafruit_ST7789::setRotation(uint8_t m) {
  uint8_t madctl = 0;

  rotation = m & 3; // can't be higher than 3
 23fbc0c:	f001 0103 	and.w	r1, r1, #3

  switch (rotation) {
 23fbc10:	2902      	cmp	r1, #2
void Adafruit_ST7789::setRotation(uint8_t m) {
 23fbc12:	b570      	push	{r4, r5, r6, lr}
 23fbc14:	4604      	mov	r4, r0
  rotation = m & 3; // can't be higher than 3
 23fbc16:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 23fbc18:	d024      	beq.n	23fbc64 <_ZN15Adafruit_ST778911setRotationEh+0x58>
 23fbc1a:	2903      	cmp	r1, #3
 23fbc1c:	d025      	beq.n	23fbc6a <_ZN15Adafruit_ST778911setRotationEh+0x5e>
 23fbc1e:	2901      	cmp	r1, #1
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 23fbc20:	bf14      	ite	ne
 23fbc22:	25c0      	movne	r5, #192	; 0xc0
     _xstart = _colstart;
     _ystart = _rowstart;
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fbc24:	25a0      	moveq	r5, #160	; 0xa0
 23fbc26:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 23fbc2a:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
     _xstart = _colstart;
 23fbc2e:	bf19      	ittee	ne
 23fbc30:	f8a0 3040 	strhne.w	r3, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fbc34:	f8a0 2042 	strhne.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fbc38:	f8a0 2040 	strheq.w	r2, [r0, #64]	; 0x40
     _ystart = _colstart;
 23fbc3c:	f8a0 3042 	strheq.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _xstart = 0;
     _ystart = 0;
     break;
  }
  startWrite();
 23fbc40:	6823      	ldr	r3, [r4, #0]
 23fbc42:	4620      	mov	r0, r4
 23fbc44:	695b      	ldr	r3, [r3, #20]
 23fbc46:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
 23fbc48:	4620      	mov	r0, r4
 23fbc4a:	2136      	movs	r1, #54	; 0x36
 23fbc4c:	f7ff ff06 	bl	23fba5c <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
 23fbc50:	4620      	mov	r0, r4
 23fbc52:	4629      	mov	r1, r5
 23fbc54:	f7ff fed9 	bl	23fba0a <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
 23fbc58:	6823      	ldr	r3, [r4, #0]
 23fbc5a:	4620      	mov	r0, r4
}
 23fbc5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
 23fbc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbc62:	4718      	bx	r3
     _xstart = 0;
 23fbc64:	2500      	movs	r5, #0
 23fbc66:	6405      	str	r5, [r0, #64]	; 0x40
     break;
 23fbc68:	e7ea      	b.n	23fbc40 <_ZN15Adafruit_ST778911setRotationEh+0x34>
     _xstart = 0;
 23fbc6a:	2300      	movs	r3, #0
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fbc6c:	2560      	movs	r5, #96	; 0x60
     _xstart = 0;
 23fbc6e:	6403      	str	r3, [r0, #64]	; 0x40
     break;
 23fbc70:	e7e6      	b.n	23fbc40 <_ZN15Adafruit_ST778911setRotationEh+0x34>

023fbc72 <_ZN15Adafruit_ST7789D0Ev>:
 23fbc72:	b510      	push	{r4, lr}
 23fbc74:	4604      	mov	r4, r0
 23fbc76:	2150      	movs	r1, #80	; 0x50
 23fbc78:	f7fe fd03 	bl	23fa682 <_ZdlPvj>
 23fbc7c:	4620      	mov	r0, r4
 23fbc7e:	bd10      	pop	{r4, pc}

023fbc80 <_ZN15Adafruit_ST7789C1Eaaa>:
Adafruit_ST7789::Adafruit_ST7789(int8_t cs, int8_t dc, int8_t rst) :
 23fbc80:	b510      	push	{r4, lr}
 23fbc82:	4604      	mov	r4, r0
  Adafruit_ST77xx(cs, dc, rst) {
 23fbc84:	f000 f89a 	bl	23fbdbc <_ZN15Adafruit_ST77xxC1Eaaa>
 23fbc88:	4b01      	ldr	r3, [pc, #4]	; (23fbc90 <_ZN15Adafruit_ST7789C1Eaaa+0x10>)
}
 23fbc8a:	4620      	mov	r0, r4
  Adafruit_ST77xx(cs, dc, rst) {
 23fbc8c:	6023      	str	r3, [r4, #0]
}
 23fbc8e:	bd10      	pop	{r4, pc}
 23fbc90:	023ffd18 	.word	0x023ffd18

023fbc94 <_ZN15Adafruit_ST77894initEtt>:
void Adafruit_ST7789::init(uint16_t width, uint16_t height) {
 23fbc94:	b570      	push	{r4, r5, r6, lr}
 23fbc96:	4604      	mov	r4, r0
  _colstart = ST7789_240x240_XSTART;
 23fbc98:	2500      	movs	r5, #0
  commonInit(NULL);
 23fbc9a:	2100      	movs	r1, #0
 23fbc9c:	f000 f8e5 	bl	23fbe6a <_ZN15Adafruit_ST77xx10commonInitEPKh>
  _width    = 240;
 23fbca0:	4b07      	ldr	r3, [pc, #28]	; (23fbcc0 <_ZN15Adafruit_ST77894initEtt+0x2c>)
  displayInit(cmd_240x240);
 23fbca2:	4620      	mov	r0, r4
  _width    = 240;
 23fbca4:	60e3      	str	r3, [r4, #12]
  displayInit(cmd_240x240);
 23fbca6:	4907      	ldr	r1, [pc, #28]	; (23fbcc4 <_ZN15Adafruit_ST77894initEtt+0x30>)
  _colstart = ST7789_240x240_XSTART;
 23fbca8:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  displayInit(cmd_240x240);
 23fbcac:	f000 f89a 	bl	23fbde4 <_ZN15Adafruit_ST77xx11displayInitEPKh>
  setRotation(0);
 23fbcb0:	6823      	ldr	r3, [r4, #0]
 23fbcb2:	4629      	mov	r1, r5
 23fbcb4:	4620      	mov	r0, r4
}
 23fbcb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setRotation(0);
 23fbcba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fbcbc:	4718      	bx	r3
 23fbcbe:	bf00      	nop
 23fbcc0:	014000f0 	.word	0x014000f0
 23fbcc4:	023ffcec 	.word	0x023ffcec

023fbcc8 <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA    0xF81F
#define ST77XX_YELLOW     0xFFE0
#define	ST77XX_ORANGE     0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
 23fbcc8:	4770      	bx	lr

023fbcca <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
 23fbcca:	b570      	push	{r4, r5, r6, lr}
  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
 23fbccc:	f001 0103 	and.w	r1, r1, #3

  switch(rotation) {
 23fbcd0:	2902      	cmp	r1, #2
void Adafruit_ST77xx::setRotation(uint8_t m) {
 23fbcd2:	4604      	mov	r4, r0
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
     _xstart = _colstart;
 23fbcd4:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
     _ystart = _rowstart;
 23fbcd8:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
  rotation = m % 4; // can't be higher than 3
 23fbcdc:	7681      	strb	r1, [r0, #26]
  switch(rotation) {
 23fbcde:	d020      	beq.n	23fbd22 <_ZN15Adafruit_ST77xx11setRotationEh+0x58>
 23fbce0:	2903      	cmp	r1, #3
 23fbce2:	d024      	beq.n	23fbd2e <_ZN15Adafruit_ST77xx11setRotationEh+0x64>
 23fbce4:	2901      	cmp	r1, #1
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 23fbce6:	bf17      	itett	ne
 23fbce8:	25c0      	movne	r5, #192	; 0xc0
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fbcea:	25a0      	moveq	r5, #160	; 0xa0
     _xstart = _colstart;
 23fbcec:	f8a0 2040 	strhne.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fbcf0:	f8a0 3042 	strhne.w	r3, [r0, #66]	; 0x42
     _ystart = _colstart;
 23fbcf4:	bf04      	itt	eq
 23fbcf6:	f8a0 2042 	strheq.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fbcfa:	f8a0 3040 	strheq.w	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _ystart = _colstart;
     _xstart = _rowstart;
     break;
  }
  startWrite();
 23fbcfe:	6823      	ldr	r3, [r4, #0]
 23fbd00:	4620      	mov	r0, r4
 23fbd02:	695b      	ldr	r3, [r3, #20]
 23fbd04:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
 23fbd06:	4620      	mov	r0, r4
 23fbd08:	2136      	movs	r1, #54	; 0x36
 23fbd0a:	f7ff fea7 	bl	23fba5c <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
 23fbd0e:	4620      	mov	r0, r4
 23fbd10:	4629      	mov	r1, r5
 23fbd12:	f7ff fe7a 	bl	23fba0a <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
 23fbd16:	6823      	ldr	r3, [r4, #0]
 23fbd18:	4620      	mov	r0, r4
}
 23fbd1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
 23fbd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbd20:	4718      	bx	r3
     madctl  = ST77XX_MADCTL_RGB;
 23fbd22:	2500      	movs	r5, #0
     _xstart = _colstart;
 23fbd24:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fbd28:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
     break;
 23fbd2c:	e7e7      	b.n	23fbcfe <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fbd2e:	2560      	movs	r5, #96	; 0x60
     _ystart = _colstart;
 23fbd30:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fbd34:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
     break;
 23fbd38:	e7e1      	b.n	23fbcfe <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
	...

023fbd3c <_ZN15Adafruit_ST77xx5beginEm>:
    freq = SPI_DEFAULT_FREQ;
 23fbd3c:	4b06      	ldr	r3, [pc, #24]	; (23fbd58 <_ZN15Adafruit_ST77xx5beginEm+0x1c>)
  initSPI(freq);
 23fbd3e:	2200      	movs	r2, #0
    freq = SPI_DEFAULT_FREQ;
 23fbd40:	2900      	cmp	r1, #0
 23fbd42:	bf18      	it	ne
 23fbd44:	460b      	movne	r3, r1
  invertOnCommand  = ST77XX_INVON;
 23fbd46:	f242 0121 	movw	r1, #8225	; 0x2021
  _freq = freq;
 23fbd4a:	6483      	str	r3, [r0, #72]	; 0x48
  invertOnCommand  = ST77XX_INVON;
 23fbd4c:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
  initSPI(freq);
 23fbd50:	4619      	mov	r1, r3
 23fbd52:	f7ff bba3 	b.w	23fb49c <_ZN15Adafruit_SPITFT7initSPIEmh>
 23fbd56:	bf00      	nop
 23fbd58:	00f42400 	.word	0x00f42400

023fbd5c <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  uint16_t h) {
 23fbd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbd5e:	4604      	mov	r4, r0
  x += _xstart;
 23fbd60:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
  y += _ystart;
 23fbd64:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
  uint16_t h) {
 23fbd68:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  x += _xstart;
 23fbd6c:	4439      	add	r1, r7
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fbd6e:	fa13 f781 	uxtah	r7, r3, r1
  y += _ystart;
 23fbd72:	442a      	add	r2, r5
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fbd74:	fa16 f582 	uxtah	r5, r6, r2
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fbd78:	3f01      	subs	r7, #1
 23fbd7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fbd7e:	3d01      	subs	r5, #1
  writeCommand(ST77XX_CASET); // Column addr set
 23fbd80:	212a      	movs	r1, #42	; 0x2a
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fbd82:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  writeCommand(ST77XX_CASET); // Column addr set
 23fbd86:	f7ff fe69 	bl	23fba5c <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
 23fbd8a:	4639      	mov	r1, r7
 23fbd8c:	4620      	mov	r0, r4
 23fbd8e:	f7ff ff04 	bl	23fbb9a <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RASET); // Row addr set
 23fbd92:	4620      	mov	r0, r4
 23fbd94:	212b      	movs	r1, #43	; 0x2b
 23fbd96:	f7ff fe61 	bl	23fba5c <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
 23fbd9a:	4629      	mov	r1, r5
 23fbd9c:	4620      	mov	r0, r4
 23fbd9e:	f7ff fefc 	bl	23fbb9a <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RAMWR); // write to RAM
 23fbda2:	4620      	mov	r0, r4
}
 23fbda4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  writeCommand(ST77XX_RAMWR); // write to RAM
 23fbda8:	212c      	movs	r1, #44	; 0x2c
 23fbdaa:	f7ff be57 	b.w	23fba5c <_ZN15Adafruit_SPITFT12writeCommandEh>

023fbdae <_ZN15Adafruit_ST77xxD0Ev>:
 23fbdae:	b510      	push	{r4, lr}
 23fbdb0:	4604      	mov	r4, r0
 23fbdb2:	2150      	movs	r1, #80	; 0x50
 23fbdb4:	f7fe fc65 	bl	23fa682 <_ZdlPvj>
 23fbdb8:	4620      	mov	r0, r4
 23fbdba:	bd10      	pop	{r4, pc}

023fbdbc <_ZN15Adafruit_ST77xxC1Eaaa>:
Adafruit_ST77xx::Adafruit_ST77xx(int8_t cs, int8_t dc, int8_t rst) :
 23fbdbc:	b513      	push	{r0, r1, r4, lr}
 23fbdbe:	4604      	mov	r4, r0
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
 23fbdc0:	e9cd 2300 	strd	r2, r3, [sp]
 23fbdc4:	460b      	mov	r3, r1
 23fbdc6:	22a0      	movs	r2, #160	; 0xa0
 23fbdc8:	2180      	movs	r1, #128	; 0x80
 23fbdca:	f7ff fb37 	bl	23fb43c <_ZN15Adafruit_SPITFTC1Ettaaa>
 23fbdce:	4b04      	ldr	r3, [pc, #16]	; (23fbde0 <_ZN15Adafruit_ST77xxC1Eaaa+0x24>)
}
 23fbdd0:	4620      	mov	r0, r4
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
 23fbdd2:	6023      	str	r3, [r4, #0]
 23fbdd4:	2300      	movs	r3, #0
 23fbdd6:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
}
 23fbdda:	b002      	add	sp, #8
 23fbddc:	bd10      	pop	{r4, pc}
 23fbdde:	bf00      	nop
 23fbde0:	023ffd78 	.word	0x023ffd78

023fbde4 <_ZN15Adafruit_ST77xx11displayInitEPKh>:
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 23fbde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fbde8:	460c      	mov	r4, r1
  startWrite();
 23fbdea:	6803      	ldr	r3, [r0, #0]
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 23fbdec:	4605      	mov	r5, r0
  startWrite();
 23fbdee:	695b      	ldr	r3, [r3, #20]
 23fbdf0:	4798      	blx	r3
  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
 23fbdf2:	f814 7b01 	ldrb.w	r7, [r4], #1
  while(numCommands--) {                 // For each command...
 23fbdf6:	b397      	cbz	r7, 23fbe5e <_ZN15Adafruit_ST77xx11displayInitEPKh+0x7a>
    writeCommand(pgm_read_byte(addr++)); // Read, issue command
 23fbdf8:	4626      	mov	r6, r4
 23fbdfa:	4628      	mov	r0, r5
 23fbdfc:	f816 1b02 	ldrb.w	r1, [r6], #2
 23fbe00:	f7ff fe2c 	bl	23fba5c <_ZN15Adafruit_SPITFT12writeCommandEh>
    numArgs  = pgm_read_byte(addr++);    // Number of args to follow
 23fbe04:	f894 9001 	ldrb.w	r9, [r4, #1]
 23fbe08:	46b2      	mov	sl, r6
    numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 23fbe0a:	f009 087f 	and.w	r8, r9, #127	; 0x7f
 23fbe0e:	4644      	mov	r4, r8
    while(numArgs--) {                   // For each argument...
 23fbe10:	3c01      	subs	r4, #1
 23fbe12:	b2e4      	uxtb	r4, r4
 23fbe14:	2cff      	cmp	r4, #255	; 0xff
 23fbe16:	d005      	beq.n	23fbe24 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x40>
      spiWrite(pgm_read_byte(addr++));   // Read, issue argument
 23fbe18:	4628      	mov	r0, r5
 23fbe1a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 23fbe1e:	f7ff fdf4 	bl	23fba0a <_ZN15Adafruit_SPITFT8spiWriteEh>
    while(numArgs--) {                   // For each argument...
 23fbe22:	e7f5      	b.n	23fbe10 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x2c>
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *csPort   |= csPinMaskSet;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_cs, HIGH);
 23fbe24:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
 23fbe28:	2101      	movs	r1, #1
 23fbe2a:	b280      	uxth	r0, r0
 23fbe2c:	f001 fe1d 	bl	23fda6a <digitalWrite>
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *csPort   &= csPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_cs, LOW);
 23fbe30:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
 23fbe34:	2100      	movs	r1, #0
 23fbe36:	b280      	uxth	r0, r0
 23fbe38:	f001 fe17 	bl	23fda6a <digitalWrite>
    if(ms) {
 23fbe3c:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fbe40:	eb06 0408 	add.w	r4, r6, r8
 23fbe44:	d008      	beq.n	23fbe58 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x74>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 23fbe46:	f816 0008 	ldrb.w	r0, [r6, r8]
 23fbe4a:	3401      	adds	r4, #1
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 23fbe4c:	28ff      	cmp	r0, #255	; 0xff
      delay(ms);
 23fbe4e:	bf08      	it	eq
 23fbe50:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 23fbe54:	f000 fdfa 	bl	23fca4c <delay>
 23fbe58:	3f01      	subs	r7, #1
 23fbe5a:	b2ff      	uxtb	r7, r7
 23fbe5c:	e7cb      	b.n	23fbdf6 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x12>
  endWrite();
 23fbe5e:	682b      	ldr	r3, [r5, #0]
 23fbe60:	4628      	mov	r0, r5
}
 23fbe62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23fbe66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbe68:	4718      	bx	r3

023fbe6a <_ZN15Adafruit_ST77xx10commonInitEPKh>:
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 23fbe6a:	b538      	push	{r3, r4, r5, lr}
 23fbe6c:	460d      	mov	r5, r1
  begin();
 23fbe6e:	6803      	ldr	r3, [r0, #0]
 23fbe70:	2100      	movs	r1, #0
 23fbe72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 23fbe74:	4604      	mov	r4, r0
  begin();
 23fbe76:	4798      	blx	r3
  if(cmdList) {
 23fbe78:	b12d      	cbz	r5, 23fbe86 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x1c>
    displayInit(cmdList);
 23fbe7a:	4629      	mov	r1, r5
 23fbe7c:	4620      	mov	r0, r4
}
 23fbe7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    displayInit(cmdList);
 23fbe82:	f7ff bfaf 	b.w	23fbde4 <_ZN15Adafruit_ST77xx11displayInitEPKh>
}
 23fbe86:	bd38      	pop	{r3, r4, r5, pc}

023fbe88 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 23fbe88:	6042      	str	r2, [r0, #4]
  _begun = false;
 23fbe8a:	2200      	movs	r2, #0
 23fbe8c:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
 23fbe8e:	2220      	movs	r2, #32
  _addr = addr;
 23fbe90:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 23fbe92:	60c2      	str	r2, [r0, #12]
#endif
}
 23fbe94:	4770      	bx	lr

023fbe96 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 23fbe96:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 23fbe98:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 23fbe9a:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 23fbe9c:	b153      	cbz	r3, 23fbeb4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 23fbe9e:	7821      	ldrb	r1, [r4, #0]
 23fbea0:	6860      	ldr	r0, [r4, #4]
 23fbea2:	f001 f95a 	bl	23fd15a <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 23fbea6:	6860      	ldr	r0, [r4, #4]
 23fbea8:	f001 f95f 	bl	23fd16a <_ZN7TwoWire15endTransmissionEv>
 23fbeac:	fab0 f080 	clz	r0, r0
 23fbeb0:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 23fbeb2:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 23fbeb4:	2101      	movs	r1, #1
 23fbeb6:	f000 f803 	bl	23fbec0 <_ZN18Adafruit_I2CDevice5beginEb>
 23fbeba:	2800      	cmp	r0, #0
 23fbebc:	d1ef      	bne.n	23fbe9e <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 23fbebe:	e7f8      	b.n	23fbeb2 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

023fbec0 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23fbec0:	b538      	push	{r3, r4, r5, lr}
 23fbec2:	4604      	mov	r4, r0
  _wire->begin();
 23fbec4:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23fbec6:	460d      	mov	r5, r1
  _wire->begin();
 23fbec8:	f001 f918 	bl	23fd0fc <_ZN7TwoWire5beginEv>
  _begun = true;
 23fbecc:	2001      	movs	r0, #1
 23fbece:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 23fbed0:	b125      	cbz	r5, 23fbedc <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 23fbed2:	4620      	mov	r0, r4
}
 23fbed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 23fbed8:	f7ff bfdd 	b.w	23fbe96 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 23fbedc:	bd38      	pop	{r3, r4, r5, pc}

023fbede <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 23fbede:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fbee2:	461f      	mov	r7, r3
 23fbee4:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 23fbee8:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 23fbeea:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 23fbeec:	4432      	add	r2, r6
 23fbeee:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 23fbef0:	4604      	mov	r4, r0
 23fbef2:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 23fbef4:	d902      	bls.n	23fbefc <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 23fbef6:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
 23fbef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 23fbefc:	7801      	ldrb	r1, [r0, #0]
 23fbefe:	6840      	ldr	r0, [r0, #4]
 23fbf00:	f001 f92b 	bl	23fd15a <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 23fbf04:	b97e      	cbnz	r6, 23fbf26 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 23fbf06:	6860      	ldr	r0, [r4, #4]
 23fbf08:	462a      	mov	r2, r5
 23fbf0a:	6803      	ldr	r3, [r0, #0]
 23fbf0c:	4641      	mov	r1, r8
 23fbf0e:	68db      	ldr	r3, [r3, #12]
 23fbf10:	4798      	blx	r3
 23fbf12:	4285      	cmp	r5, r0
 23fbf14:	d1ef      	bne.n	23fbef6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 23fbf16:	4639      	mov	r1, r7
 23fbf18:	6860      	ldr	r0, [r4, #4]
 23fbf1a:	f001 f922 	bl	23fd162 <_ZN7TwoWire15endTransmissionEh>
 23fbf1e:	fab0 f080 	clz	r0, r0
 23fbf22:	0940      	lsrs	r0, r0, #5
 23fbf24:	e7e8      	b.n	23fbef8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 23fbf26:	f1b9 0f00 	cmp.w	r9, #0
 23fbf2a:	d0ec      	beq.n	23fbf06 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 23fbf2c:	6860      	ldr	r0, [r4, #4]
 23fbf2e:	4632      	mov	r2, r6
 23fbf30:	6803      	ldr	r3, [r0, #0]
 23fbf32:	4649      	mov	r1, r9
 23fbf34:	68db      	ldr	r3, [r3, #12]
 23fbf36:	4798      	blx	r3
 23fbf38:	4286      	cmp	r6, r0
 23fbf3a:	d1dc      	bne.n	23fbef6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 23fbf3c:	e7e3      	b.n	23fbf06 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

023fbf3e <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
 23fbf3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fbf42:	4615      	mov	r5, r2
 23fbf44:	4604      	mov	r4, r0
 23fbf46:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 23fbf48:	b2d2      	uxtb	r2, r2
 23fbf4a:	7801      	ldrb	r1, [r0, #0]
 23fbf4c:	6840      	ldr	r0, [r0, #4]
 23fbf4e:	f001 f8f2 	bl	23fd136 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 23fbf52:	4285      	cmp	r5, r0
 23fbf54:	d10d      	bne.n	23fbf72 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
 23fbf56:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 23fbf58:	fa1f f887 	uxth.w	r8, r7
 23fbf5c:	45a8      	cmp	r8, r5
 23fbf5e:	f107 0701 	add.w	r7, r7, #1
 23fbf62:	d209      	bcs.n	23fbf78 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
 23fbf64:	6860      	ldr	r0, [r4, #4]
 23fbf66:	6803      	ldr	r3, [r0, #0]
 23fbf68:	695b      	ldr	r3, [r3, #20]
 23fbf6a:	4798      	blx	r3
 23fbf6c:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 23fbf70:	e7f2      	b.n	23fbf58 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
 23fbf72:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23fbf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fbf78:	2001      	movs	r0, #1
 23fbf7a:	e7fb      	b.n	23fbf74 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

023fbf7c <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23fbf7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fbf80:	4607      	mov	r7, r0
 23fbf82:	4688      	mov	r8, r1
 23fbf84:	4616      	mov	r6, r2
 23fbf86:	4699      	mov	r9, r3
  size_t pos = 0;
 23fbf88:	2500      	movs	r5, #0
  while (pos < len) {
 23fbf8a:	42b5      	cmp	r5, r6
 23fbf8c:	d212      	bcs.n	23fbfb4 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
 23fbf8e:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
 23fbf90:	1b74      	subs	r4, r6, r5
 23fbf92:	4294      	cmp	r4, r2
 23fbf94:	bf28      	it	cs
 23fbf96:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
 23fbf98:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
 23fbf9a:	42ab      	cmp	r3, r5
 23fbf9c:	bf94      	ite	ls
 23fbf9e:	464b      	movls	r3, r9
 23fbfa0:	2300      	movhi	r3, #0
 23fbfa2:	4622      	mov	r2, r4
 23fbfa4:	4638      	mov	r0, r7
 23fbfa6:	eb08 0105 	add.w	r1, r8, r5
 23fbfaa:	f7ff ffc8 	bl	23fbf3e <_ZN18Adafruit_I2CDevice5_readEPhjb>
 23fbfae:	b110      	cbz	r0, 23fbfb6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
 23fbfb0:	4425      	add	r5, r4
  while (pos < len) {
 23fbfb2:	e7ea      	b.n	23fbf8a <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
 23fbfb4:	2001      	movs	r0, #1
}
 23fbfb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023fbfba <_ZN14Adafruit_SGP30C1Ev>:
#include "Arduino.h"

/*!
 *  @brief  Instantiates a new SGP30 class
 */
Adafruit_SGP30::Adafruit_SGP30() {}
 23fbfba:	2200      	movs	r2, #0
 23fbfbc:	6102      	str	r2, [r0, #16]
 23fbfbe:	4770      	bx	lr

023fbfc0 <_ZN14Adafruit_SGP3011generateCRCEPhh>:
  return true;
}

uint8_t Adafruit_SGP30::generateCRC(uint8_t *data, uint8_t datalen) {
  // calculates 8-Bit checksum with given polynomial
  uint8_t crc = SGP30_CRC8_INIT;
 23fbfc0:	20ff      	movs	r0, #255	; 0xff
 23fbfc2:	440a      	add	r2, r1

  for (uint8_t i = 0; i < datalen; i++) {
 23fbfc4:	428a      	cmp	r2, r1
 23fbfc6:	d011      	beq.n	23fbfec <_ZN14Adafruit_SGP3011generateCRCEPhh+0x2c>
    crc ^= data[i];
 23fbfc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fbfcc:	4058      	eors	r0, r3
 23fbfce:	2308      	movs	r3, #8
    for (uint8_t b = 0; b < 8; b++) {
      if (crc & 0x80)
 23fbfd0:	f010 0f80 	tst.w	r0, #128	; 0x80
    for (uint8_t b = 0; b < 8; b++) {
 23fbfd4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 23fbfd8:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (crc << 1) ^ SGP30_CRC8_POLYNOMIAL;
 23fbfdc:	bf18      	it	ne
 23fbfde:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (uint8_t b = 0; b < 8; b++) {
 23fbfe2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      else
        crc <<= 1;
 23fbfe6:	b2c0      	uxtb	r0, r0
    for (uint8_t b = 0; b < 8; b++) {
 23fbfe8:	d1f2      	bne.n	23fbfd0 <_ZN14Adafruit_SGP3011generateCRCEPhh+0x10>
 23fbfea:	e7eb      	b.n	23fbfc4 <_ZN14Adafruit_SGP3011generateCRCEPhh+0x4>
    }
  }
  return crc;
 23fbfec:	4770      	bx	lr

023fbfee <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>:
                                         uint8_t readlen) {
 23fbfee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fbff2:	4698      	mov	r8, r3
  if (!i2c_dev->write(command, commandLength)) {
 23fbff4:	2300      	movs	r3, #0
                                         uint8_t readlen) {
 23fbff6:	b082      	sub	sp, #8
  if (!i2c_dev->write(command, commandLength)) {
 23fbff8:	e9cd 3300 	strd	r3, r3, [sp]
                                         uint8_t readlen) {
 23fbffc:	af02      	add	r7, sp, #8
 23fbffe:	4606      	mov	r6, r0
  if (!i2c_dev->write(command, commandLength)) {
 23fc000:	2301      	movs	r3, #1
 23fc002:	6900      	ldr	r0, [r0, #16]
                                         uint8_t readlen) {
 23fc004:	f8d7 9020 	ldr.w	r9, [r7, #32]
 23fc008:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
  if (!i2c_dev->write(command, commandLength)) {
 23fc00c:	f7ff ff67 	bl	23fbede <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23fc010:	4605      	mov	r5, r0
 23fc012:	b390      	cbz	r0, 23fc07a <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x8c>
  delay(delayms);
 23fc014:	4640      	mov	r0, r8
 23fc016:	f000 fd19 	bl	23fca4c <delay>
  if (readlen == 0)
 23fc01a:	b354      	cbz	r4, 23fc072 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x84>
  uint8_t replylen = readlen * (SGP30_WORD_LEN + 1);
 23fc01c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 23fc020:	b2d2      	uxtb	r2, r2
  uint8_t replybuffer[replylen];
 23fc022:	1dd3      	adds	r3, r2, #7
 23fc024:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
 23fc028:	ebad 0d03 	sub.w	sp, sp, r3
 23fc02c:	f10d 0a08 	add.w	sl, sp, #8
  if (!i2c_dev->read(replybuffer, replylen)) {
 23fc030:	2301      	movs	r3, #1
 23fc032:	4651      	mov	r1, sl
 23fc034:	6930      	ldr	r0, [r6, #16]
 23fc036:	f7ff ffa1 	bl	23fbf7c <_ZN18Adafruit_I2CDevice4readEPhjb>
 23fc03a:	b1f0      	cbz	r0, 23fc07a <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x8c>
 23fc03c:	3c01      	subs	r4, #1
 23fc03e:	b2e4      	uxtb	r4, r4
 23fc040:	f1a9 0802 	sub.w	r8, r9, #2
 23fc044:	eb09 0444 	add.w	r4, r9, r4, lsl #1
    uint8_t crc = generateCRC(replybuffer + i * 3, 2);
 23fc048:	2202      	movs	r2, #2
 23fc04a:	4651      	mov	r1, sl
 23fc04c:	4630      	mov	r0, r6
 23fc04e:	f7ff ffb7 	bl	23fbfc0 <_ZN14Adafruit_SGP3011generateCRCEPhh>
    if (crc != replybuffer[i * 3 + 2])
 23fc052:	f89a 3002 	ldrb.w	r3, [sl, #2]
 23fc056:	4283      	cmp	r3, r0
 23fc058:	d10f      	bne.n	23fc07a <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x8c>
    readdata[i] = replybuffer[i * 3];
 23fc05a:	f89a 2000 	ldrb.w	r2, [sl]
    readdata[i] |= replybuffer[i * 3 + 1];
 23fc05e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  for (uint8_t i = 0; i < readlen; i++) {
 23fc062:	f10a 0a03 	add.w	sl, sl, #3
    readdata[i] |= replybuffer[i * 3 + 1];
 23fc066:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23fc06a:	f828 3f02 	strh.w	r3, [r8, #2]!
  for (uint8_t i = 0; i < readlen; i++) {
 23fc06e:	45a0      	cmp	r8, r4
 23fc070:	d1ea      	bne.n	23fc048 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x5a>
}
 23fc072:	4628      	mov	r0, r5
 23fc074:	46bd      	mov	sp, r7
 23fc076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 23fc07a:	2500      	movs	r5, #0
 23fc07c:	e7f9      	b.n	23fc072 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x84>

023fc07e <_ZN14Adafruit_SGP307IAQinitEv>:
boolean Adafruit_SGP30::IAQinit(void) {
 23fc07e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  command[0] = 0x20;
 23fc080:	2320      	movs	r3, #32
 23fc082:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x03;
 23fc086:	2303      	movs	r3, #3
 23fc088:	f88d 300d 	strb.w	r3, [sp, #13]
  return readWordFromCommand(command, 2, 10);
 23fc08c:	2300      	movs	r3, #0
 23fc08e:	2202      	movs	r2, #2
 23fc090:	e9cd 3300 	strd	r3, r3, [sp]
 23fc094:	a903      	add	r1, sp, #12
 23fc096:	230a      	movs	r3, #10
 23fc098:	f7ff ffa9 	bl	23fbfee <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
}
 23fc09c:	b005      	add	sp, #20
 23fc09e:	f85d fb04 	ldr.w	pc, [sp], #4

023fc0a2 <_ZN14Adafruit_SGP305beginEP7TwoWireb>:
boolean Adafruit_SGP30::begin(TwoWire *theWire, boolean initSensor) {
 23fc0a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc0a4:	4604      	mov	r4, r0
  if (i2c_dev) {
 23fc0a6:	6900      	ldr	r0, [r0, #16]
boolean Adafruit_SGP30::begin(TwoWire *theWire, boolean initSensor) {
 23fc0a8:	460f      	mov	r7, r1
 23fc0aa:	4616      	mov	r6, r2
 23fc0ac:	b085      	sub	sp, #20
  if (i2c_dev) {
 23fc0ae:	b110      	cbz	r0, 23fc0b6 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x14>
    delete i2c_dev; // remove old interface
 23fc0b0:	2110      	movs	r1, #16
 23fc0b2:	f7fe fae6 	bl	23fa682 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(SGP30_I2CADDR_DEFAULT, theWire);
 23fc0b6:	2010      	movs	r0, #16
 23fc0b8:	f7fe fadf 	bl	23fa67a <_Znwj>
 23fc0bc:	4605      	mov	r5, r0
 23fc0be:	b118      	cbz	r0, 23fc0c8 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x26>
 23fc0c0:	463a      	mov	r2, r7
 23fc0c2:	2158      	movs	r1, #88	; 0x58
 23fc0c4:	f7ff fee0 	bl	23fbe88 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23fc0c8:	2101      	movs	r1, #1
 23fc0ca:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(SGP30_I2CADDR_DEFAULT, theWire);
 23fc0cc:	6125      	str	r5, [r4, #16]
  if (!i2c_dev->begin()) {
 23fc0ce:	f7ff fef7 	bl	23fbec0 <_ZN18Adafruit_I2CDevice5beginEb>
 23fc0d2:	b910      	cbnz	r0, 23fc0da <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x38>
    return false;
 23fc0d4:	2000      	movs	r0, #0
}
 23fc0d6:	b005      	add	sp, #20
 23fc0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  command[0] = 0x36;
 23fc0da:	2336      	movs	r3, #54	; 0x36
 23fc0dc:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x82;
 23fc0e0:	2382      	movs	r3, #130	; 0x82
 23fc0e2:	f88d 300d 	strb.w	r3, [sp, #13]
  if (!readWordFromCommand(command, 2, 10, serialnumber, 3))
 23fc0e6:	2303      	movs	r3, #3
 23fc0e8:	9301      	str	r3, [sp, #4]
 23fc0ea:	f104 0308 	add.w	r3, r4, #8
 23fc0ee:	9300      	str	r3, [sp, #0]
 23fc0f0:	2202      	movs	r2, #2
 23fc0f2:	230a      	movs	r3, #10
 23fc0f4:	4620      	mov	r0, r4
 23fc0f6:	a903      	add	r1, sp, #12
 23fc0f8:	f7ff ff79 	bl	23fbfee <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 23fc0fc:	2800      	cmp	r0, #0
 23fc0fe:	d0e9      	beq.n	23fc0d4 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x32>
  command[0] = 0x20;
 23fc100:	2320      	movs	r3, #32
 23fc102:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x2F;
 23fc106:	232f      	movs	r3, #47	; 0x2f
 23fc108:	f88d 300d 	strb.w	r3, [sp, #13]
  if (!readWordFromCommand(command, 2, 10, &featureset, 1))
 23fc10c:	2301      	movs	r3, #1
 23fc10e:	9301      	str	r3, [sp, #4]
 23fc110:	f10d 030e 	add.w	r3, sp, #14
 23fc114:	9300      	str	r3, [sp, #0]
 23fc116:	2202      	movs	r2, #2
 23fc118:	230a      	movs	r3, #10
 23fc11a:	4620      	mov	r0, r4
 23fc11c:	a903      	add	r1, sp, #12
 23fc11e:	f7ff ff66 	bl	23fbfee <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 23fc122:	2800      	cmp	r0, #0
 23fc124:	d0d6      	beq.n	23fc0d4 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x32>
  if ((featureset & 0xF0) != SGP30_FEATURESET)
 23fc126:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 23fc12a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 23fc12e:	2b20      	cmp	r3, #32
 23fc130:	d1d0      	bne.n	23fc0d4 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x32>
  if (initSensor) {
 23fc132:	2e00      	cmp	r6, #0
 23fc134:	d0cf      	beq.n	23fc0d6 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x34>
    if (!IAQinit())
 23fc136:	4620      	mov	r0, r4
 23fc138:	f7ff ffa1 	bl	23fc07e <_ZN14Adafruit_SGP307IAQinitEv>
 23fc13c:	e7cb      	b.n	23fc0d6 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x34>

023fc13e <_ZN14Adafruit_SGP3010IAQmeasureEv>:
boolean Adafruit_SGP30::IAQmeasure(void) {
 23fc13e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  command[0] = 0x20;
 23fc140:	2320      	movs	r3, #32
 23fc142:	f88d 3008 	strb.w	r3, [sp, #8]
  command[1] = 0x08;
 23fc146:	2308      	movs	r3, #8
  if (!readWordFromCommand(command, 2, 12, reply, 2))
 23fc148:	2202      	movs	r2, #2
  command[1] = 0x08;
 23fc14a:	f88d 3009 	strb.w	r3, [sp, #9]
  if (!readWordFromCommand(command, 2, 12, reply, 2))
 23fc14e:	ab03      	add	r3, sp, #12
 23fc150:	9300      	str	r3, [sp, #0]
 23fc152:	9201      	str	r2, [sp, #4]
 23fc154:	230c      	movs	r3, #12
 23fc156:	a902      	add	r1, sp, #8
boolean Adafruit_SGP30::IAQmeasure(void) {
 23fc158:	4604      	mov	r4, r0
  if (!readWordFromCommand(command, 2, 12, reply, 2))
 23fc15a:	f7ff ff48 	bl	23fbfee <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 23fc15e:	b128      	cbz	r0, 23fc16c <_ZN14Adafruit_SGP3010IAQmeasureEv+0x2e>
  TVOC = reply[1];
 23fc160:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 23fc164:	8023      	strh	r3, [r4, #0]
  eCO2 = reply[0];
 23fc166:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fc16a:	8063      	strh	r3, [r4, #2]
}
 23fc16c:	b004      	add	sp, #16
 23fc16e:	bd10      	pop	{r4, pc}

023fc170 <_ZN14Adafruit_SGP3014getIAQBaselineEPtS0_>:
  command[0] = 0x20;
 23fc170:	2320      	movs	r3, #32
                                       uint16_t *tvoc_base) {
 23fc172:	b530      	push	{r4, r5, lr}
 23fc174:	b085      	sub	sp, #20
  command[0] = 0x20;
 23fc176:	f88d 3008 	strb.w	r3, [sp, #8]
  command[1] = 0x15;
 23fc17a:	2315      	movs	r3, #21
                                       uint16_t *tvoc_base) {
 23fc17c:	4614      	mov	r4, r2
  if (!readWordFromCommand(command, 2, 10, reply, 2))
 23fc17e:	2202      	movs	r2, #2
  command[1] = 0x15;
 23fc180:	f88d 3009 	strb.w	r3, [sp, #9]
  if (!readWordFromCommand(command, 2, 10, reply, 2))
 23fc184:	ab03      	add	r3, sp, #12
                                       uint16_t *tvoc_base) {
 23fc186:	460d      	mov	r5, r1
  if (!readWordFromCommand(command, 2, 10, reply, 2))
 23fc188:	9300      	str	r3, [sp, #0]
 23fc18a:	9201      	str	r2, [sp, #4]
 23fc18c:	230a      	movs	r3, #10
 23fc18e:	a902      	add	r1, sp, #8
 23fc190:	f7ff ff2d 	bl	23fbfee <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 23fc194:	b128      	cbz	r0, 23fc1a2 <_ZN14Adafruit_SGP3014getIAQBaselineEPtS0_+0x32>
  *eco2_base = reply[0];
 23fc196:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fc19a:	802b      	strh	r3, [r5, #0]
  *tvoc_base = reply[1];
 23fc19c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 23fc1a0:	8023      	strh	r3, [r4, #0]
}
 23fc1a2:	b005      	add	sp, #20
 23fc1a4:	bd30      	pop	{r4, r5, pc}
	...

023fc1a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fc1a8:	b509      	push	{r0, r3, lr}
 23fc1aa:	4804      	ldr	r0, [pc, #16]	; (23fc1bc <os_mutex_recursive_create+0x14>)
 23fc1ac:	6800      	ldr	r0, [r0, #0]
 23fc1ae:	4b04      	ldr	r3, [pc, #16]	; (23fc1c0 <os_mutex_recursive_create+0x18>)
 23fc1b0:	4403      	add	r3, r0
 23fc1b2:	681b      	ldr	r3, [r3, #0]
 23fc1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc1b6:	9302      	str	r3, [sp, #8]
 23fc1b8:	bd09      	pop	{r0, r3, pc}
 23fc1ba:	0000      	.short	0x0000
 23fc1bc:	1007ad7c 	.word	0x1007ad7c
 23fc1c0:	00000030 	.word	0x00000030

023fc1c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc1c4:	b509      	push	{r0, r3, lr}
 23fc1c6:	4804      	ldr	r0, [pc, #16]	; (23fc1d8 <HAL_RNG_GetRandomNumber+0x14>)
 23fc1c8:	6800      	ldr	r0, [r0, #0]
 23fc1ca:	4b04      	ldr	r3, [pc, #16]	; (23fc1dc <HAL_RNG_GetRandomNumber+0x18>)
 23fc1cc:	4403      	add	r3, r0
 23fc1ce:	681b      	ldr	r3, [r3, #0]
 23fc1d0:	685b      	ldr	r3, [r3, #4]
 23fc1d2:	9302      	str	r3, [sp, #8]
 23fc1d4:	bd09      	pop	{r0, r3, pc}
 23fc1d6:	0000      	.short	0x0000
 23fc1d8:	1007ad7c 	.word	0x1007ad7c
 23fc1dc:	00000000 	.word	0x00000000

023fc1e0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fc1e0:	b509      	push	{r0, r3, lr}
 23fc1e2:	4804      	ldr	r0, [pc, #16]	; (23fc1f4 <HAL_Delay_Microseconds+0x14>)
 23fc1e4:	6800      	ldr	r0, [r0, #0]
 23fc1e6:	4b04      	ldr	r3, [pc, #16]	; (23fc1f8 <HAL_Delay_Microseconds+0x18>)
 23fc1e8:	4403      	add	r3, r0
 23fc1ea:	681b      	ldr	r3, [r3, #0]
 23fc1ec:	68db      	ldr	r3, [r3, #12]
 23fc1ee:	9302      	str	r3, [sp, #8]
 23fc1f0:	bd09      	pop	{r0, r3, pc}
 23fc1f2:	0000      	.short	0x0000
 23fc1f4:	1007ad7c 	.word	0x1007ad7c
 23fc1f8:	00000000 	.word	0x00000000

023fc1fc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc1fc:	b509      	push	{r0, r3, lr}
 23fc1fe:	4804      	ldr	r0, [pc, #16]	; (23fc210 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc200:	6800      	ldr	r0, [r0, #0]
 23fc202:	4b04      	ldr	r3, [pc, #16]	; (23fc214 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc204:	4403      	add	r3, r0
 23fc206:	681b      	ldr	r3, [r3, #0]
 23fc208:	695b      	ldr	r3, [r3, #20]
 23fc20a:	9302      	str	r3, [sp, #8]
 23fc20c:	bd09      	pop	{r0, r3, pc}
 23fc20e:	0000      	.short	0x0000
 23fc210:	1007ad7c 	.word	0x1007ad7c
 23fc214:	00000000 	.word	0x00000000

023fc218 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fc218:	b509      	push	{r0, r3, lr}
 23fc21a:	4804      	ldr	r0, [pc, #16]	; (23fc22c <hal_pin_validate_function+0x14>)
 23fc21c:	6800      	ldr	r0, [r0, #0]
 23fc21e:	4b04      	ldr	r3, [pc, #16]	; (23fc230 <hal_pin_validate_function+0x18>)
 23fc220:	4403      	add	r3, r0
 23fc222:	681b      	ldr	r3, [r3, #0]
 23fc224:	685b      	ldr	r3, [r3, #4]
 23fc226:	9302      	str	r3, [sp, #8]
 23fc228:	bd09      	pop	{r0, r3, pc}
 23fc22a:	0000      	.short	0x0000
 23fc22c:	1007ad7c 	.word	0x1007ad7c
 23fc230:	00000014 	.word	0x00000014

023fc234 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fc234:	b509      	push	{r0, r3, lr}
 23fc236:	4804      	ldr	r0, [pc, #16]	; (23fc248 <hal_gpio_mode+0x14>)
 23fc238:	6800      	ldr	r0, [r0, #0]
 23fc23a:	4b04      	ldr	r3, [pc, #16]	; (23fc24c <hal_gpio_mode+0x18>)
 23fc23c:	4403      	add	r3, r0
 23fc23e:	681b      	ldr	r3, [r3, #0]
 23fc240:	689b      	ldr	r3, [r3, #8]
 23fc242:	9302      	str	r3, [sp, #8]
 23fc244:	bd09      	pop	{r0, r3, pc}
 23fc246:	0000      	.short	0x0000
 23fc248:	1007ad7c 	.word	0x1007ad7c
 23fc24c:	00000014 	.word	0x00000014

023fc250 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fc250:	b509      	push	{r0, r3, lr}
 23fc252:	4804      	ldr	r0, [pc, #16]	; (23fc264 <hal_gpio_get_mode+0x14>)
 23fc254:	6800      	ldr	r0, [r0, #0]
 23fc256:	4b04      	ldr	r3, [pc, #16]	; (23fc268 <hal_gpio_get_mode+0x18>)
 23fc258:	4403      	add	r3, r0
 23fc25a:	681b      	ldr	r3, [r3, #0]
 23fc25c:	68db      	ldr	r3, [r3, #12]
 23fc25e:	9302      	str	r3, [sp, #8]
 23fc260:	bd09      	pop	{r0, r3, pc}
 23fc262:	0000      	.short	0x0000
 23fc264:	1007ad7c 	.word	0x1007ad7c
 23fc268:	00000014 	.word	0x00000014

023fc26c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fc26c:	b509      	push	{r0, r3, lr}
 23fc26e:	4804      	ldr	r0, [pc, #16]	; (23fc280 <hal_gpio_write+0x14>)
 23fc270:	6800      	ldr	r0, [r0, #0]
 23fc272:	4b04      	ldr	r3, [pc, #16]	; (23fc284 <hal_gpio_write+0x18>)
 23fc274:	4403      	add	r3, r0
 23fc276:	681b      	ldr	r3, [r3, #0]
 23fc278:	691b      	ldr	r3, [r3, #16]
 23fc27a:	9302      	str	r3, [sp, #8]
 23fc27c:	bd09      	pop	{r0, r3, pc}
 23fc27e:	0000      	.short	0x0000
 23fc280:	1007ad7c 	.word	0x1007ad7c
 23fc284:	00000014 	.word	0x00000014

023fc288 <HAL_DAC_Get_Resolution>:

DYNALIB_FN(22, hal_gpio, hal_pwm_write_with_frequency, void(uint16_t, uint8_t, uint16_t))
DYNALIB_FN(23, hal_gpio, HAL_DAC_Is_Enabled, uint8_t(hal_pin_t))
DYNALIB_FN(24, hal_gpio, HAL_DAC_Enable, uint8_t(hal_pin_t, uint8_t))

DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
 23fc288:	b509      	push	{r0, r3, lr}
 23fc28a:	4804      	ldr	r0, [pc, #16]	; (23fc29c <HAL_DAC_Get_Resolution+0x14>)
 23fc28c:	6800      	ldr	r0, [r0, #0]
 23fc28e:	4b04      	ldr	r3, [pc, #16]	; (23fc2a0 <HAL_DAC_Get_Resolution+0x18>)
 23fc290:	4403      	add	r3, r0
 23fc292:	681b      	ldr	r3, [r3, #0]
 23fc294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23fc296:	9302      	str	r3, [sp, #8]
 23fc298:	bd09      	pop	{r0, r3, pc}
 23fc29a:	0000      	.short	0x0000
 23fc29c:	1007ad7c 	.word	0x1007ad7c
 23fc2a0:	00000014 	.word	0x00000014

023fc2a4 <HAL_DAC_Set_Resolution>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
 23fc2a4:	b509      	push	{r0, r3, lr}
 23fc2a6:	4804      	ldr	r0, [pc, #16]	; (23fc2b8 <HAL_DAC_Set_Resolution+0x14>)
 23fc2a8:	6800      	ldr	r0, [r0, #0]
 23fc2aa:	4b04      	ldr	r3, [pc, #16]	; (23fc2bc <HAL_DAC_Set_Resolution+0x18>)
 23fc2ac:	4403      	add	r3, r0
 23fc2ae:	681b      	ldr	r3, [r3, #0]
 23fc2b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 23fc2b2:	9302      	str	r3, [sp, #8]
 23fc2b4:	bd09      	pop	{r0, r3, pc}
 23fc2b6:	0000      	.short	0x0000
 23fc2b8:	1007ad7c 	.word	0x1007ad7c
 23fc2bc:	00000014 	.word	0x00000014

023fc2c0 <hal_pwm_get_resolution>:
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
 23fc2c0:	b509      	push	{r0, r3, lr}
 23fc2c2:	4804      	ldr	r0, [pc, #16]	; (23fc2d4 <hal_pwm_get_resolution+0x14>)
 23fc2c4:	6800      	ldr	r0, [r0, #0]
 23fc2c6:	4b04      	ldr	r3, [pc, #16]	; (23fc2d8 <hal_pwm_get_resolution+0x18>)
 23fc2c8:	4403      	add	r3, r0
 23fc2ca:	681b      	ldr	r3, [r3, #0]
 23fc2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fc2ce:	9302      	str	r3, [sp, #8]
 23fc2d0:	bd09      	pop	{r0, r3, pc}
 23fc2d2:	0000      	.short	0x0000
 23fc2d4:	1007ad7c 	.word	0x1007ad7c
 23fc2d8:	00000014 	.word	0x00000014

023fc2dc <hal_pwm_set_resolution>:
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
 23fc2dc:	b509      	push	{r0, r3, lr}
 23fc2de:	4804      	ldr	r0, [pc, #16]	; (23fc2f0 <hal_pwm_set_resolution+0x14>)
 23fc2e0:	6800      	ldr	r0, [r0, #0]
 23fc2e2:	4b04      	ldr	r3, [pc, #16]	; (23fc2f4 <hal_pwm_set_resolution+0x18>)
 23fc2e4:	4403      	add	r3, r0
 23fc2e6:	681b      	ldr	r3, [r3, #0]
 23fc2e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 23fc2ea:	9302      	str	r3, [sp, #8]
 23fc2ec:	bd09      	pop	{r0, r3, pc}
 23fc2ee:	0000      	.short	0x0000
 23fc2f0:	1007ad7c 	.word	0x1007ad7c
 23fc2f4:	00000014 	.word	0x00000014

023fc2f8 <hal_pwm_write_with_frequency_ext>:
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
 23fc2f8:	b509      	push	{r0, r3, lr}
 23fc2fa:	4804      	ldr	r0, [pc, #16]	; (23fc30c <hal_pwm_write_with_frequency_ext+0x14>)
 23fc2fc:	6800      	ldr	r0, [r0, #0]
 23fc2fe:	4b04      	ldr	r3, [pc, #16]	; (23fc310 <hal_pwm_write_with_frequency_ext+0x18>)
 23fc300:	4403      	add	r3, r0
 23fc302:	681b      	ldr	r3, [r3, #0]
 23fc304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 23fc306:	9302      	str	r3, [sp, #8]
 23fc308:	bd09      	pop	{r0, r3, pc}
 23fc30a:	0000      	.short	0x0000
 23fc30c:	1007ad7c 	.word	0x1007ad7c
 23fc310:	00000014 	.word	0x00000014

023fc314 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fc314:	b509      	push	{r0, r3, lr}
 23fc316:	4804      	ldr	r0, [pc, #16]	; (23fc328 <hal_i2c_begin+0x14>)
 23fc318:	6800      	ldr	r0, [r0, #0]
 23fc31a:	4b04      	ldr	r3, [pc, #16]	; (23fc32c <hal_i2c_begin+0x18>)
 23fc31c:	4403      	add	r3, r0
 23fc31e:	681b      	ldr	r3, [r3, #0]
 23fc320:	68db      	ldr	r3, [r3, #12]
 23fc322:	9302      	str	r3, [sp, #8]
 23fc324:	bd09      	pop	{r0, r3, pc}
 23fc326:	0000      	.short	0x0000
 23fc328:	1007ad7c 	.word	0x1007ad7c
 23fc32c:	00000010 	.word	0x00000010

023fc330 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fc330:	b509      	push	{r0, r3, lr}
 23fc332:	4804      	ldr	r0, [pc, #16]	; (23fc344 <hal_i2c_begin_transmission+0x14>)
 23fc334:	6800      	ldr	r0, [r0, #0]
 23fc336:	4b04      	ldr	r3, [pc, #16]	; (23fc348 <hal_i2c_begin_transmission+0x18>)
 23fc338:	4403      	add	r3, r0
 23fc33a:	681b      	ldr	r3, [r3, #0]
 23fc33c:	699b      	ldr	r3, [r3, #24]
 23fc33e:	9302      	str	r3, [sp, #8]
 23fc340:	bd09      	pop	{r0, r3, pc}
 23fc342:	0000      	.short	0x0000
 23fc344:	1007ad7c 	.word	0x1007ad7c
 23fc348:	00000010 	.word	0x00000010

023fc34c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fc34c:	b509      	push	{r0, r3, lr}
 23fc34e:	4804      	ldr	r0, [pc, #16]	; (23fc360 <hal_i2c_end_transmission+0x14>)
 23fc350:	6800      	ldr	r0, [r0, #0]
 23fc352:	4b04      	ldr	r3, [pc, #16]	; (23fc364 <hal_i2c_end_transmission+0x18>)
 23fc354:	4403      	add	r3, r0
 23fc356:	681b      	ldr	r3, [r3, #0]
 23fc358:	69db      	ldr	r3, [r3, #28]
 23fc35a:	9302      	str	r3, [sp, #8]
 23fc35c:	bd09      	pop	{r0, r3, pc}
 23fc35e:	0000      	.short	0x0000
 23fc360:	1007ad7c 	.word	0x1007ad7c
 23fc364:	00000010 	.word	0x00000010

023fc368 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fc368:	b509      	push	{r0, r3, lr}
 23fc36a:	4804      	ldr	r0, [pc, #16]	; (23fc37c <hal_i2c_write+0x14>)
 23fc36c:	6800      	ldr	r0, [r0, #0]
 23fc36e:	4b04      	ldr	r3, [pc, #16]	; (23fc380 <hal_i2c_write+0x18>)
 23fc370:	4403      	add	r3, r0
 23fc372:	681b      	ldr	r3, [r3, #0]
 23fc374:	6a1b      	ldr	r3, [r3, #32]
 23fc376:	9302      	str	r3, [sp, #8]
 23fc378:	bd09      	pop	{r0, r3, pc}
 23fc37a:	0000      	.short	0x0000
 23fc37c:	1007ad7c 	.word	0x1007ad7c
 23fc380:	00000010 	.word	0x00000010

023fc384 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fc384:	b509      	push	{r0, r3, lr}
 23fc386:	4804      	ldr	r0, [pc, #16]	; (23fc398 <hal_i2c_available+0x14>)
 23fc388:	6800      	ldr	r0, [r0, #0]
 23fc38a:	4b04      	ldr	r3, [pc, #16]	; (23fc39c <hal_i2c_available+0x18>)
 23fc38c:	4403      	add	r3, r0
 23fc38e:	681b      	ldr	r3, [r3, #0]
 23fc390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc392:	9302      	str	r3, [sp, #8]
 23fc394:	bd09      	pop	{r0, r3, pc}
 23fc396:	0000      	.short	0x0000
 23fc398:	1007ad7c 	.word	0x1007ad7c
 23fc39c:	00000010 	.word	0x00000010

023fc3a0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fc3a0:	b509      	push	{r0, r3, lr}
 23fc3a2:	4804      	ldr	r0, [pc, #16]	; (23fc3b4 <hal_i2c_read+0x14>)
 23fc3a4:	6800      	ldr	r0, [r0, #0]
 23fc3a6:	4b04      	ldr	r3, [pc, #16]	; (23fc3b8 <hal_i2c_read+0x18>)
 23fc3a8:	4403      	add	r3, r0
 23fc3aa:	681b      	ldr	r3, [r3, #0]
 23fc3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc3ae:	9302      	str	r3, [sp, #8]
 23fc3b0:	bd09      	pop	{r0, r3, pc}
 23fc3b2:	0000      	.short	0x0000
 23fc3b4:	1007ad7c 	.word	0x1007ad7c
 23fc3b8:	00000010 	.word	0x00000010

023fc3bc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fc3bc:	b509      	push	{r0, r3, lr}
 23fc3be:	4804      	ldr	r0, [pc, #16]	; (23fc3d0 <hal_i2c_peek+0x14>)
 23fc3c0:	6800      	ldr	r0, [r0, #0]
 23fc3c2:	4b04      	ldr	r3, [pc, #16]	; (23fc3d4 <hal_i2c_peek+0x18>)
 23fc3c4:	4403      	add	r3, r0
 23fc3c6:	681b      	ldr	r3, [r3, #0]
 23fc3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc3ca:	9302      	str	r3, [sp, #8]
 23fc3cc:	bd09      	pop	{r0, r3, pc}
 23fc3ce:	0000      	.short	0x0000
 23fc3d0:	1007ad7c 	.word	0x1007ad7c
 23fc3d4:	00000010 	.word	0x00000010

023fc3d8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fc3d8:	b509      	push	{r0, r3, lr}
 23fc3da:	4804      	ldr	r0, [pc, #16]	; (23fc3ec <hal_i2c_flush+0x14>)
 23fc3dc:	6800      	ldr	r0, [r0, #0]
 23fc3de:	4b04      	ldr	r3, [pc, #16]	; (23fc3f0 <hal_i2c_flush+0x18>)
 23fc3e0:	4403      	add	r3, r0
 23fc3e2:	681b      	ldr	r3, [r3, #0]
 23fc3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc3e6:	9302      	str	r3, [sp, #8]
 23fc3e8:	bd09      	pop	{r0, r3, pc}
 23fc3ea:	0000      	.short	0x0000
 23fc3ec:	1007ad7c 	.word	0x1007ad7c
 23fc3f0:	00000010 	.word	0x00000010

023fc3f4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fc3f4:	b509      	push	{r0, r3, lr}
 23fc3f6:	4804      	ldr	r0, [pc, #16]	; (23fc408 <hal_i2c_is_enabled+0x14>)
 23fc3f8:	6800      	ldr	r0, [r0, #0]
 23fc3fa:	4b04      	ldr	r3, [pc, #16]	; (23fc40c <hal_i2c_is_enabled+0x18>)
 23fc3fc:	4403      	add	r3, r0
 23fc3fe:	681b      	ldr	r3, [r3, #0]
 23fc400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc402:	9302      	str	r3, [sp, #8]
 23fc404:	bd09      	pop	{r0, r3, pc}
 23fc406:	0000      	.short	0x0000
 23fc408:	1007ad7c 	.word	0x1007ad7c
 23fc40c:	00000010 	.word	0x00000010

023fc410 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fc410:	b509      	push	{r0, r3, lr}
 23fc412:	4804      	ldr	r0, [pc, #16]	; (23fc424 <hal_i2c_init+0x14>)
 23fc414:	6800      	ldr	r0, [r0, #0]
 23fc416:	4b04      	ldr	r3, [pc, #16]	; (23fc428 <hal_i2c_init+0x18>)
 23fc418:	4403      	add	r3, r0
 23fc41a:	681b      	ldr	r3, [r3, #0]
 23fc41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc41e:	9302      	str	r3, [sp, #8]
 23fc420:	bd09      	pop	{r0, r3, pc}
 23fc422:	0000      	.short	0x0000
 23fc424:	1007ad7c 	.word	0x1007ad7c
 23fc428:	00000010 	.word	0x00000010

023fc42c <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fc42c:	b509      	push	{r0, r3, lr}
 23fc42e:	4804      	ldr	r0, [pc, #16]	; (23fc440 <hal_i2c_request_ex+0x14>)
 23fc430:	6800      	ldr	r0, [r0, #0]
 23fc432:	4b04      	ldr	r3, [pc, #16]	; (23fc444 <hal_i2c_request_ex+0x18>)
 23fc434:	4403      	add	r3, r0
 23fc436:	681b      	ldr	r3, [r3, #0]
 23fc438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fc43a:	9302      	str	r3, [sp, #8]
 23fc43c:	bd09      	pop	{r0, r3, pc}
 23fc43e:	0000      	.short	0x0000
 23fc440:	1007ad7c 	.word	0x1007ad7c
 23fc444:	00000010 	.word	0x00000010

023fc448 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fc448:	b509      	push	{r0, r3, lr}
 23fc44a:	4804      	ldr	r0, [pc, #16]	; (23fc45c <inet_inet_ntop+0x14>)
 23fc44c:	6800      	ldr	r0, [r0, #0]
 23fc44e:	4b04      	ldr	r3, [pc, #16]	; (23fc460 <inet_inet_ntop+0x18>)
 23fc450:	4403      	add	r3, r0
 23fc452:	681b      	ldr	r3, [r3, #0]
 23fc454:	695b      	ldr	r3, [r3, #20]
 23fc456:	9302      	str	r3, [sp, #8]
 23fc458:	bd09      	pop	{r0, r3, pc}
 23fc45a:	0000      	.short	0x0000
 23fc45c:	1007ad7c 	.word	0x1007ad7c
 23fc460:	0000004c 	.word	0x0000004c

023fc464 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc464:	b509      	push	{r0, r3, lr}
 23fc466:	4804      	ldr	r0, [pc, #16]	; (23fc478 <netdb_freeaddrinfo+0x14>)
 23fc468:	6800      	ldr	r0, [r0, #0]
 23fc46a:	4b04      	ldr	r3, [pc, #16]	; (23fc47c <netdb_freeaddrinfo+0x18>)
 23fc46c:	4403      	add	r3, r0
 23fc46e:	681b      	ldr	r3, [r3, #0]
 23fc470:	689b      	ldr	r3, [r3, #8]
 23fc472:	9302      	str	r3, [sp, #8]
 23fc474:	bd09      	pop	{r0, r3, pc}
 23fc476:	0000      	.short	0x0000
 23fc478:	1007ad7c 	.word	0x1007ad7c
 23fc47c:	00000050 	.word	0x00000050

023fc480 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc480:	b509      	push	{r0, r3, lr}
 23fc482:	4804      	ldr	r0, [pc, #16]	; (23fc494 <netdb_getaddrinfo+0x14>)
 23fc484:	6800      	ldr	r0, [r0, #0]
 23fc486:	4b04      	ldr	r3, [pc, #16]	; (23fc498 <netdb_getaddrinfo+0x18>)
 23fc488:	4403      	add	r3, r0
 23fc48a:	681b      	ldr	r3, [r3, #0]
 23fc48c:	68db      	ldr	r3, [r3, #12]
 23fc48e:	9302      	str	r3, [sp, #8]
 23fc490:	bd09      	pop	{r0, r3, pc}
 23fc492:	0000      	.short	0x0000
 23fc494:	1007ad7c 	.word	0x1007ad7c
 23fc498:	00000050 	.word	0x00000050

023fc49c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fc49c:	b509      	push	{r0, r3, lr}
 23fc49e:	4804      	ldr	r0, [pc, #16]	; (23fc4b0 <hal_spi_begin+0x14>)
 23fc4a0:	6800      	ldr	r0, [r0, #0]
 23fc4a2:	4b04      	ldr	r3, [pc, #16]	; (23fc4b4 <hal_spi_begin+0x18>)
 23fc4a4:	4403      	add	r3, r0
 23fc4a6:	681b      	ldr	r3, [r3, #0]
 23fc4a8:	681b      	ldr	r3, [r3, #0]
 23fc4aa:	9302      	str	r3, [sp, #8]
 23fc4ac:	bd09      	pop	{r0, r3, pc}
 23fc4ae:	0000      	.short	0x0000
 23fc4b0:	1007ad7c 	.word	0x1007ad7c
 23fc4b4:	00000018 	.word	0x00000018

023fc4b8 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fc4b8:	b509      	push	{r0, r3, lr}
 23fc4ba:	4804      	ldr	r0, [pc, #16]	; (23fc4cc <hal_spi_transfer+0x14>)
 23fc4bc:	6800      	ldr	r0, [r0, #0]
 23fc4be:	4b04      	ldr	r3, [pc, #16]	; (23fc4d0 <hal_spi_transfer+0x18>)
 23fc4c0:	4403      	add	r3, r0
 23fc4c2:	681b      	ldr	r3, [r3, #0]
 23fc4c4:	695b      	ldr	r3, [r3, #20]
 23fc4c6:	9302      	str	r3, [sp, #8]
 23fc4c8:	bd09      	pop	{r0, r3, pc}
 23fc4ca:	0000      	.short	0x0000
 23fc4cc:	1007ad7c 	.word	0x1007ad7c
 23fc4d0:	00000018 	.word	0x00000018

023fc4d4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fc4d4:	b509      	push	{r0, r3, lr}
 23fc4d6:	4804      	ldr	r0, [pc, #16]	; (23fc4e8 <hal_spi_init+0x14>)
 23fc4d8:	6800      	ldr	r0, [r0, #0]
 23fc4da:	4b04      	ldr	r3, [pc, #16]	; (23fc4ec <hal_spi_init+0x18>)
 23fc4dc:	4403      	add	r3, r0
 23fc4de:	681b      	ldr	r3, [r3, #0]
 23fc4e0:	69db      	ldr	r3, [r3, #28]
 23fc4e2:	9302      	str	r3, [sp, #8]
 23fc4e4:	bd09      	pop	{r0, r3, pc}
 23fc4e6:	0000      	.short	0x0000
 23fc4e8:	1007ad7c 	.word	0x1007ad7c
 23fc4ec:	00000018 	.word	0x00000018

023fc4f0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fc4f0:	b509      	push	{r0, r3, lr}
 23fc4f2:	4804      	ldr	r0, [pc, #16]	; (23fc504 <hal_spi_is_enabled+0x14>)
 23fc4f4:	6800      	ldr	r0, [r0, #0]
 23fc4f6:	4b04      	ldr	r3, [pc, #16]	; (23fc508 <hal_spi_is_enabled+0x18>)
 23fc4f8:	4403      	add	r3, r0
 23fc4fa:	681b      	ldr	r3, [r3, #0]
 23fc4fc:	6a1b      	ldr	r3, [r3, #32]
 23fc4fe:	9302      	str	r3, [sp, #8]
 23fc500:	bd09      	pop	{r0, r3, pc}
 23fc502:	0000      	.short	0x0000
 23fc504:	1007ad7c 	.word	0x1007ad7c
 23fc508:	00000018 	.word	0x00000018

023fc50c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fc50c:	b509      	push	{r0, r3, lr}
 23fc50e:	4804      	ldr	r0, [pc, #16]	; (23fc520 <hal_spi_info+0x14>)
 23fc510:	6800      	ldr	r0, [r0, #0]
 23fc512:	4b04      	ldr	r3, [pc, #16]	; (23fc524 <hal_spi_info+0x18>)
 23fc514:	4403      	add	r3, r0
 23fc516:	681b      	ldr	r3, [r3, #0]
 23fc518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc51a:	9302      	str	r3, [sp, #8]
 23fc51c:	bd09      	pop	{r0, r3, pc}
 23fc51e:	0000      	.short	0x0000
 23fc520:	1007ad7c 	.word	0x1007ad7c
 23fc524:	00000018 	.word	0x00000018

023fc528 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fc528:	b509      	push	{r0, r3, lr}
 23fc52a:	4804      	ldr	r0, [pc, #16]	; (23fc53c <hal_spi_set_settings+0x14>)
 23fc52c:	6800      	ldr	r0, [r0, #0]
 23fc52e:	4b04      	ldr	r3, [pc, #16]	; (23fc540 <hal_spi_set_settings+0x18>)
 23fc530:	4403      	add	r3, r0
 23fc532:	681b      	ldr	r3, [r3, #0]
 23fc534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc536:	9302      	str	r3, [sp, #8]
 23fc538:	bd09      	pop	{r0, r3, pc}
 23fc53a:	0000      	.short	0x0000
 23fc53c:	1007ad7c 	.word	0x1007ad7c
 23fc540:	00000018 	.word	0x00000018

023fc544 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fc544:	b509      	push	{r0, r3, lr}
 23fc546:	4804      	ldr	r0, [pc, #16]	; (23fc558 <hal_spi_acquire+0x14>)
 23fc548:	6800      	ldr	r0, [r0, #0]
 23fc54a:	4b04      	ldr	r3, [pc, #16]	; (23fc55c <hal_spi_acquire+0x18>)
 23fc54c:	4403      	add	r3, r0
 23fc54e:	681b      	ldr	r3, [r3, #0]
 23fc550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc552:	9302      	str	r3, [sp, #8]
 23fc554:	bd09      	pop	{r0, r3, pc}
 23fc556:	0000      	.short	0x0000
 23fc558:	1007ad7c 	.word	0x1007ad7c
 23fc55c:	00000018 	.word	0x00000018

023fc560 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fc560:	b509      	push	{r0, r3, lr}
 23fc562:	4804      	ldr	r0, [pc, #16]	; (23fc574 <hal_spi_release+0x14>)
 23fc564:	6800      	ldr	r0, [r0, #0]
 23fc566:	4b04      	ldr	r3, [pc, #16]	; (23fc578 <hal_spi_release+0x18>)
 23fc568:	4403      	add	r3, r0
 23fc56a:	681b      	ldr	r3, [r3, #0]
 23fc56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc56e:	9302      	str	r3, [sp, #8]
 23fc570:	bd09      	pop	{r0, r3, pc}
 23fc572:	0000      	.short	0x0000
 23fc574:	1007ad7c 	.word	0x1007ad7c
 23fc578:	00000018 	.word	0x00000018

023fc57c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fc57c:	b509      	push	{r0, r3, lr}
 23fc57e:	4804      	ldr	r0, [pc, #16]	; (23fc590 <hal_usart_write+0x14>)
 23fc580:	6800      	ldr	r0, [r0, #0]
 23fc582:	4b04      	ldr	r3, [pc, #16]	; (23fc594 <hal_usart_write+0x18>)
 23fc584:	4403      	add	r3, r0
 23fc586:	681b      	ldr	r3, [r3, #0]
 23fc588:	68db      	ldr	r3, [r3, #12]
 23fc58a:	9302      	str	r3, [sp, #8]
 23fc58c:	bd09      	pop	{r0, r3, pc}
 23fc58e:	0000      	.short	0x0000
 23fc590:	1007ad7c 	.word	0x1007ad7c
 23fc594:	00000024 	.word	0x00000024

023fc598 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fc598:	b509      	push	{r0, r3, lr}
 23fc59a:	4804      	ldr	r0, [pc, #16]	; (23fc5ac <hal_usart_available+0x14>)
 23fc59c:	6800      	ldr	r0, [r0, #0]
 23fc59e:	4b04      	ldr	r3, [pc, #16]	; (23fc5b0 <hal_usart_available+0x18>)
 23fc5a0:	4403      	add	r3, r0
 23fc5a2:	681b      	ldr	r3, [r3, #0]
 23fc5a4:	691b      	ldr	r3, [r3, #16]
 23fc5a6:	9302      	str	r3, [sp, #8]
 23fc5a8:	bd09      	pop	{r0, r3, pc}
 23fc5aa:	0000      	.short	0x0000
 23fc5ac:	1007ad7c 	.word	0x1007ad7c
 23fc5b0:	00000024 	.word	0x00000024

023fc5b4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fc5b4:	b509      	push	{r0, r3, lr}
 23fc5b6:	4804      	ldr	r0, [pc, #16]	; (23fc5c8 <hal_usart_read+0x14>)
 23fc5b8:	6800      	ldr	r0, [r0, #0]
 23fc5ba:	4b04      	ldr	r3, [pc, #16]	; (23fc5cc <hal_usart_read+0x18>)
 23fc5bc:	4403      	add	r3, r0
 23fc5be:	681b      	ldr	r3, [r3, #0]
 23fc5c0:	695b      	ldr	r3, [r3, #20]
 23fc5c2:	9302      	str	r3, [sp, #8]
 23fc5c4:	bd09      	pop	{r0, r3, pc}
 23fc5c6:	0000      	.short	0x0000
 23fc5c8:	1007ad7c 	.word	0x1007ad7c
 23fc5cc:	00000024 	.word	0x00000024

023fc5d0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fc5d0:	b509      	push	{r0, r3, lr}
 23fc5d2:	4804      	ldr	r0, [pc, #16]	; (23fc5e4 <hal_usart_peek+0x14>)
 23fc5d4:	6800      	ldr	r0, [r0, #0]
 23fc5d6:	4b04      	ldr	r3, [pc, #16]	; (23fc5e8 <hal_usart_peek+0x18>)
 23fc5d8:	4403      	add	r3, r0
 23fc5da:	681b      	ldr	r3, [r3, #0]
 23fc5dc:	699b      	ldr	r3, [r3, #24]
 23fc5de:	9302      	str	r3, [sp, #8]
 23fc5e0:	bd09      	pop	{r0, r3, pc}
 23fc5e2:	0000      	.short	0x0000
 23fc5e4:	1007ad7c 	.word	0x1007ad7c
 23fc5e8:	00000024 	.word	0x00000024

023fc5ec <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fc5ec:	b509      	push	{r0, r3, lr}
 23fc5ee:	4804      	ldr	r0, [pc, #16]	; (23fc600 <hal_usart_flush+0x14>)
 23fc5f0:	6800      	ldr	r0, [r0, #0]
 23fc5f2:	4b04      	ldr	r3, [pc, #16]	; (23fc604 <hal_usart_flush+0x18>)
 23fc5f4:	4403      	add	r3, r0
 23fc5f6:	681b      	ldr	r3, [r3, #0]
 23fc5f8:	69db      	ldr	r3, [r3, #28]
 23fc5fa:	9302      	str	r3, [sp, #8]
 23fc5fc:	bd09      	pop	{r0, r3, pc}
 23fc5fe:	0000      	.short	0x0000
 23fc600:	1007ad7c 	.word	0x1007ad7c
 23fc604:	00000024 	.word	0x00000024

023fc608 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fc608:	b509      	push	{r0, r3, lr}
 23fc60a:	4804      	ldr	r0, [pc, #16]	; (23fc61c <hal_usart_is_enabled+0x14>)
 23fc60c:	6800      	ldr	r0, [r0, #0]
 23fc60e:	4b04      	ldr	r3, [pc, #16]	; (23fc620 <hal_usart_is_enabled+0x18>)
 23fc610:	4403      	add	r3, r0
 23fc612:	681b      	ldr	r3, [r3, #0]
 23fc614:	6a1b      	ldr	r3, [r3, #32]
 23fc616:	9302      	str	r3, [sp, #8]
 23fc618:	bd09      	pop	{r0, r3, pc}
 23fc61a:	0000      	.short	0x0000
 23fc61c:	1007ad7c 	.word	0x1007ad7c
 23fc620:	00000024 	.word	0x00000024

023fc624 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fc624:	b509      	push	{r0, r3, lr}
 23fc626:	4804      	ldr	r0, [pc, #16]	; (23fc638 <hal_usart_available_data_for_write+0x14>)
 23fc628:	6800      	ldr	r0, [r0, #0]
 23fc62a:	4b04      	ldr	r3, [pc, #16]	; (23fc63c <hal_usart_available_data_for_write+0x18>)
 23fc62c:	4403      	add	r3, r0
 23fc62e:	681b      	ldr	r3, [r3, #0]
 23fc630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc632:	9302      	str	r3, [sp, #8]
 23fc634:	bd09      	pop	{r0, r3, pc}
 23fc636:	0000      	.short	0x0000
 23fc638:	1007ad7c 	.word	0x1007ad7c
 23fc63c:	00000024 	.word	0x00000024

023fc640 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fc640:	b509      	push	{r0, r3, lr}
 23fc642:	4804      	ldr	r0, [pc, #16]	; (23fc654 <hal_usart_init_ex+0x14>)
 23fc644:	6800      	ldr	r0, [r0, #0]
 23fc646:	4b04      	ldr	r3, [pc, #16]	; (23fc658 <hal_usart_init_ex+0x18>)
 23fc648:	4403      	add	r3, r0
 23fc64a:	681b      	ldr	r3, [r3, #0]
 23fc64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc64e:	9302      	str	r3, [sp, #8]
 23fc650:	bd09      	pop	{r0, r3, pc}
 23fc652:	0000      	.short	0x0000
 23fc654:	1007ad7c 	.word	0x1007ad7c
 23fc658:	00000024 	.word	0x00000024

023fc65c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fc65c:	b509      	push	{r0, r3, lr}
 23fc65e:	4804      	ldr	r0, [pc, #16]	; (23fc670 <HAL_USB_USART_Init+0x14>)
 23fc660:	6800      	ldr	r0, [r0, #0]
 23fc662:	4b04      	ldr	r3, [pc, #16]	; (23fc674 <HAL_USB_USART_Init+0x18>)
 23fc664:	4403      	add	r3, r0
 23fc666:	681b      	ldr	r3, [r3, #0]
 23fc668:	681b      	ldr	r3, [r3, #0]
 23fc66a:	9302      	str	r3, [sp, #8]
 23fc66c:	bd09      	pop	{r0, r3, pc}
 23fc66e:	0000      	.short	0x0000
 23fc670:	1007ad7c 	.word	0x1007ad7c
 23fc674:	00000034 	.word	0x00000034

023fc678 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fc678:	b509      	push	{r0, r3, lr}
 23fc67a:	4804      	ldr	r0, [pc, #16]	; (23fc68c <HAL_USB_USART_Begin+0x14>)
 23fc67c:	6800      	ldr	r0, [r0, #0]
 23fc67e:	4b04      	ldr	r3, [pc, #16]	; (23fc690 <HAL_USB_USART_Begin+0x18>)
 23fc680:	4403      	add	r3, r0
 23fc682:	681b      	ldr	r3, [r3, #0]
 23fc684:	685b      	ldr	r3, [r3, #4]
 23fc686:	9302      	str	r3, [sp, #8]
 23fc688:	bd09      	pop	{r0, r3, pc}
 23fc68a:	0000      	.short	0x0000
 23fc68c:	1007ad7c 	.word	0x1007ad7c
 23fc690:	00000034 	.word	0x00000034

023fc694 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fc694:	b509      	push	{r0, r3, lr}
 23fc696:	4804      	ldr	r0, [pc, #16]	; (23fc6a8 <HAL_USB_USART_Available_Data+0x14>)
 23fc698:	6800      	ldr	r0, [r0, #0]
 23fc69a:	4b04      	ldr	r3, [pc, #16]	; (23fc6ac <HAL_USB_USART_Available_Data+0x18>)
 23fc69c:	4403      	add	r3, r0
 23fc69e:	681b      	ldr	r3, [r3, #0]
 23fc6a0:	691b      	ldr	r3, [r3, #16]
 23fc6a2:	9302      	str	r3, [sp, #8]
 23fc6a4:	bd09      	pop	{r0, r3, pc}
 23fc6a6:	0000      	.short	0x0000
 23fc6a8:	1007ad7c 	.word	0x1007ad7c
 23fc6ac:	00000034 	.word	0x00000034

023fc6b0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fc6b0:	b509      	push	{r0, r3, lr}
 23fc6b2:	4804      	ldr	r0, [pc, #16]	; (23fc6c4 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fc6b4:	6800      	ldr	r0, [r0, #0]
 23fc6b6:	4b04      	ldr	r3, [pc, #16]	; (23fc6c8 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fc6b8:	4403      	add	r3, r0
 23fc6ba:	681b      	ldr	r3, [r3, #0]
 23fc6bc:	695b      	ldr	r3, [r3, #20]
 23fc6be:	9302      	str	r3, [sp, #8]
 23fc6c0:	bd09      	pop	{r0, r3, pc}
 23fc6c2:	0000      	.short	0x0000
 23fc6c4:	1007ad7c 	.word	0x1007ad7c
 23fc6c8:	00000034 	.word	0x00000034

023fc6cc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc6cc:	b509      	push	{r0, r3, lr}
 23fc6ce:	4804      	ldr	r0, [pc, #16]	; (23fc6e0 <HAL_USB_USART_Receive_Data+0x14>)
 23fc6d0:	6800      	ldr	r0, [r0, #0]
 23fc6d2:	4b04      	ldr	r3, [pc, #16]	; (23fc6e4 <HAL_USB_USART_Receive_Data+0x18>)
 23fc6d4:	4403      	add	r3, r0
 23fc6d6:	681b      	ldr	r3, [r3, #0]
 23fc6d8:	699b      	ldr	r3, [r3, #24]
 23fc6da:	9302      	str	r3, [sp, #8]
 23fc6dc:	bd09      	pop	{r0, r3, pc}
 23fc6de:	0000      	.short	0x0000
 23fc6e0:	1007ad7c 	.word	0x1007ad7c
 23fc6e4:	00000034 	.word	0x00000034

023fc6e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc6e8:	b509      	push	{r0, r3, lr}
 23fc6ea:	4804      	ldr	r0, [pc, #16]	; (23fc6fc <HAL_USB_USART_Send_Data+0x14>)
 23fc6ec:	6800      	ldr	r0, [r0, #0]
 23fc6ee:	4b04      	ldr	r3, [pc, #16]	; (23fc700 <HAL_USB_USART_Send_Data+0x18>)
 23fc6f0:	4403      	add	r3, r0
 23fc6f2:	681b      	ldr	r3, [r3, #0]
 23fc6f4:	69db      	ldr	r3, [r3, #28]
 23fc6f6:	9302      	str	r3, [sp, #8]
 23fc6f8:	bd09      	pop	{r0, r3, pc}
 23fc6fa:	0000      	.short	0x0000
 23fc6fc:	1007ad7c 	.word	0x1007ad7c
 23fc700:	00000034 	.word	0x00000034

023fc704 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fc704:	b509      	push	{r0, r3, lr}
 23fc706:	4804      	ldr	r0, [pc, #16]	; (23fc718 <HAL_USB_USART_Flush_Data+0x14>)
 23fc708:	6800      	ldr	r0, [r0, #0]
 23fc70a:	4b04      	ldr	r3, [pc, #16]	; (23fc71c <HAL_USB_USART_Flush_Data+0x18>)
 23fc70c:	4403      	add	r3, r0
 23fc70e:	681b      	ldr	r3, [r3, #0]
 23fc710:	6a1b      	ldr	r3, [r3, #32]
 23fc712:	9302      	str	r3, [sp, #8]
 23fc714:	bd09      	pop	{r0, r3, pc}
 23fc716:	0000      	.short	0x0000
 23fc718:	1007ad7c 	.word	0x1007ad7c
 23fc71c:	00000034 	.word	0x00000034

023fc720 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 23fc720:	b509      	push	{r0, r3, lr}
 23fc722:	4804      	ldr	r0, [pc, #16]	; (23fc734 <HAL_USB_USART_Is_Enabled+0x14>)
 23fc724:	6800      	ldr	r0, [r0, #0]
 23fc726:	4b04      	ldr	r3, [pc, #16]	; (23fc738 <HAL_USB_USART_Is_Enabled+0x18>)
 23fc728:	4403      	add	r3, r0
 23fc72a:	681b      	ldr	r3, [r3, #0]
 23fc72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc72e:	9302      	str	r3, [sp, #8]
 23fc730:	bd09      	pop	{r0, r3, pc}
 23fc732:	0000      	.short	0x0000
 23fc734:	1007ad7c 	.word	0x1007ad7c
 23fc738:	00000034 	.word	0x00000034

023fc73c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fc73c:	b509      	push	{r0, r3, lr}
 23fc73e:	4804      	ldr	r0, [pc, #16]	; (23fc750 <panic_+0x14>)
 23fc740:	6800      	ldr	r0, [r0, #0]
 23fc742:	4b04      	ldr	r3, [pc, #16]	; (23fc754 <panic_+0x18>)
 23fc744:	4403      	add	r3, r0
 23fc746:	681b      	ldr	r3, [r3, #0]
 23fc748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc74a:	9302      	str	r3, [sp, #8]
 23fc74c:	bd09      	pop	{r0, r3, pc}
 23fc74e:	0000      	.short	0x0000
 23fc750:	1007ad7c 	.word	0x1007ad7c
 23fc754:	00000048 	.word	0x00000048

023fc758 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fc758:	b509      	push	{r0, r3, lr}
 23fc75a:	4804      	ldr	r0, [pc, #16]	; (23fc76c <set_system_mode+0x14>)
 23fc75c:	6800      	ldr	r0, [r0, #0]
 23fc75e:	4b04      	ldr	r3, [pc, #16]	; (23fc770 <set_system_mode+0x18>)
 23fc760:	4403      	add	r3, r0
 23fc762:	681b      	ldr	r3, [r3, #0]
 23fc764:	685b      	ldr	r3, [r3, #4]
 23fc766:	9302      	str	r3, [sp, #8]
 23fc768:	bd09      	pop	{r0, r3, pc}
 23fc76a:	0000      	.short	0x0000
 23fc76c:	1007ad7c 	.word	0x1007ad7c
 23fc770:	00000008 	.word	0x00000008

023fc774 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fc774:	b509      	push	{r0, r3, lr}
 23fc776:	4804      	ldr	r0, [pc, #16]	; (23fc788 <system_delay_ms+0x14>)
 23fc778:	6800      	ldr	r0, [r0, #0]
 23fc77a:	4b04      	ldr	r3, [pc, #16]	; (23fc78c <system_delay_ms+0x18>)
 23fc77c:	4403      	add	r3, r0
 23fc77e:	681b      	ldr	r3, [r3, #0]
 23fc780:	695b      	ldr	r3, [r3, #20]
 23fc782:	9302      	str	r3, [sp, #8]
 23fc784:	bd09      	pop	{r0, r3, pc}
 23fc786:	0000      	.short	0x0000
 23fc788:	1007ad7c 	.word	0x1007ad7c
 23fc78c:	00000008 	.word	0x00000008

023fc790 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fc790:	b509      	push	{r0, r3, lr}
 23fc792:	4804      	ldr	r0, [pc, #16]	; (23fc7a4 <application_thread_current+0x14>)
 23fc794:	6800      	ldr	r0, [r0, #0]
 23fc796:	4b04      	ldr	r3, [pc, #16]	; (23fc7a8 <application_thread_current+0x18>)
 23fc798:	4403      	add	r3, r0
 23fc79a:	681b      	ldr	r3, [r3, #0]
 23fc79c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc79e:	9302      	str	r3, [sp, #8]
 23fc7a0:	bd09      	pop	{r0, r3, pc}
 23fc7a2:	0000      	.short	0x0000
 23fc7a4:	1007ad7c 	.word	0x1007ad7c
 23fc7a8:	00000008 	.word	0x00000008

023fc7ac <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fc7ac:	b509      	push	{r0, r3, lr}
 23fc7ae:	4804      	ldr	r0, [pc, #16]	; (23fc7c0 <application_thread_invoke+0x14>)
 23fc7b0:	6800      	ldr	r0, [r0, #0]
 23fc7b2:	4b04      	ldr	r3, [pc, #16]	; (23fc7c4 <application_thread_invoke+0x18>)
 23fc7b4:	4403      	add	r3, r0
 23fc7b6:	681b      	ldr	r3, [r3, #0]
 23fc7b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc7ba:	9302      	str	r3, [sp, #8]
 23fc7bc:	bd09      	pop	{r0, r3, pc}
 23fc7be:	0000      	.short	0x0000
 23fc7c0:	1007ad7c 	.word	0x1007ad7c
 23fc7c4:	00000008 	.word	0x00000008

023fc7c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fc7c8:	b509      	push	{r0, r3, lr}
 23fc7ca:	4804      	ldr	r0, [pc, #16]	; (23fc7dc <system_ctrl_set_app_request_handler+0x14>)
 23fc7cc:	6800      	ldr	r0, [r0, #0]
 23fc7ce:	4b04      	ldr	r3, [pc, #16]	; (23fc7e0 <system_ctrl_set_app_request_handler+0x18>)
 23fc7d0:	4403      	add	r3, r0
 23fc7d2:	681b      	ldr	r3, [r3, #0]
 23fc7d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fc7d8:	9302      	str	r3, [sp, #8]
 23fc7da:	bd09      	pop	{r0, r3, pc}
 23fc7dc:	1007ad7c 	.word	0x1007ad7c
 23fc7e0:	00000008 	.word	0x00000008

023fc7e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fc7e4:	b509      	push	{r0, r3, lr}
 23fc7e6:	4804      	ldr	r0, [pc, #16]	; (23fc7f8 <system_ctrl_set_result+0x14>)
 23fc7e8:	6800      	ldr	r0, [r0, #0]
 23fc7ea:	4b04      	ldr	r3, [pc, #16]	; (23fc7fc <system_ctrl_set_result+0x18>)
 23fc7ec:	4403      	add	r3, r0
 23fc7ee:	681b      	ldr	r3, [r3, #0]
 23fc7f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fc7f4:	9302      	str	r3, [sp, #8]
 23fc7f6:	bd09      	pop	{r0, r3, pc}
 23fc7f8:	1007ad7c 	.word	0x1007ad7c
 23fc7fc:	00000008 	.word	0x00000008

023fc800 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fc800:	b509      	push	{r0, r3, lr}
 23fc802:	4804      	ldr	r0, [pc, #16]	; (23fc814 <spark_cloud_flag_connected+0x14>)
 23fc804:	6800      	ldr	r0, [r0, #0]
 23fc806:	4b04      	ldr	r3, [pc, #16]	; (23fc818 <spark_cloud_flag_connected+0x18>)
 23fc808:	4403      	add	r3, r0
 23fc80a:	681b      	ldr	r3, [r3, #0]
 23fc80c:	695b      	ldr	r3, [r3, #20]
 23fc80e:	9302      	str	r3, [sp, #8]
 23fc810:	bd09      	pop	{r0, r3, pc}
 23fc812:	0000      	.short	0x0000
 23fc814:	1007ad7c 	.word	0x1007ad7c
 23fc818:	0000002c 	.word	0x0000002c

023fc81c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fc81c:	b509      	push	{r0, r3, lr}
 23fc81e:	4804      	ldr	r0, [pc, #16]	; (23fc830 <spark_send_event+0x14>)
 23fc820:	6800      	ldr	r0, [r0, #0]
 23fc822:	4b04      	ldr	r3, [pc, #16]	; (23fc834 <spark_send_event+0x18>)
 23fc824:	4403      	add	r3, r0
 23fc826:	681b      	ldr	r3, [r3, #0]
 23fc828:	6a1b      	ldr	r3, [r3, #32]
 23fc82a:	9302      	str	r3, [sp, #8]
 23fc82c:	bd09      	pop	{r0, r3, pc}
 23fc82e:	0000      	.short	0x0000
 23fc830:	1007ad7c 	.word	0x1007ad7c
 23fc834:	0000002c 	.word	0x0000002c

023fc838 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fc838:	b509      	push	{r0, r3, lr}
 23fc83a:	4804      	ldr	r0, [pc, #16]	; (23fc84c <spark_set_random_seed_from_cloud_handler+0x14>)
 23fc83c:	6800      	ldr	r0, [r0, #0]
 23fc83e:	4b04      	ldr	r3, [pc, #16]	; (23fc850 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fc840:	4403      	add	r3, r0
 23fc842:	681b      	ldr	r3, [r3, #0]
 23fc844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc846:	9302      	str	r3, [sp, #8]
 23fc848:	bd09      	pop	{r0, r3, pc}
 23fc84a:	0000      	.short	0x0000
 23fc84c:	1007ad7c 	.word	0x1007ad7c
 23fc850:	0000002c 	.word	0x0000002c

023fc854 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc854:	b509      	push	{r0, r3, lr}
 23fc856:	4804      	ldr	r0, [pc, #16]	; (23fc868 <network_connect+0x14>)
 23fc858:	6800      	ldr	r0, [r0, #0]
 23fc85a:	4b04      	ldr	r3, [pc, #16]	; (23fc86c <network_connect+0x18>)
 23fc85c:	4403      	add	r3, r0
 23fc85e:	681b      	ldr	r3, [r3, #0]
 23fc860:	685b      	ldr	r3, [r3, #4]
 23fc862:	9302      	str	r3, [sp, #8]
 23fc864:	bd09      	pop	{r0, r3, pc}
 23fc866:	0000      	.short	0x0000
 23fc868:	1007ad7c 	.word	0x1007ad7c
 23fc86c:	00000028 	.word	0x00000028

023fc870 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fc870:	b509      	push	{r0, r3, lr}
 23fc872:	4804      	ldr	r0, [pc, #16]	; (23fc884 <network_connecting+0x14>)
 23fc874:	6800      	ldr	r0, [r0, #0]
 23fc876:	4b04      	ldr	r3, [pc, #16]	; (23fc888 <network_connecting+0x18>)
 23fc878:	4403      	add	r3, r0
 23fc87a:	681b      	ldr	r3, [r3, #0]
 23fc87c:	689b      	ldr	r3, [r3, #8]
 23fc87e:	9302      	str	r3, [sp, #8]
 23fc880:	bd09      	pop	{r0, r3, pc}
 23fc882:	0000      	.short	0x0000
 23fc884:	1007ad7c 	.word	0x1007ad7c
 23fc888:	00000028 	.word	0x00000028

023fc88c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fc88c:	b509      	push	{r0, r3, lr}
 23fc88e:	4804      	ldr	r0, [pc, #16]	; (23fc8a0 <network_disconnect+0x14>)
 23fc890:	6800      	ldr	r0, [r0, #0]
 23fc892:	4b04      	ldr	r3, [pc, #16]	; (23fc8a4 <network_disconnect+0x18>)
 23fc894:	4403      	add	r3, r0
 23fc896:	681b      	ldr	r3, [r3, #0]
 23fc898:	68db      	ldr	r3, [r3, #12]
 23fc89a:	9302      	str	r3, [sp, #8]
 23fc89c:	bd09      	pop	{r0, r3, pc}
 23fc89e:	0000      	.short	0x0000
 23fc8a0:	1007ad7c 	.word	0x1007ad7c
 23fc8a4:	00000028 	.word	0x00000028

023fc8a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fc8a8:	b509      	push	{r0, r3, lr}
 23fc8aa:	4804      	ldr	r0, [pc, #16]	; (23fc8bc <network_ready+0x14>)
 23fc8ac:	6800      	ldr	r0, [r0, #0]
 23fc8ae:	4b04      	ldr	r3, [pc, #16]	; (23fc8c0 <network_ready+0x18>)
 23fc8b0:	4403      	add	r3, r0
 23fc8b2:	681b      	ldr	r3, [r3, #0]
 23fc8b4:	691b      	ldr	r3, [r3, #16]
 23fc8b6:	9302      	str	r3, [sp, #8]
 23fc8b8:	bd09      	pop	{r0, r3, pc}
 23fc8ba:	0000      	.short	0x0000
 23fc8bc:	1007ad7c 	.word	0x1007ad7c
 23fc8c0:	00000028 	.word	0x00000028

023fc8c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc8c4:	b509      	push	{r0, r3, lr}
 23fc8c6:	4804      	ldr	r0, [pc, #16]	; (23fc8d8 <network_on+0x14>)
 23fc8c8:	6800      	ldr	r0, [r0, #0]
 23fc8ca:	4b04      	ldr	r3, [pc, #16]	; (23fc8dc <network_on+0x18>)
 23fc8cc:	4403      	add	r3, r0
 23fc8ce:	681b      	ldr	r3, [r3, #0]
 23fc8d0:	695b      	ldr	r3, [r3, #20]
 23fc8d2:	9302      	str	r3, [sp, #8]
 23fc8d4:	bd09      	pop	{r0, r3, pc}
 23fc8d6:	0000      	.short	0x0000
 23fc8d8:	1007ad7c 	.word	0x1007ad7c
 23fc8dc:	00000028 	.word	0x00000028

023fc8e0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc8e0:	b509      	push	{r0, r3, lr}
 23fc8e2:	4804      	ldr	r0, [pc, #16]	; (23fc8f4 <network_off+0x14>)
 23fc8e4:	6800      	ldr	r0, [r0, #0]
 23fc8e6:	4b04      	ldr	r3, [pc, #16]	; (23fc8f8 <network_off+0x18>)
 23fc8e8:	4403      	add	r3, r0
 23fc8ea:	681b      	ldr	r3, [r3, #0]
 23fc8ec:	699b      	ldr	r3, [r3, #24]
 23fc8ee:	9302      	str	r3, [sp, #8]
 23fc8f0:	bd09      	pop	{r0, r3, pc}
 23fc8f2:	0000      	.short	0x0000
 23fc8f4:	1007ad7c 	.word	0x1007ad7c
 23fc8f8:	00000028 	.word	0x00000028

023fc8fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fc8fc:	b509      	push	{r0, r3, lr}
 23fc8fe:	4804      	ldr	r0, [pc, #16]	; (23fc910 <network_listen+0x14>)
 23fc900:	6800      	ldr	r0, [r0, #0]
 23fc902:	4b04      	ldr	r3, [pc, #16]	; (23fc914 <network_listen+0x18>)
 23fc904:	4403      	add	r3, r0
 23fc906:	681b      	ldr	r3, [r3, #0]
 23fc908:	69db      	ldr	r3, [r3, #28]
 23fc90a:	9302      	str	r3, [sp, #8]
 23fc90c:	bd09      	pop	{r0, r3, pc}
 23fc90e:	0000      	.short	0x0000
 23fc910:	1007ad7c 	.word	0x1007ad7c
 23fc914:	00000028 	.word	0x00000028

023fc918 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fc918:	b509      	push	{r0, r3, lr}
 23fc91a:	4804      	ldr	r0, [pc, #16]	; (23fc92c <network_listening+0x14>)
 23fc91c:	6800      	ldr	r0, [r0, #0]
 23fc91e:	4b04      	ldr	r3, [pc, #16]	; (23fc930 <network_listening+0x18>)
 23fc920:	4403      	add	r3, r0
 23fc922:	681b      	ldr	r3, [r3, #0]
 23fc924:	6a1b      	ldr	r3, [r3, #32]
 23fc926:	9302      	str	r3, [sp, #8]
 23fc928:	bd09      	pop	{r0, r3, pc}
 23fc92a:	0000      	.short	0x0000
 23fc92c:	1007ad7c 	.word	0x1007ad7c
 23fc930:	00000028 	.word	0x00000028

023fc934 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fc934:	b509      	push	{r0, r3, lr}
 23fc936:	4804      	ldr	r0, [pc, #16]	; (23fc948 <network_set_listen_timeout+0x14>)
 23fc938:	6800      	ldr	r0, [r0, #0]
 23fc93a:	4b04      	ldr	r3, [pc, #16]	; (23fc94c <network_set_listen_timeout+0x18>)
 23fc93c:	4403      	add	r3, r0
 23fc93e:	681b      	ldr	r3, [r3, #0]
 23fc940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc942:	9302      	str	r3, [sp, #8]
 23fc944:	bd09      	pop	{r0, r3, pc}
 23fc946:	0000      	.short	0x0000
 23fc948:	1007ad7c 	.word	0x1007ad7c
 23fc94c:	00000028 	.word	0x00000028

023fc950 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fc950:	b509      	push	{r0, r3, lr}
 23fc952:	4804      	ldr	r0, [pc, #16]	; (23fc964 <network_get_listen_timeout+0x14>)
 23fc954:	6800      	ldr	r0, [r0, #0]
 23fc956:	4b04      	ldr	r3, [pc, #16]	; (23fc968 <network_get_listen_timeout+0x18>)
 23fc958:	4403      	add	r3, r0
 23fc95a:	681b      	ldr	r3, [r3, #0]
 23fc95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc95e:	9302      	str	r3, [sp, #8]
 23fc960:	bd09      	pop	{r0, r3, pc}
 23fc962:	0000      	.short	0x0000
 23fc964:	1007ad7c 	.word	0x1007ad7c
 23fc968:	00000028 	.word	0x00000028

023fc96c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fc96c:	b509      	push	{r0, r3, lr}
 23fc96e:	4804      	ldr	r0, [pc, #16]	; (23fc980 <network_is_on+0x14>)
 23fc970:	6800      	ldr	r0, [r0, #0]
 23fc972:	4b04      	ldr	r3, [pc, #16]	; (23fc984 <network_is_on+0x18>)
 23fc974:	4403      	add	r3, r0
 23fc976:	681b      	ldr	r3, [r3, #0]
 23fc978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc97a:	9302      	str	r3, [sp, #8]
 23fc97c:	bd09      	pop	{r0, r3, pc}
 23fc97e:	0000      	.short	0x0000
 23fc980:	1007ad7c 	.word	0x1007ad7c
 23fc984:	00000028 	.word	0x00000028

023fc988 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fc988:	b509      	push	{r0, r3, lr}
 23fc98a:	4804      	ldr	r0, [pc, #16]	; (23fc99c <network_is_off+0x14>)
 23fc98c:	6800      	ldr	r0, [r0, #0]
 23fc98e:	4b04      	ldr	r3, [pc, #16]	; (23fc9a0 <network_is_off+0x18>)
 23fc990:	4403      	add	r3, r0
 23fc992:	681b      	ldr	r3, [r3, #0]
 23fc994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc996:	9302      	str	r3, [sp, #8]
 23fc998:	bd09      	pop	{r0, r3, pc}
 23fc99a:	0000      	.short	0x0000
 23fc99c:	1007ad7c 	.word	0x1007ad7c
 23fc9a0:	00000028 	.word	0x00000028

023fc9a4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fc9a4:	b509      	push	{r0, r3, lr}
 23fc9a6:	4804      	ldr	r0, [pc, #16]	; (23fc9b8 <malloc+0x14>)
 23fc9a8:	6800      	ldr	r0, [r0, #0]
 23fc9aa:	4b04      	ldr	r3, [pc, #16]	; (23fc9bc <malloc+0x18>)
 23fc9ac:	4403      	add	r3, r0
 23fc9ae:	681b      	ldr	r3, [r3, #0]
 23fc9b0:	681b      	ldr	r3, [r3, #0]
 23fc9b2:	9302      	str	r3, [sp, #8]
 23fc9b4:	bd09      	pop	{r0, r3, pc}
 23fc9b6:	0000      	.short	0x0000
 23fc9b8:	1007ad7c 	.word	0x1007ad7c
 23fc9bc:	00000004 	.word	0x00000004

023fc9c0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fc9c0:	b509      	push	{r0, r3, lr}
 23fc9c2:	4804      	ldr	r0, [pc, #16]	; (23fc9d4 <free+0x14>)
 23fc9c4:	6800      	ldr	r0, [r0, #0]
 23fc9c6:	4b04      	ldr	r3, [pc, #16]	; (23fc9d8 <free+0x18>)
 23fc9c8:	4403      	add	r3, r0
 23fc9ca:	681b      	ldr	r3, [r3, #0]
 23fc9cc:	685b      	ldr	r3, [r3, #4]
 23fc9ce:	9302      	str	r3, [sp, #8]
 23fc9d0:	bd09      	pop	{r0, r3, pc}
 23fc9d2:	0000      	.short	0x0000
 23fc9d4:	1007ad7c 	.word	0x1007ad7c
 23fc9d8:	00000004 	.word	0x00000004

023fc9dc <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fc9dc:	b509      	push	{r0, r3, lr}
 23fc9de:	4804      	ldr	r0, [pc, #16]	; (23fc9f0 <abort+0x14>)
 23fc9e0:	6800      	ldr	r0, [r0, #0]
 23fc9e2:	4b04      	ldr	r3, [pc, #16]	; (23fc9f4 <abort+0x18>)
 23fc9e4:	4403      	add	r3, r0
 23fc9e6:	681b      	ldr	r3, [r3, #0]
 23fc9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc9ea:	9302      	str	r3, [sp, #8]
 23fc9ec:	bd09      	pop	{r0, r3, pc}
 23fc9ee:	0000      	.short	0x0000
 23fc9f0:	1007ad7c 	.word	0x1007ad7c
 23fc9f4:	00000004 	.word	0x00000004

023fc9f8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fc9f8:	b509      	push	{r0, r3, lr}
 23fc9fa:	4804      	ldr	r0, [pc, #16]	; (23fca0c <_malloc_r+0x14>)
 23fc9fc:	6800      	ldr	r0, [r0, #0]
 23fc9fe:	4b04      	ldr	r3, [pc, #16]	; (23fca10 <_malloc_r+0x18>)
 23fca00:	4403      	add	r3, r0
 23fca02:	681b      	ldr	r3, [r3, #0]
 23fca04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fca06:	9302      	str	r3, [sp, #8]
 23fca08:	bd09      	pop	{r0, r3, pc}
 23fca0a:	0000      	.short	0x0000
 23fca0c:	1007ad7c 	.word	0x1007ad7c
 23fca10:	00000004 	.word	0x00000004

023fca14 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fca14:	b509      	push	{r0, r3, lr}
 23fca16:	4804      	ldr	r0, [pc, #16]	; (23fca28 <__assert_func+0x14>)
 23fca18:	6800      	ldr	r0, [r0, #0]
 23fca1a:	4b04      	ldr	r3, [pc, #16]	; (23fca2c <__assert_func+0x18>)
 23fca1c:	4403      	add	r3, r0
 23fca1e:	681b      	ldr	r3, [r3, #0]
 23fca20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fca22:	9302      	str	r3, [sp, #8]
 23fca24:	bd09      	pop	{r0, r3, pc}
 23fca26:	0000      	.short	0x0000
 23fca28:	1007ad7c 	.word	0x1007ad7c
 23fca2c:	00000004 	.word	0x00000004

023fca30 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fca30:	b509      	push	{r0, r3, lr}
 23fca32:	4804      	ldr	r0, [pc, #16]	; (23fca44 <newlib_impure_ptr_callback+0x14>)
 23fca34:	6800      	ldr	r0, [r0, #0]
 23fca36:	4b04      	ldr	r3, [pc, #16]	; (23fca48 <newlib_impure_ptr_callback+0x18>)
 23fca38:	4403      	add	r3, r0
 23fca3a:	681b      	ldr	r3, [r3, #0]
 23fca3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fca3e:	9302      	str	r3, [sp, #8]
 23fca40:	bd09      	pop	{r0, r3, pc}
 23fca42:	0000      	.short	0x0000
 23fca44:	1007ad7c 	.word	0x1007ad7c
 23fca48:	00000004 	.word	0x00000004

023fca4c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fca4c:	2100      	movs	r1, #0
 23fca4e:	f7ff be91 	b.w	23fc774 <system_delay_ms>

023fca52 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fca52:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fca54:	6883      	ldr	r3, [r0, #8]
 23fca56:	4604      	mov	r4, r0
 23fca58:	b90b      	cbnz	r3, 23fca5e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fca5a:	f001 f963 	bl	23fdd24 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fca5e:	68c3      	ldr	r3, [r0, #12]
 23fca60:	4798      	blx	r3
      if (_M_manager)
 23fca62:	68a3      	ldr	r3, [r4, #8]
 23fca64:	b11b      	cbz	r3, 23fca6e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fca66:	2203      	movs	r2, #3
 23fca68:	4621      	mov	r1, r4
 23fca6a:	4620      	mov	r0, r4
 23fca6c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fca6e:	4620      	mov	r0, r4
}
 23fca70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fca74:	2110      	movs	r1, #16
 23fca76:	f7fd be04 	b.w	23fa682 <_ZdlPvj>

023fca7a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fca7a:	b510      	push	{r4, lr}
      if (_M_manager)
 23fca7c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fca7e:	4604      	mov	r4, r0
      if (_M_manager)
 23fca80:	b113      	cbz	r3, 23fca88 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fca82:	2203      	movs	r2, #3
 23fca84:	4601      	mov	r1, r0
 23fca86:	4798      	blx	r3
    }
 23fca88:	4620      	mov	r0, r4
 23fca8a:	bd10      	pop	{r4, pc}

023fca8c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fca8c:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fca8e:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fca90:	460b      	mov	r3, r1
 23fca92:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fca94:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fca98:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fca9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fcaa0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fcaa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fcaa8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fcaac:	b002      	add	sp, #8
 23fcaae:	bd10      	pop	{r4, pc}

023fcab0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fcab0:	2300      	movs	r3, #0
 23fcab2:	4802      	ldr	r0, [pc, #8]	; (23fcabc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fcab4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fcab6:	f7ff bb77 	b.w	23fc1a8 <os_mutex_recursive_create>
 23fcaba:	bf00      	nop
 23fcabc:	1007ae8c 	.word	0x1007ae8c

023fcac0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fcac0:	4770      	bx	lr

023fcac2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fcac2:	2000      	movs	r0, #0
 23fcac4:	4770      	bx	lr

023fcac6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fcac6:	b510      	push	{r4, lr}
 23fcac8:	4604      	mov	r4, r0
 23fcaca:	2110      	movs	r1, #16
 23fcacc:	f7fd fdd9 	bl	23fa682 <_ZdlPvj>
 23fcad0:	4620      	mov	r0, r4
 23fcad2:	bd10      	pop	{r4, pc}

023fcad4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fcad4:	b508      	push	{r3, lr}
      { delete this; }
 23fcad6:	f7ff fff6 	bl	23fcac6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fcada:	bd08      	pop	{r3, pc}

023fcadc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fcadc:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fcade:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fcae0:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fcae4:	6002      	str	r2, [r0, #0]
 23fcae6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcae8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcaea:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcaec:	680c      	ldr	r4, [r1, #0]
 23fcaee:	8085      	strh	r5, [r0, #4]
 23fcaf0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcaf2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fcaf4:	bd30      	pop	{r4, r5, pc}

023fcaf6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fcaf6:	b510      	push	{r4, lr}
 23fcaf8:	4604      	mov	r4, r0
    free((void*)msg_);
 23fcafa:	6800      	ldr	r0, [r0, #0]
 23fcafc:	f7ff ff60 	bl	23fc9c0 <free>
}
 23fcb00:	4620      	mov	r0, r4
 23fcb02:	bd10      	pop	{r4, pc}

023fcb04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fcb04:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fcb06:	68c4      	ldr	r4, [r0, #12]
 23fcb08:	b314      	cbz	r4, 23fcb50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fcb0a:	7823      	ldrb	r3, [r4, #0]
 23fcb0c:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fcb0e:	2b02      	cmp	r3, #2
 23fcb10:	d103      	bne.n	23fcb1a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fcb12:	f104 000c 	add.w	r0, r4, #12
 23fcb16:	f7ff ffee 	bl	23fcaf6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fcb1a:	1d23      	adds	r3, r4, #4
 23fcb1c:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fcb1e:	b135      	cbz	r5, 23fcb2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fcb20:	4628      	mov	r0, r5
 23fcb22:	f7ff ffaa 	bl	23fca7a <_ZNSt14_Function_baseD1Ev>
 23fcb26:	2110      	movs	r1, #16
 23fcb28:	4628      	mov	r0, r5
 23fcb2a:	f7fd fdaa 	bl	23fa682 <_ZdlPvj>
 23fcb2e:	f104 0308 	add.w	r3, r4, #8
 23fcb32:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fcb34:	b135      	cbz	r5, 23fcb44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fcb36:	4628      	mov	r0, r5
 23fcb38:	f7ff ff9f 	bl	23fca7a <_ZNSt14_Function_baseD1Ev>
 23fcb3c:	2110      	movs	r1, #16
 23fcb3e:	4628      	mov	r0, r5
 23fcb40:	f7fd fd9f 	bl	23fa682 <_ZdlPvj>
 23fcb44:	4620      	mov	r0, r4
 23fcb46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fcb4a:	2114      	movs	r1, #20
 23fcb4c:	f7fd bd99 	b.w	23fa682 <_ZdlPvj>
 23fcb50:	bd38      	pop	{r3, r4, r5, pc}

023fcb52 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcb52:	680b      	ldr	r3, [r1, #0]
 23fcb54:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fcb56:	684b      	ldr	r3, [r1, #4]
 23fcb58:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fcb5a:	b113      	cbz	r3, 23fcb62 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fcb5c:	685a      	ldr	r2, [r3, #4]
 23fcb5e:	3201      	adds	r2, #1
 23fcb60:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcb62:	4770      	bx	lr

023fcb64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fcb64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcb66:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fcb68:	4668      	mov	r0, sp
 23fcb6a:	460d      	mov	r5, r1
 23fcb6c:	f7ff fff1 	bl	23fcb52 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fcb70:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fcb72:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fcb74:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fcb76:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fcb78:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fcb7a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fcb7c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23fcb7e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fcb80:	f7fd fe60 	bl	23fa844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fcb84:	b135      	cbz	r5, 23fcb94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fcb86:	1d28      	adds	r0, r5, #4
 23fcb88:	f7fd fe5c 	bl	23fa844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcb8c:	2108      	movs	r1, #8
 23fcb8e:	4628      	mov	r0, r5
 23fcb90:	f7fd fd77 	bl	23fa682 <_ZdlPvj>
        return p;
    }
 23fcb94:	4620      	mov	r0, r4
 23fcb96:	b003      	add	sp, #12
 23fcb98:	bd30      	pop	{r4, r5, pc}

023fcb9a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23fcb9a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fcb9c:	b510      	push	{r4, lr}
      if (_M_empty())
 23fcb9e:	b90a      	cbnz	r2, 23fcba4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fcba0:	f001 f8c0 	bl	23fdd24 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fcba4:	68c3      	ldr	r3, [r0, #12]
    }
 23fcba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fcbaa:	4718      	bx	r3

023fcbac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fcbac:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fcbae:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fcbb0:	f100 0110 	add.w	r1, r0, #16
 23fcbb4:	f7ff fff1 	bl	23fcb9a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fcbb8:	bd08      	pop	{r3, pc}

023fcbba <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fcbba:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fcbbc:	b510      	push	{r4, lr}
      if (_M_empty())
 23fcbbe:	b90a      	cbnz	r2, 23fcbc4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fcbc0:	f001 f8b0 	bl	23fdd24 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fcbc4:	68c3      	ldr	r3, [r0, #12]
    }
 23fcbc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fcbca:	4718      	bx	r3

023fcbcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fcbcc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fcbce:	6800      	ldr	r0, [r0, #0]
 23fcbd0:	f100 0110 	add.w	r1, r0, #16
 23fcbd4:	f7ff fff1 	bl	23fcbba <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fcbd8:	bd08      	pop	{r3, pc}
	...

023fcbdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fcbdc:	b538      	push	{r3, r4, r5, lr}
 23fcbde:	2300      	movs	r3, #0
 23fcbe0:	4604      	mov	r4, r0
 23fcbe2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fcbe4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fcbe6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fcbe8:	f7fd fd47 	bl	23fa67a <_Znwj>
 23fcbec:	b128      	cbz	r0, 23fcbfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fcbee:	2301      	movs	r3, #1
 23fcbf0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23fcbf4:	4b02      	ldr	r3, [pc, #8]	; (23fcc00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23fcbf6:	60c5      	str	r5, [r0, #12]
 23fcbf8:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fcbfa:	6020      	str	r0, [r4, #0]
	}
 23fcbfc:	4620      	mov	r0, r4
 23fcbfe:	bd38      	pop	{r3, r4, r5, pc}
 23fcc00:	023ffdd8 	.word	0x023ffdd8

023fcc04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23fcc04:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fcc06:	2300      	movs	r3, #0
 23fcc08:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fcc0a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fcc0c:	4604      	mov	r4, r0
 23fcc0e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fcc10:	b12b      	cbz	r3, 23fcc1e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fcc12:	2202      	movs	r2, #2
 23fcc14:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fcc16:	68eb      	ldr	r3, [r5, #12]
 23fcc18:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fcc1a:	68ab      	ldr	r3, [r5, #8]
 23fcc1c:	60a3      	str	r3, [r4, #8]
    }
 23fcc1e:	4620      	mov	r0, r4
 23fcc20:	bd38      	pop	{r3, r4, r5, pc}
	...

023fcc24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fcc24:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcc26:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fcc28:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23fcc2a:	4668      	mov	r0, sp
 23fcc2c:	f7ff ff56 	bl	23fcadc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fcc30:	f04f 0302 	mov.w	r3, #2
 23fcc34:	e8d4 2f4f 	ldrexb	r2, [r4]
 23fcc38:	2a00      	cmp	r2, #0
 23fcc3a:	d103      	bne.n	23fcc44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23fcc3c:	e8c4 3f41 	strexb	r1, r3, [r4]
 23fcc40:	2900      	cmp	r1, #0
 23fcc42:	d1f7      	bne.n	23fcc34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23fcc44:	d121      	bne.n	23fcc8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23fcc46:	f104 050c 	add.w	r5, r4, #12
 23fcc4a:	4669      	mov	r1, sp
 23fcc4c:	4628      	mov	r0, r5
 23fcc4e:	f7ff ff45 	bl	23fcadc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23fcc52:	2201      	movs	r2, #1
 23fcc54:	1c63      	adds	r3, r4, #1
 23fcc56:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fcc5a:	2000      	movs	r0, #0
 23fcc5c:	f104 0308 	add.w	r3, r4, #8
 23fcc60:	e8d3 6fef 	ldaex	r6, [r3]
 23fcc64:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23fcc68:	2a00      	cmp	r2, #0
 23fcc6a:	d1f9      	bne.n	23fcc60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23fcc6c:	b16e      	cbz	r6, 23fcc8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23fcc6e:	f7ff fd8f 	bl	23fc790 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fcc72:	b178      	cbz	r0, 23fcc94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fcc74:	4629      	mov	r1, r5
 23fcc76:	4630      	mov	r0, r6
 23fcc78:	f7ff ff8f 	bl	23fcb9a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23fcc7c:	4630      	mov	r0, r6
 23fcc7e:	f7ff fefc 	bl	23fca7a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fcc82:	2110      	movs	r1, #16
 23fcc84:	4630      	mov	r0, r6
 23fcc86:	f7fd fcfc 	bl	23fa682 <_ZdlPvj>
        p_->setError(std::move(error));
 23fcc8a:	4668      	mov	r0, sp
 23fcc8c:	f7ff ff33 	bl	23fcaf6 <_ZN8particle5ErrorD1Ev>
    }
 23fcc90:	b009      	add	sp, #36	; 0x24
 23fcc92:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fcc94:	4631      	mov	r1, r6
 23fcc96:	a802      	add	r0, sp, #8
 23fcc98:	f7ff ffb4 	bl	23fcc04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fcc9c:	68e0      	ldr	r0, [r4, #12]
 23fcc9e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fcca2:	b108      	cbz	r0, 23fcca8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23fcca4:	f001 f88a 	bl	23fddbc <strdup>
        type_(type) {
 23fcca8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fccaa:	2010      	movs	r0, #16
 23fccac:	f8ad 501c 	strh.w	r5, [sp, #28]
 23fccb0:	f7fd fce3 	bl	23fa67a <_Znwj>
 23fccb4:	4605      	mov	r5, r0
 23fccb6:	b1e8      	cbz	r0, 23fccf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23fccb8:	2700      	movs	r7, #0
 23fccba:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fccbc:	2018      	movs	r0, #24
 23fccbe:	f7fd fcdc 	bl	23fa67a <_Znwj>
 23fccc2:	4604      	mov	r4, r0
 23fccc4:	b188      	cbz	r0, 23fccea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23fccc6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fccc8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fccca:	a802      	add	r0, sp, #8
 23fcccc:	f7ff fede 	bl	23fca8c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fccd0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fccd2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fccd4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fccd6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fccd8:	9204      	str	r2, [sp, #16]
 23fccda:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fccdc:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23fccde:	60e3      	str	r3, [r4, #12]
 23fcce0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23fcce4:	9205      	str	r2, [sp, #20]
 23fcce6:	f7ff fef9 	bl	23fcadc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23fccea:	4b08      	ldr	r3, [pc, #32]	; (23fcd0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fccec:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fccee:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fccf0:	4b07      	ldr	r3, [pc, #28]	; (23fcd10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fccf2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fccf4:	a806      	add	r0, sp, #24
 23fccf6:	f7ff fefe 	bl	23fcaf6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fccfa:	a802      	add	r0, sp, #8
 23fccfc:	f7ff febd 	bl	23fca7a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fcd00:	2200      	movs	r2, #0
 23fcd02:	4629      	mov	r1, r5
 23fcd04:	4803      	ldr	r0, [pc, #12]	; (23fcd14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fcd06:	f7ff fd51 	bl	23fc7ac <application_thread_invoke>
 23fcd0a:	e7b7      	b.n	23fcc7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fcd0c:	023fcbad 	.word	0x023fcbad
 23fcd10:	023fce29 	.word	0x023fce29
 23fcd14:	023fca53 	.word	0x023fca53

023fcd18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fcd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcd1c:	b08b      	sub	sp, #44	; 0x2c
 23fcd1e:	4605      	mov	r5, r0
 23fcd20:	460f      	mov	r7, r1
 23fcd22:	4690      	mov	r8, r2
 23fcd24:	4699      	mov	r9, r3
 23fcd26:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fcd2a:	f7ff fd69 	bl	23fc800 <spark_cloud_flag_connected>
 23fcd2e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fcd30:	4683      	mov	fp, r0
 23fcd32:	bb38      	cbnz	r0, 23fcd84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fcd34:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fcd38:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fcd3a:	a905      	add	r1, sp, #20
 23fcd3c:	4630      	mov	r0, r6
 23fcd3e:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fcd42:	f7ff fecb 	bl	23fcadc <_ZN8particle5ErrorC1EOS0_>
 23fcd46:	2014      	movs	r0, #20
 23fcd48:	f7fd fc97 	bl	23fa67a <_Znwj>
 23fcd4c:	4604      	mov	r4, r0
 23fcd4e:	b148      	cbz	r0, 23fcd64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fcd50:	2302      	movs	r3, #2
 23fcd52:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fcd54:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fcd56:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fcd5a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fcd5c:	4631      	mov	r1, r6
 23fcd5e:	300c      	adds	r0, #12
 23fcd60:	f7ff febc 	bl	23fcadc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fcd64:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fcd66:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fcd68:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fcd6c:	f7ff ff36 	bl	23fcbdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fcd70:	4630      	mov	r0, r6
 23fcd72:	f7ff fec0 	bl	23fcaf6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fcd76:	a805      	add	r0, sp, #20
 23fcd78:	f7ff febd 	bl	23fcaf6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fcd7c:	4628      	mov	r0, r5
 23fcd7e:	b00b      	add	sp, #44	; 0x2c
 23fcd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fcd84:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fcd86:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fcd88:	2014      	movs	r0, #20
 23fcd8a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fcd8e:	9307      	str	r3, [sp, #28]
 23fcd90:	f7fd fc73 	bl	23fa67a <_Znwj>
 23fcd94:	4601      	mov	r1, r0
 23fcd96:	b118      	cbz	r0, 23fcda0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fcd98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fcd9c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fcd9e:	7044      	strb	r4, [r0, #1]
 23fcda0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fcda2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fcda4:	f7ff ff1a 	bl	23fcbdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fcda8:	4b1e      	ldr	r3, [pc, #120]	; (23fce24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fcdaa:	2008      	movs	r0, #8
 23fcdac:	9308      	str	r3, [sp, #32]
 23fcdae:	f7fd fc64 	bl	23fa67a <_Znwj>
 23fcdb2:	4604      	mov	r4, r0
 23fcdb4:	b110      	cbz	r0, 23fcdbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fcdb6:	a903      	add	r1, sp, #12
 23fcdb8:	f7ff fecb 	bl	23fcb52 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fcdbc:	464a      	mov	r2, r9
 23fcdbe:	4641      	mov	r1, r8
 23fcdc0:	4638      	mov	r0, r7
 23fcdc2:	9600      	str	r6, [sp, #0]
 23fcdc4:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fcdc8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fcdca:	f7ff fd27 	bl	23fc81c <spark_send_event>
 23fcdce:	b9b8      	cbnz	r0, 23fce00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fcdd0:	9b03      	ldr	r3, [sp, #12]
 23fcdd2:	3301      	adds	r3, #1
 23fcdd4:	781b      	ldrb	r3, [r3, #0]
 23fcdd6:	b2db      	uxtb	r3, r3
 23fcdd8:	b993      	cbnz	r3, 23fce00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fcdda:	9305      	str	r3, [sp, #20]
 23fcddc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fcde0:	a905      	add	r1, sp, #20
 23fcde2:	a803      	add	r0, sp, #12
 23fcde4:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fcde8:	f7ff ff1c 	bl	23fcc24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fcdec:	a805      	add	r0, sp, #20
 23fcdee:	f7ff fe82 	bl	23fcaf6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fcdf2:	a805      	add	r0, sp, #20
 23fcdf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fcdf6:	f7ff feb5 	bl	23fcb64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fcdfa:	a806      	add	r0, sp, #24
 23fcdfc:	f7fd fd22 	bl	23fa844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fce00:	a903      	add	r1, sp, #12
 23fce02:	a805      	add	r0, sp, #20
 23fce04:	f7ff fea5 	bl	23fcb52 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fce08:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fce0a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fce0c:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fce0e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fce10:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fce12:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fce14:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fce16:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fce18:	f7fd fd14 	bl	23fa844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fce1c:	a804      	add	r0, sp, #16
 23fce1e:	f7fd fd11 	bl	23fa844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fce22:	e7ab      	b.n	23fcd7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fce24:	023fcea5 	.word	0x023fcea5

023fce28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fce28:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fce2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fce2c:	4605      	mov	r5, r0
	switch (__op)
 23fce2e:	d103      	bne.n	23fce38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fce30:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fce32:	6003      	str	r3, [r0, #0]
      }
 23fce34:	2000      	movs	r0, #0
 23fce36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fce38:	2a02      	cmp	r2, #2
 23fce3a:	d010      	beq.n	23fce5e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fce3c:	2a03      	cmp	r2, #3
 23fce3e:	d1f9      	bne.n	23fce34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fce40:	6804      	ldr	r4, [r0, #0]
 23fce42:	2c00      	cmp	r4, #0
 23fce44:	d0f6      	beq.n	23fce34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fce46:	f104 0010 	add.w	r0, r4, #16
 23fce4a:	f7ff fe54 	bl	23fcaf6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fce4e:	4620      	mov	r0, r4
 23fce50:	f7ff fe13 	bl	23fca7a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fce54:	2118      	movs	r1, #24
 23fce56:	4620      	mov	r0, r4
 23fce58:	f7fd fc13 	bl	23fa682 <_ZdlPvj>
 23fce5c:	e7ea      	b.n	23fce34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fce5e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fce60:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fce62:	f7fd fc0a 	bl	23fa67a <_Znwj>
 23fce66:	4604      	mov	r4, r0
 23fce68:	b150      	cbz	r0, 23fce80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23fce6a:	4631      	mov	r1, r6
 23fce6c:	f7ff feca 	bl	23fcc04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fce70:	6930      	ldr	r0, [r6, #16]
 23fce72:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fce76:	b108      	cbz	r0, 23fce7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fce78:	f000 ffa0 	bl	23fddbc <strdup>
        type_(type) {
 23fce7c:	6120      	str	r0, [r4, #16]
 23fce7e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fce80:	602c      	str	r4, [r5, #0]
	}
 23fce82:	e7d7      	b.n	23fce34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fce84 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fce84:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fce86:	2300      	movs	r3, #0
 23fce88:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fce8a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fce8c:	4604      	mov	r4, r0
 23fce8e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fce90:	b12b      	cbz	r3, 23fce9e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fce92:	2202      	movs	r2, #2
 23fce94:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fce96:	68eb      	ldr	r3, [r5, #12]
 23fce98:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fce9a:	68ab      	ldr	r3, [r5, #8]
 23fce9c:	60a3      	str	r3, [r4, #8]
    }
 23fce9e:	4620      	mov	r0, r4
 23fcea0:	bd38      	pop	{r3, r4, r5, pc}
	...

023fcea4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fcea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcea6:	4604      	mov	r4, r0
 23fcea8:	b089      	sub	sp, #36	; 0x24
 23fceaa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fceac:	a801      	add	r0, sp, #4
 23fceae:	4611      	mov	r1, r2
 23fceb0:	f7ff fe58 	bl	23fcb64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fceb4:	b1a4      	cbz	r4, 23fcee0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fceb6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fceb8:	b11d      	cbz	r5, 23fcec2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fceba:	4628      	mov	r0, r5
 23fcebc:	f000 ff7e 	bl	23fddbc <strdup>
 23fcec0:	4605      	mov	r5, r0
 23fcec2:	a801      	add	r0, sp, #4
 23fcec4:	a903      	add	r1, sp, #12
        type_(type) {
 23fcec6:	9503      	str	r5, [sp, #12]
 23fcec8:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fcecc:	f7ff feaa 	bl	23fcc24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fced0:	a803      	add	r0, sp, #12
 23fced2:	f7ff fe10 	bl	23fcaf6 <_ZN8particle5ErrorD1Ev>
 23fced6:	a802      	add	r0, sp, #8
 23fced8:	f7fd fcb4 	bl	23fa844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcedc:	b009      	add	sp, #36	; 0x24
 23fcede:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fcee0:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fcee2:	9d01      	ldr	r5, [sp, #4]
 23fcee4:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fcee8:	2a00      	cmp	r2, #0
 23fceea:	d103      	bne.n	23fcef4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fceec:	e8c5 3f41 	strexb	r1, r3, [r5]
 23fcef0:	2900      	cmp	r1, #0
 23fcef2:	d1f7      	bne.n	23fcee4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23fcef4:	d1ef      	bne.n	23fced6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23fcef6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23fcef8:	2201      	movs	r2, #1
 23fcefa:	18eb      	adds	r3, r5, r3
 23fcefc:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fcf00:	1d2b      	adds	r3, r5, #4
 23fcf02:	e8d3 6fef 	ldaex	r6, [r3]
 23fcf06:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fcf0a:	2a00      	cmp	r2, #0
 23fcf0c:	d1f9      	bne.n	23fcf02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fcf0e:	2e00      	cmp	r6, #0
 23fcf10:	d0e1      	beq.n	23fced6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fcf12:	4620      	mov	r0, r4
 23fcf14:	f7ff fc3c 	bl	23fc790 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fcf18:	4607      	mov	r7, r0
 23fcf1a:	b160      	cbz	r0, 23fcf36 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fcf1c:	4630      	mov	r0, r6
 23fcf1e:	f105 010c 	add.w	r1, r5, #12
 23fcf22:	f7ff fe4a 	bl	23fcbba <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fcf26:	4630      	mov	r0, r6
 23fcf28:	f7ff fda7 	bl	23fca7a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fcf2c:	2110      	movs	r1, #16
 23fcf2e:	4630      	mov	r0, r6
 23fcf30:	f7fd fba7 	bl	23fa682 <_ZdlPvj>
 23fcf34:	e7cf      	b.n	23fced6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fcf36:	4631      	mov	r1, r6
 23fcf38:	a803      	add	r0, sp, #12
 23fcf3a:	f7ff ffa3 	bl	23fce84 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fcf3e:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fcf40:	2010      	movs	r0, #16
 23fcf42:	f88d 301c 	strb.w	r3, [sp, #28]
 23fcf46:	f7fd fb98 	bl	23fa67a <_Znwj>
 23fcf4a:	4605      	mov	r5, r0
 23fcf4c:	b1d0      	cbz	r0, 23fcf84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fcf4e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fcf50:	2014      	movs	r0, #20
 23fcf52:	f7fd fb92 	bl	23fa67a <_Znwj>
 23fcf56:	4604      	mov	r4, r0
 23fcf58:	b178      	cbz	r0, 23fcf7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fcf5a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fcf5c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fcf5e:	a803      	add	r0, sp, #12
 23fcf60:	f7ff fd94 	bl	23fca8c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcf64:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fcf66:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcf68:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcf6a:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fcf6c:	9205      	str	r2, [sp, #20]
 23fcf6e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcf70:	60e3      	str	r3, [r4, #12]
 23fcf72:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fcf76:	9206      	str	r2, [sp, #24]
 23fcf78:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fcf7a:	4b07      	ldr	r3, [pc, #28]	; (23fcf98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fcf7c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fcf7e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fcf80:	4b06      	ldr	r3, [pc, #24]	; (23fcf9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fcf82:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fcf84:	a803      	add	r0, sp, #12
 23fcf86:	f7ff fd78 	bl	23fca7a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fcf8a:	2200      	movs	r2, #0
 23fcf8c:	4629      	mov	r1, r5
 23fcf8e:	4804      	ldr	r0, [pc, #16]	; (23fcfa0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fcf90:	f7ff fc0c 	bl	23fc7ac <application_thread_invoke>
 23fcf94:	e7c7      	b.n	23fcf26 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fcf96:	bf00      	nop
 23fcf98:	023fcbcd 	.word	0x023fcbcd
 23fcf9c:	023fcfa5 	.word	0x023fcfa5
 23fcfa0:	023fca53 	.word	0x023fca53

023fcfa4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23fcfa4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fcfa6:	b570      	push	{r4, r5, r6, lr}
 23fcfa8:	4604      	mov	r4, r0
	switch (__op)
 23fcfaa:	d103      	bne.n	23fcfb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fcfac:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fcfae:	6003      	str	r3, [r0, #0]
      }
 23fcfb0:	2000      	movs	r0, #0
 23fcfb2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fcfb4:	2a02      	cmp	r2, #2
 23fcfb6:	d00c      	beq.n	23fcfd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fcfb8:	2a03      	cmp	r2, #3
 23fcfba:	d1f9      	bne.n	23fcfb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fcfbc:	6804      	ldr	r4, [r0, #0]
 23fcfbe:	2c00      	cmp	r4, #0
 23fcfc0:	d0f6      	beq.n	23fcfb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fcfc2:	4620      	mov	r0, r4
 23fcfc4:	f7ff fd59 	bl	23fca7a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fcfc8:	2114      	movs	r1, #20
 23fcfca:	4620      	mov	r0, r4
 23fcfcc:	f7fd fb59 	bl	23fa682 <_ZdlPvj>
 23fcfd0:	e7ee      	b.n	23fcfb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fcfd2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fcfd4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fcfd6:	f7fd fb50 	bl	23fa67a <_Znwj>
 23fcfda:	4605      	mov	r5, r0
 23fcfdc:	b120      	cbz	r0, 23fcfe8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23fcfde:	4631      	mov	r1, r6
 23fcfe0:	f7ff ff50 	bl	23fce84 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fcfe4:	7c33      	ldrb	r3, [r6, #16]
 23fcfe6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fcfe8:	6025      	str	r5, [r4, #0]
	}
 23fcfea:	e7e1      	b.n	23fcfb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fcfec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fcfec:	2200      	movs	r2, #0
 23fcfee:	6840      	ldr	r0, [r0, #4]
 23fcff0:	4611      	mov	r1, r2
 23fcff2:	f7ff bc91 	b.w	23fc918 <network_listening>

023fcff6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fcff6:	2200      	movs	r2, #0
 23fcff8:	6840      	ldr	r0, [r0, #4]
 23fcffa:	4611      	mov	r1, r2
 23fcffc:	f7ff bca8 	b.w	23fc950 <network_get_listen_timeout>

023fd000 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd000:	2200      	movs	r2, #0
 23fd002:	6840      	ldr	r0, [r0, #4]
 23fd004:	f7ff bc96 	b.w	23fc934 <network_set_listen_timeout>

023fd008 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd008:	2200      	movs	r2, #0
 23fd00a:	6840      	ldr	r0, [r0, #4]
 23fd00c:	f081 0101 	eor.w	r1, r1, #1
 23fd010:	f7ff bc74 	b.w	23fc8fc <network_listen>

023fd014 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd014:	2300      	movs	r3, #0
 23fd016:	6840      	ldr	r0, [r0, #4]
 23fd018:	461a      	mov	r2, r3
 23fd01a:	4619      	mov	r1, r3
 23fd01c:	f7ff bc60 	b.w	23fc8e0 <network_off>

023fd020 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd020:	2300      	movs	r3, #0
 23fd022:	6840      	ldr	r0, [r0, #4]
 23fd024:	461a      	mov	r2, r3
 23fd026:	4619      	mov	r1, r3
 23fd028:	f7ff bc4c 	b.w	23fc8c4 <network_on>

023fd02c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd02c:	2200      	movs	r2, #0
 23fd02e:	6840      	ldr	r0, [r0, #4]
 23fd030:	4611      	mov	r1, r2
 23fd032:	f7ff bc39 	b.w	23fc8a8 <network_ready>

023fd036 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd036:	2200      	movs	r2, #0
 23fd038:	6840      	ldr	r0, [r0, #4]
 23fd03a:	4611      	mov	r1, r2
 23fd03c:	f7ff bc18 	b.w	23fc870 <network_connecting>

023fd040 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd040:	2200      	movs	r2, #0
 23fd042:	2102      	movs	r1, #2
 23fd044:	6840      	ldr	r0, [r0, #4]
 23fd046:	f7ff bc21 	b.w	23fc88c <network_disconnect>

023fd04a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd04a:	2300      	movs	r3, #0
 23fd04c:	6840      	ldr	r0, [r0, #4]
 23fd04e:	461a      	mov	r2, r3
 23fd050:	f7ff bc00 	b.w	23fc854 <network_connect>

023fd054 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd054:	2203      	movs	r2, #3
 23fd056:	4b02      	ldr	r3, [pc, #8]	; (23fd060 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd058:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd05a:	4a02      	ldr	r2, [pc, #8]	; (23fd064 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd05c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd05e:	4770      	bx	lr
 23fd060:	1007ae90 	.word	0x1007ae90
 23fd064:	023ffdf4 	.word	0x023ffdf4

023fd068 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fd068:	4770      	bx	lr

023fd06a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fd06a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd06c:	4606      	mov	r6, r0
 23fd06e:	4615      	mov	r5, r2
 23fd070:	460c      	mov	r4, r1
 23fd072:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fd074:	42bc      	cmp	r4, r7
 23fd076:	d006      	beq.n	23fd086 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fd078:	6833      	ldr	r3, [r6, #0]
 23fd07a:	4630      	mov	r0, r6
 23fd07c:	689b      	ldr	r3, [r3, #8]
 23fd07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fd082:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fd084:	e7f6      	b.n	23fd074 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fd086:	4628      	mov	r0, r5
 23fd088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd08a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fd08a:	2200      	movs	r2, #0
 23fd08c:	7c00      	ldrb	r0, [r0, #16]
 23fd08e:	f7ff b96b 	b.w	23fc368 <hal_i2c_write>

023fd092 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fd092:	2100      	movs	r1, #0
 23fd094:	7c00      	ldrb	r0, [r0, #16]
 23fd096:	f7ff b975 	b.w	23fc384 <hal_i2c_available>

023fd09a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fd09a:	2100      	movs	r1, #0
 23fd09c:	7c00      	ldrb	r0, [r0, #16]
 23fd09e:	f7ff b97f 	b.w	23fc3a0 <hal_i2c_read>

023fd0a2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fd0a2:	2100      	movs	r1, #0
 23fd0a4:	7c00      	ldrb	r0, [r0, #16]
 23fd0a6:	f7ff b989 	b.w	23fc3bc <hal_i2c_peek>

023fd0aa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fd0aa:	2100      	movs	r1, #0
 23fd0ac:	7c00      	ldrb	r0, [r0, #16]
 23fd0ae:	f7ff b993 	b.w	23fc3d8 <hal_i2c_flush>

023fd0b2 <_ZN7TwoWireD0Ev>:
 23fd0b2:	b510      	push	{r4, lr}
 23fd0b4:	4604      	mov	r4, r0
 23fd0b6:	2114      	movs	r1, #20
 23fd0b8:	f7fd fae3 	bl	23fa682 <_ZdlPvj>
 23fd0bc:	4620      	mov	r0, r4
 23fd0be:	bd10      	pop	{r4, pc}

023fd0c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd0c0:	b538      	push	{r3, r4, r5, lr}
 23fd0c2:	4604      	mov	r4, r0
 23fd0c4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fd0c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd0ca:	2200      	movs	r2, #0
 23fd0cc:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd0d0:	4b09      	ldr	r3, [pc, #36]	; (23fd0f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fd0d2:	4608      	mov	r0, r1
  _i2c = i2c;
 23fd0d4:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd0d6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fd0d8:	4629      	mov	r1, r5
 23fd0da:	f7ff f999 	bl	23fc410 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd0de:	30bf      	adds	r0, #191	; 0xbf
 23fd0e0:	d108      	bne.n	23fd0f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fd0e2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd0e4:	07db      	lsls	r3, r3, #31
 23fd0e6:	d505      	bpl.n	23fd0f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fd0e8:	6868      	ldr	r0, [r5, #4]
 23fd0ea:	f7ff fc69 	bl	23fc9c0 <free>
    free(conf.tx_buffer);
 23fd0ee:	68e8      	ldr	r0, [r5, #12]
 23fd0f0:	f7ff fc66 	bl	23fc9c0 <free>
}
 23fd0f4:	4620      	mov	r0, r4
 23fd0f6:	bd38      	pop	{r3, r4, r5, pc}
 23fd0f8:	023ffe30 	.word	0x023ffe30

023fd0fc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fd0fc:	2300      	movs	r3, #0
 23fd0fe:	7c00      	ldrb	r0, [r0, #16]
 23fd100:	461a      	mov	r2, r3
 23fd102:	4619      	mov	r1, r3
 23fd104:	f7ff b906 	b.w	23fc314 <hal_i2c_begin>

023fd108 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fd108:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fd10a:	2200      	movs	r2, #0
 23fd10c:	2314      	movs	r3, #20
 23fd10e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fd112:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fd116:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fd118:	7c00      	ldrb	r0, [r0, #16]
 23fd11a:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd11e:	684b      	ldr	r3, [r1, #4]
 23fd120:	9303      	str	r3, [sp, #12]
 23fd122:	68cb      	ldr	r3, [r1, #12]
 23fd124:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fd126:	7a0b      	ldrb	r3, [r1, #8]
 23fd128:	a901      	add	r1, sp, #4
 23fd12a:	9305      	str	r3, [sp, #20]
 23fd12c:	f7ff f97e 	bl	23fc42c <hal_i2c_request_ex>
}
 23fd130:	b007      	add	sp, #28
 23fd132:	f85d fb04 	ldr.w	pc, [sp], #4

023fd136 <_ZN7TwoWire11requestFromEhjh>:
{
 23fd136:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fd138:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fd13a:	f88d 1000 	strb.w	r1, [sp]
 23fd13e:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fd142:	bf18      	it	ne
 23fd144:	2301      	movne	r3, #1
 23fd146:	9103      	str	r1, [sp, #12]
 23fd148:	4669      	mov	r1, sp
    size_ = size;
 23fd14a:	9201      	str	r2, [sp, #4]
 23fd14c:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd150:	f7ff ffda 	bl	23fd108 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fd154:	b005      	add	sp, #20
 23fd156:	f85d fb04 	ldr.w	pc, [sp], #4

023fd15a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fd15a:	2200      	movs	r2, #0
 23fd15c:	7c00      	ldrb	r0, [r0, #16]
 23fd15e:	f7ff b8e7 	b.w	23fc330 <hal_i2c_begin_transmission>

023fd162 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fd162:	2200      	movs	r2, #0
 23fd164:	7c00      	ldrb	r0, [r0, #16]
 23fd166:	f7ff b8f1 	b.w	23fc34c <hal_i2c_end_transmission>

023fd16a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fd16a:	2101      	movs	r1, #1
 23fd16c:	f7ff bff9 	b.w	23fd162 <_ZN7TwoWire15endTransmissionEh>

023fd170 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd170:	4770      	bx	lr

023fd172 <_ZN9IPAddressD0Ev>:
 23fd172:	b510      	push	{r4, lr}
 23fd174:	4604      	mov	r4, r0
 23fd176:	2118      	movs	r1, #24
 23fd178:	f7fd fa83 	bl	23fa682 <_ZdlPvj>
 23fd17c:	4620      	mov	r0, r4
 23fd17e:	bd10      	pop	{r4, pc}

023fd180 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd180:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd182:	7d03      	ldrb	r3, [r0, #20]
{
 23fd184:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd186:	2b06      	cmp	r3, #6
 23fd188:	f04f 0400 	mov.w	r4, #0
{
 23fd18c:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd18e:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd192:	d012      	beq.n	23fd1ba <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd194:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd198:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd19c:	220a      	movs	r2, #10
 23fd19e:	4630      	mov	r0, r6
 23fd1a0:	f000 f95d 	bl	23fd45e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd1a4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd1a6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd1a8:	d019      	beq.n	23fd1de <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd1aa:	2c00      	cmp	r4, #0
 23fd1ac:	d0f4      	beq.n	23fd198 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd1ae:	212e      	movs	r1, #46	; 0x2e
 23fd1b0:	4630      	mov	r0, r6
 23fd1b2:	f000 f93b 	bl	23fd42c <_ZN5Print5printEc>
 23fd1b6:	4404      	add	r4, r0
 23fd1b8:	e7ee      	b.n	23fd198 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd1ba:	232f      	movs	r3, #47	; 0x2f
 23fd1bc:	466a      	mov	r2, sp
 23fd1be:	4639      	mov	r1, r7
 23fd1c0:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd1c2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd1c6:	f7ff f93f 	bl	23fc448 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd1ca:	4668      	mov	r0, sp
 23fd1cc:	f7fd fa30 	bl	23fa630 <strlen>
 23fd1d0:	6833      	ldr	r3, [r6, #0]
 23fd1d2:	4602      	mov	r2, r0
 23fd1d4:	4669      	mov	r1, sp
 23fd1d6:	4630      	mov	r0, r6
 23fd1d8:	68db      	ldr	r3, [r3, #12]
 23fd1da:	4798      	blx	r3
 23fd1dc:	4604      	mov	r4, r0
    }
    return n;
}
 23fd1de:	4620      	mov	r0, r4
 23fd1e0:	b00d      	add	sp, #52	; 0x34
 23fd1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd1e4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd1e4:	b510      	push	{r4, lr}
 23fd1e6:	4604      	mov	r4, r0
 23fd1e8:	4b04      	ldr	r3, [pc, #16]	; (23fd1fc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd1ea:	2211      	movs	r2, #17
 23fd1ec:	2100      	movs	r1, #0
 23fd1ee:	f840 3b04 	str.w	r3, [r0], #4
 23fd1f2:	f000 fdad 	bl	23fdd50 <memset>
}
 23fd1f6:	4620      	mov	r0, r4
 23fd1f8:	bd10      	pop	{r4, pc}
 23fd1fa:	bf00      	nop
 23fd1fc:	023ffe58 	.word	0x023ffe58

023fd200 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd200:	4603      	mov	r3, r0
 23fd202:	4a07      	ldr	r2, [pc, #28]	; (23fd220 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd204:	b510      	push	{r4, lr}
 23fd206:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd20a:	f101 0210 	add.w	r2, r1, #16
 23fd20e:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd212:	4291      	cmp	r1, r2
 23fd214:	f843 4b04 	str.w	r4, [r3], #4
 23fd218:	d1f9      	bne.n	23fd20e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd21a:	780a      	ldrb	r2, [r1, #0]
 23fd21c:	701a      	strb	r2, [r3, #0]
}
 23fd21e:	bd10      	pop	{r4, pc}
 23fd220:	023ffe58 	.word	0x023ffe58

023fd224 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd224:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd226:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd22a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd22e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd232:	2304      	movs	r3, #4
 23fd234:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd238:	6041      	str	r1, [r0, #4]
 23fd23a:	7503      	strb	r3, [r0, #20]
}
 23fd23c:	bd10      	pop	{r4, pc}
	...

023fd240 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd240:	b507      	push	{r0, r1, r2, lr}
 23fd242:	4b06      	ldr	r3, [pc, #24]	; (23fd25c <_ZN9IPAddressC1EPKh+0x1c>)
 23fd244:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd246:	78cb      	ldrb	r3, [r1, #3]
 23fd248:	9300      	str	r3, [sp, #0]
 23fd24a:	788b      	ldrb	r3, [r1, #2]
 23fd24c:	784a      	ldrb	r2, [r1, #1]
 23fd24e:	7809      	ldrb	r1, [r1, #0]
 23fd250:	f7ff ffe8 	bl	23fd224 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd254:	b003      	add	sp, #12
 23fd256:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd25a:	bf00      	nop
 23fd25c:	023ffe58 	.word	0x023ffe58

023fd260 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fd260:	4b01      	ldr	r3, [pc, #4]	; (23fd268 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fd262:	4a02      	ldr	r2, [pc, #8]	; (23fd26c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fd264:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fd266:	4770      	bx	lr
 23fd268:	1007ae98 	.word	0x1007ae98
 23fd26c:	023ffe64 	.word	0x023ffe64

023fd270 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fd270:	2300      	movs	r3, #0
 23fd272:	6840      	ldr	r0, [r0, #4]
 23fd274:	461a      	mov	r2, r3
 23fd276:	f7ff baed 	b.w	23fc854 <network_connect>

023fd27a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fd27a:	2200      	movs	r2, #0
 23fd27c:	2102      	movs	r1, #2
 23fd27e:	6840      	ldr	r0, [r0, #4]
 23fd280:	f7ff bb04 	b.w	23fc88c <network_disconnect>

023fd284 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fd284:	2200      	movs	r2, #0
 23fd286:	6840      	ldr	r0, [r0, #4]
 23fd288:	4611      	mov	r1, r2
 23fd28a:	f7ff baf1 	b.w	23fc870 <network_connecting>

023fd28e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fd28e:	2200      	movs	r2, #0
 23fd290:	6840      	ldr	r0, [r0, #4]
 23fd292:	4611      	mov	r1, r2
 23fd294:	f7ff bb08 	b.w	23fc8a8 <network_ready>

023fd298 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fd298:	2300      	movs	r3, #0
 23fd29a:	6840      	ldr	r0, [r0, #4]
 23fd29c:	461a      	mov	r2, r3
 23fd29e:	4619      	mov	r1, r3
 23fd2a0:	f7ff bb10 	b.w	23fc8c4 <network_on>

023fd2a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fd2a4:	2300      	movs	r3, #0
 23fd2a6:	6840      	ldr	r0, [r0, #4]
 23fd2a8:	461a      	mov	r2, r3
 23fd2aa:	4619      	mov	r1, r3
 23fd2ac:	f7ff bb18 	b.w	23fc8e0 <network_off>

023fd2b0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fd2b0:	2100      	movs	r1, #0
 23fd2b2:	6840      	ldr	r0, [r0, #4]
 23fd2b4:	f7ff bb5a 	b.w	23fc96c <network_is_on>

023fd2b8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fd2b8:	2100      	movs	r1, #0
 23fd2ba:	6840      	ldr	r0, [r0, #4]
 23fd2bc:	f7ff bb64 	b.w	23fc988 <network_is_off>

023fd2c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fd2c0:	2200      	movs	r2, #0
 23fd2c2:	6840      	ldr	r0, [r0, #4]
 23fd2c4:	f081 0101 	eor.w	r1, r1, #1
 23fd2c8:	f7ff bb18 	b.w	23fc8fc <network_listen>

023fd2cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fd2cc:	2200      	movs	r2, #0
 23fd2ce:	6840      	ldr	r0, [r0, #4]
 23fd2d0:	f7ff bb30 	b.w	23fc934 <network_set_listen_timeout>

023fd2d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fd2d4:	2200      	movs	r2, #0
 23fd2d6:	6840      	ldr	r0, [r0, #4]
 23fd2d8:	4611      	mov	r1, r2
 23fd2da:	f7ff bb39 	b.w	23fc950 <network_get_listen_timeout>

023fd2de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fd2de:	2200      	movs	r2, #0
 23fd2e0:	6840      	ldr	r0, [r0, #4]
 23fd2e2:	4611      	mov	r1, r2
 23fd2e4:	f7ff bb18 	b.w	23fc918 <network_listening>

023fd2e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fd2e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd2ec:	b095      	sub	sp, #84	; 0x54
 23fd2ee:	4614      	mov	r4, r2
 23fd2f0:	460d      	mov	r5, r1
 23fd2f2:	4607      	mov	r7, r0
    IPAddress addr;
 23fd2f4:	f7ff ff76 	bl	23fd1e4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fd2f8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fd2fa:	221c      	movs	r2, #28
 23fd2fc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fd2fe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fd300:	f000 fd26 	bl	23fdd50 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fd304:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd306:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fd308:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd30a:	2100      	movs	r1, #0
 23fd30c:	466b      	mov	r3, sp
 23fd30e:	aa0c      	add	r2, sp, #48	; 0x30
 23fd310:	f7ff f8b6 	bl	23fc480 <netdb_getaddrinfo>
    if (!r) {
 23fd314:	4604      	mov	r4, r0
 23fd316:	2800      	cmp	r0, #0
 23fd318:	d14b      	bne.n	23fd3b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd31a:	4602      	mov	r2, r0
 23fd31c:	2101      	movs	r1, #1
 23fd31e:	6868      	ldr	r0, [r5, #4]
 23fd320:	f7ff fac2 	bl	23fc8a8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd324:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd326:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd328:	4622      	mov	r2, r4
 23fd32a:	6868      	ldr	r0, [r5, #4]
 23fd32c:	f7ff fabc 	bl	23fc8a8 <network_ready>
        bool ok = false;
 23fd330:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd332:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd334:	9e00      	ldr	r6, [sp, #0]
 23fd336:	2e00      	cmp	r6, #0
 23fd338:	d03b      	beq.n	23fd3b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fd33a:	2900      	cmp	r1, #0
 23fd33c:	d139      	bne.n	23fd3b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fd33e:	6873      	ldr	r3, [r6, #4]
 23fd340:	2b02      	cmp	r3, #2
 23fd342:	d003      	beq.n	23fd34c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fd344:	2b0a      	cmp	r3, #10
 23fd346:	d011      	beq.n	23fd36c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd348:	69f6      	ldr	r6, [r6, #28]
 23fd34a:	e7f4      	b.n	23fd336 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fd34c:	f1b8 0f00 	cmp.w	r8, #0
 23fd350:	d0fa      	beq.n	23fd348 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fd352:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fd354:	a806      	add	r0, sp, #24
 23fd356:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fd358:	1d3c      	adds	r4, r7, #4
 23fd35a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fd35c:	f7ff ff70 	bl	23fd240 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fd360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd364:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd366:	4641      	mov	r1, r8
 23fd368:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fd36a:	e7ed      	b.n	23fd348 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fd36c:	f1b9 0f00 	cmp.w	r9, #0
 23fd370:	d0ea      	beq.n	23fd348 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fd372:	2210      	movs	r2, #16
 23fd374:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fd376:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fd378:	f000 fcea 	bl	23fdd50 <memset>
                    a.v = 6;
 23fd37c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd37e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fd380:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd384:	f104 0308 	add.w	r3, r4, #8
 23fd388:	3418      	adds	r4, #24
 23fd38a:	462a      	mov	r2, r5
 23fd38c:	6818      	ldr	r0, [r3, #0]
 23fd38e:	6859      	ldr	r1, [r3, #4]
 23fd390:	3308      	adds	r3, #8
 23fd392:	c203      	stmia	r2!, {r0, r1}
 23fd394:	42a3      	cmp	r3, r4
 23fd396:	4615      	mov	r5, r2
 23fd398:	d1f7      	bne.n	23fd38a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fd39a:	a901      	add	r1, sp, #4
 23fd39c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fd39e:	1d3c      	adds	r4, r7, #4
 23fd3a0:	ad07      	add	r5, sp, #28
 23fd3a2:	f7ff ff2d 	bl	23fd200 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fd3a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd3a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd3aa:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd3ac:	4649      	mov	r1, r9
 23fd3ae:	7023      	strb	r3, [r4, #0]
                    break;
 23fd3b0:	e7ca      	b.n	23fd348 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fd3b2:	9800      	ldr	r0, [sp, #0]
 23fd3b4:	f7ff f856 	bl	23fc464 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fd3b8:	4638      	mov	r0, r7
 23fd3ba:	b015      	add	sp, #84	; 0x54
 23fd3bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fd3c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fd3c0:	4b02      	ldr	r3, [pc, #8]	; (23fd3cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fd3c2:	4a03      	ldr	r2, [pc, #12]	; (23fd3d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fd3c4:	601a      	str	r2, [r3, #0]
 23fd3c6:	2200      	movs	r2, #0
 23fd3c8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fd3ca:	4770      	bx	lr
 23fd3cc:	1007ae9c 	.word	0x1007ae9c
 23fd3d0:	023ffe70 	.word	0x023ffe70

023fd3d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd3d6:	4606      	mov	r6, r0
 23fd3d8:	460d      	mov	r5, r1
  size_t n = 0;
 23fd3da:	2400      	movs	r4, #0
 23fd3dc:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd3de:	42bd      	cmp	r5, r7
 23fd3e0:	d00c      	beq.n	23fd3fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd3e2:	6833      	ldr	r3, [r6, #0]
 23fd3e4:	4630      	mov	r0, r6
 23fd3e6:	689b      	ldr	r3, [r3, #8]
 23fd3e8:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd3ec:	4798      	blx	r3
     if (chunk>=0)
 23fd3ee:	1e03      	subs	r3, r0, #0
 23fd3f0:	db01      	blt.n	23fd3f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd3f2:	441c      	add	r4, r3
  while (size--) {
 23fd3f4:	e7f3      	b.n	23fd3de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd3f6:	2c00      	cmp	r4, #0
 23fd3f8:	bf08      	it	eq
 23fd3fa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd3fc:	4620      	mov	r0, r4
 23fd3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd400 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fd400:	b513      	push	{r0, r1, r4, lr}
 23fd402:	4604      	mov	r4, r0
    }
 23fd404:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd406:	b159      	cbz	r1, 23fd420 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd408:	9101      	str	r1, [sp, #4]
 23fd40a:	f7fd f911 	bl	23fa630 <strlen>
 23fd40e:	4602      	mov	r2, r0
 23fd410:	4620      	mov	r0, r4
 23fd412:	6823      	ldr	r3, [r4, #0]
 23fd414:	9901      	ldr	r1, [sp, #4]
 23fd416:	68db      	ldr	r3, [r3, #12]
    }
 23fd418:	b002      	add	sp, #8
 23fd41a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd41e:	4718      	bx	r3
    }
 23fd420:	b002      	add	sp, #8
 23fd422:	bd10      	pop	{r4, pc}

023fd424 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23fd424:	b508      	push	{r3, lr}
  return write(str);
 23fd426:	f7ff ffeb 	bl	23fd400 <_ZN5Print5writeEPKc>
}
 23fd42a:	bd08      	pop	{r3, pc}

023fd42c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23fd42c:	6803      	ldr	r3, [r0, #0]
 23fd42e:	689b      	ldr	r3, [r3, #8]
 23fd430:	4718      	bx	r3

023fd432 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fd432:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fd434:	210d      	movs	r1, #13
{
 23fd436:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fd438:	f7ff fff8 	bl	23fd42c <_ZN5Print5printEc>
  n += print('\n');
 23fd43c:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fd43e:	4604      	mov	r4, r0
  n += print('\n');
 23fd440:	4628      	mov	r0, r5
 23fd442:	f7ff fff3 	bl	23fd42c <_ZN5Print5printEc>
  return n;
}
 23fd446:	4420      	add	r0, r4
 23fd448:	bd38      	pop	{r3, r4, r5, pc}

023fd44a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fd44a:	b538      	push	{r3, r4, r5, lr}
 23fd44c:	4605      	mov	r5, r0
  return write(str);
 23fd44e:	f7ff ffd7 	bl	23fd400 <_ZN5Print5writeEPKc>
 23fd452:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fd454:	4628      	mov	r0, r5
 23fd456:	f7ff ffec 	bl	23fd432 <_ZN5Print7printlnEv>
  return n;
}
 23fd45a:	4420      	add	r0, r4
 23fd45c:	bd38      	pop	{r3, r4, r5, pc}

023fd45e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd45e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd460:	2a01      	cmp	r2, #1
 23fd462:	bf98      	it	ls
 23fd464:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd466:	b530      	push	{r4, r5, lr}
 23fd468:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd46a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd46e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd470:	460d      	mov	r5, r1
 23fd472:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd476:	fb01 5312 	mls	r3, r1, r2, r5
 23fd47a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd47e:	2b09      	cmp	r3, #9
 23fd480:	bf94      	ite	ls
 23fd482:	3330      	addls	r3, #48	; 0x30
 23fd484:	3337      	addhi	r3, #55	; 0x37
 23fd486:	b2db      	uxtb	r3, r3
  } while(n);
 23fd488:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd48a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd48e:	d9ef      	bls.n	23fd470 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd490:	4621      	mov	r1, r4
 23fd492:	f7ff ffb5 	bl	23fd400 <_ZN5Print5writeEPKc>
}
 23fd496:	b00b      	add	sp, #44	; 0x2c
 23fd498:	bd30      	pop	{r4, r5, pc}
	...

023fd49c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fd49c:	2200      	movs	r2, #0
 23fd49e:	4b01      	ldr	r3, [pc, #4]	; (23fd4a4 <_GLOBAL__sub_I_RGB+0x8>)
 23fd4a0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fd4a2:	4770      	bx	lr
 23fd4a4:	1007aea4 	.word	0x1007aea4

023fd4a8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fd4a8:	2100      	movs	r1, #0
 23fd4aa:	f7ff b859 	b.w	23fc560 <hal_spi_release>

023fd4ae <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fd4ae:	2100      	movs	r1, #0
 23fd4b0:	f7ff b848 	b.w	23fc544 <hal_spi_acquire>

023fd4b4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fd4b4:	b510      	push	{r4, lr}
 23fd4b6:	4604      	mov	r4, r0
 23fd4b8:	4608      	mov	r0, r1
{
    _spi = spi;
 23fd4ba:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fd4bc:	f7ff f80a 	bl	23fc4d4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd4c0:	2300      	movs	r3, #0
}
 23fd4c2:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd4c4:	6063      	str	r3, [r4, #4]
}
 23fd4c6:	bd10      	pop	{r4, pc}

023fd4c8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fd4c8:	b513      	push	{r0, r1, r4, lr}
 23fd4ca:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fd4cc:	7800      	ldrb	r0, [r0, #0]
 23fd4ce:	f7ff ffee 	bl	23fd4ae <_ZN8SPIClass4lockEv.isra.0>
 23fd4d2:	b958      	cbnz	r0, 23fd4ec <_ZN8SPIClass5beginEv+0x24>
 23fd4d4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fd4d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fd4da:	9001      	str	r0, [sp, #4]
 23fd4dc:	f7fe ffde 	bl	23fc49c <hal_spi_begin>
        unlock();
 23fd4e0:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd4e2:	b002      	add	sp, #8
 23fd4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd4e8:	f7ff bfde 	b.w	23fd4a8 <_ZN8SPIClass6unlockEv.isra.0>
 23fd4ec:	b002      	add	sp, #8
 23fd4ee:	bd10      	pop	{r4, pc}

023fd4f0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fd4f0:	7800      	ldrb	r0, [r0, #0]
 23fd4f2:	f7ff bfd9 	b.w	23fd4a8 <_ZN8SPIClass6unlockEv.isra.0>
	...

023fd4f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fd4f8:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fd4fa:	2400      	movs	r4, #0
 23fd4fc:	0840      	lsrs	r0, r0, #1
 23fd4fe:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fd500:	6818      	ldr	r0, [r3, #0]
 23fd502:	b2e5      	uxtb	r5, r4
 23fd504:	4288      	cmp	r0, r1
 23fd506:	d906      	bls.n	23fd516 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fd508:	3401      	adds	r4, #1
 23fd50a:	2c08      	cmp	r4, #8
 23fd50c:	d002      	beq.n	23fd514 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fd50e:	0840      	lsrs	r0, r0, #1
 23fd510:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fd512:	e7f5      	b.n	23fd500 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fd514:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fd516:	4b02      	ldr	r3, [pc, #8]	; (23fd520 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fd518:	5d5b      	ldrb	r3, [r3, r5]
 23fd51a:	7013      	strb	r3, [r2, #0]
}
 23fd51c:	bd30      	pop	{r4, r5, pc}
 23fd51e:	bf00      	nop
 23fd520:	023ffea4 	.word	0x023ffea4

023fd524 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fd524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd528:	4606      	mov	r6, r0
 23fd52a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fd52c:	7800      	ldrb	r0, [r0, #0]
{
 23fd52e:	460c      	mov	r4, r1
    CHECK(lock());
 23fd530:	f7ff ffbd 	bl	23fd4ae <_ZN8SPIClass4lockEv.isra.0>
 23fd534:	2800      	cmp	r0, #0
 23fd536:	db1b      	blt.n	23fd570 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd538:	2214      	movs	r2, #20
 23fd53a:	2100      	movs	r1, #0
 23fd53c:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fd53e:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd540:	f000 fc06 	bl	23fdd50 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd544:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fd546:	2200      	movs	r2, #0
 23fd548:	4628      	mov	r0, r5
 23fd54a:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd54c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fd550:	f7fe ffdc 	bl	23fc50c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fd554:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fd558:	b113      	cbz	r3, 23fd560 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fd55a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fd55e:	b155      	cbz	r5, 23fd576 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fd560:	2700      	movs	r7, #0
 23fd562:	2501      	movs	r5, #1
 23fd564:	46b9      	mov	r9, r7
 23fd566:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fd568:	7923      	ldrb	r3, [r4, #4]
 23fd56a:	b15d      	cbz	r5, 23fd584 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fd56c:	b1c3      	cbz	r3, 23fd5a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fd56e:	2000      	movs	r0, #0
}
 23fd570:	b00f      	add	sp, #60	; 0x3c
 23fd572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fd576:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fd57a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fd57e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fd582:	e7f1      	b.n	23fd568 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fd584:	2b00      	cmp	r3, #0
 23fd586:	d135      	bne.n	23fd5f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fd588:	68a3      	ldr	r3, [r4, #8]
 23fd58a:	4543      	cmp	r3, r8
 23fd58c:	d108      	bne.n	23fd5a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fd58e:	f88d 9020 	strb.w	r9, [sp, #32]
 23fd592:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fd596:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fd59a:	89a3      	ldrh	r3, [r4, #12]
 23fd59c:	429a      	cmp	r2, r3
 23fd59e:	d0e6      	beq.n	23fd56e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fd5a0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fd5a2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fd5a4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fd5a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fd5aa:	ab04      	add	r3, sp, #16
 23fd5ac:	f10d 020f 	add.w	r2, sp, #15
 23fd5b0:	f7ff ffa2 	bl	23fd4f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fd5b4:	7921      	ldrb	r1, [r4, #4]
 23fd5b6:	b985      	cbnz	r5, 23fd5da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fd5b8:	b989      	cbnz	r1, 23fd5de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fd5ba:	68a3      	ldr	r3, [r4, #8]
 23fd5bc:	4543      	cmp	r3, r8
 23fd5be:	d30e      	bcc.n	23fd5de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fd5c0:	f88d 9020 	strb.w	r9, [sp, #32]
 23fd5c4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fd5c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fd5cc:	89a3      	ldrh	r3, [r4, #12]
 23fd5ce:	429a      	cmp	r2, r3
 23fd5d0:	d105      	bne.n	23fd5de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fd5d2:	9b04      	ldr	r3, [sp, #16]
 23fd5d4:	4543      	cmp	r3, r8
 23fd5d6:	d102      	bne.n	23fd5de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fd5d8:	e7c9      	b.n	23fd56e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23fd5da:	2900      	cmp	r1, #0
 23fd5dc:	d1f9      	bne.n	23fd5d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23fd5de:	2300      	movs	r3, #0
 23fd5e0:	9301      	str	r3, [sp, #4]
 23fd5e2:	7b63      	ldrb	r3, [r4, #13]
 23fd5e4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23fd5e8:	9300      	str	r3, [sp, #0]
 23fd5ea:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23fd5ec:	7830      	ldrb	r0, [r6, #0]
 23fd5ee:	f7fe ff9b 	bl	23fc528 <hal_spi_set_settings>
 23fd5f2:	e7bc      	b.n	23fd56e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23fd5f4:	462b      	mov	r3, r5
 23fd5f6:	462a      	mov	r2, r5
 23fd5f8:	2101      	movs	r1, #1
 23fd5fa:	e9cd 5500 	strd	r5, r5, [sp]
 23fd5fe:	e7f5      	b.n	23fd5ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023fd600 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23fd600:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fd602:	7800      	ldrb	r0, [r0, #0]
 23fd604:	f7fe ff58 	bl	23fc4b8 <hal_spi_transfer>
}
 23fd608:	b2c0      	uxtb	r0, r0
 23fd60a:	bd08      	pop	{r3, pc}

023fd60c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fd60c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd60e:	2000      	movs	r0, #0
 23fd610:	4b04      	ldr	r3, [pc, #16]	; (23fd624 <_GLOBAL__sub_I_System+0x18>)
 23fd612:	601a      	str	r2, [r3, #0]
 23fd614:	4b04      	ldr	r3, [pc, #16]	; (23fd628 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fd616:	4a05      	ldr	r2, [pc, #20]	; (23fd62c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fd618:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fd61c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd61e:	f7ff b89b 	b.w	23fc758 <set_system_mode>
 23fd622:	bf00      	nop
 23fd624:	1007aec0 	.word	0x1007aec0
 23fd628:	1007aeb4 	.word	0x1007aeb4
 23fd62c:	ffff0000 	.word	0xffff0000

023fd630 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fd630:	4b02      	ldr	r3, [pc, #8]	; (23fd63c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fd632:	681a      	ldr	r2, [r3, #0]
 23fd634:	4b02      	ldr	r3, [pc, #8]	; (23fd640 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fd636:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fd638:	4770      	bx	lr
 23fd63a:	bf00      	nop
 23fd63c:	1007ad84 	.word	0x1007ad84
 23fd640:	1007aec4 	.word	0x1007aec4

023fd644 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fd644:	4770      	bx	lr

023fd646 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fd646:	7441      	strb	r1, [r0, #17]
}
 23fd648:	4770      	bx	lr

023fd64a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fd64a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fd64c:	7c00      	ldrb	r0, [r0, #16]
 23fd64e:	f7fe ffe9 	bl	23fc624 <hal_usart_available_data_for_write>
}
 23fd652:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd656:	bd08      	pop	{r3, pc}

023fd658 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fd658:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fd65a:	7c00      	ldrb	r0, [r0, #16]
 23fd65c:	f7fe ff9c 	bl	23fc598 <hal_usart_available>
}
 23fd660:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd664:	bd08      	pop	{r3, pc}

023fd666 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fd666:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fd668:	7c00      	ldrb	r0, [r0, #16]
 23fd66a:	f7fe ffb1 	bl	23fc5d0 <hal_usart_peek>
}
 23fd66e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd672:	bd08      	pop	{r3, pc}

023fd674 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fd674:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fd676:	7c00      	ldrb	r0, [r0, #16]
 23fd678:	f7fe ff9c 	bl	23fc5b4 <hal_usart_read>
}
 23fd67c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd680:	bd08      	pop	{r3, pc}

023fd682 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fd682:	7c00      	ldrb	r0, [r0, #16]
 23fd684:	f7fe bfb2 	b.w	23fc5ec <hal_usart_flush>

023fd688 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fd688:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fd68a:	7c45      	ldrb	r5, [r0, #17]
{
 23fd68c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fd68e:	b12d      	cbz	r5, 23fd69c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fd690:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fd692:	b003      	add	sp, #12
 23fd694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fd698:	f7fe bf70 	b.w	23fc57c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fd69c:	7c00      	ldrb	r0, [r0, #16]
 23fd69e:	9101      	str	r1, [sp, #4]
 23fd6a0:	f7fe ffc0 	bl	23fc624 <hal_usart_available_data_for_write>
 23fd6a4:	2800      	cmp	r0, #0
 23fd6a6:	9901      	ldr	r1, [sp, #4]
 23fd6a8:	dcf2      	bgt.n	23fd690 <_ZN11USARTSerial5writeEh+0x8>
}
 23fd6aa:	4628      	mov	r0, r5
 23fd6ac:	b003      	add	sp, #12
 23fd6ae:	bd30      	pop	{r4, r5, pc}

023fd6b0 <_ZN11USARTSerialD0Ev>:
 23fd6b0:	b510      	push	{r4, lr}
 23fd6b2:	4604      	mov	r4, r0
 23fd6b4:	2114      	movs	r1, #20
 23fd6b6:	f7fc ffe4 	bl	23fa682 <_ZdlPvj>
 23fd6ba:	4620      	mov	r0, r4
 23fd6bc:	bd10      	pop	{r4, pc}
	...

023fd6c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fd6c0:	b510      	push	{r4, lr}
 23fd6c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd6c6:	4604      	mov	r4, r0
 23fd6c8:	4608      	mov	r0, r1
 23fd6ca:	4611      	mov	r1, r2
 23fd6cc:	2200      	movs	r2, #0
 23fd6ce:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd6d2:	4b04      	ldr	r3, [pc, #16]	; (23fd6e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fd6d4:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fd6d6:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fd6d8:	2301      	movs	r3, #1
 23fd6da:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fd6dc:	f7fe ffb0 	bl	23fc640 <hal_usart_init_ex>
}
 23fd6e0:	4620      	mov	r0, r4
 23fd6e2:	bd10      	pop	{r4, pc}
 23fd6e4:	023ffed0 	.word	0x023ffed0

023fd6e8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fd6e8:	7c00      	ldrb	r0, [r0, #16]
 23fd6ea:	f7fe bf8d 	b.w	23fc608 <hal_usart_is_enabled>

023fd6ee <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fd6ee:	7441      	strb	r1, [r0, #17]
}
 23fd6f0:	4770      	bx	lr

023fd6f2 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fd6f2:	4770      	bx	lr

023fd6f4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fd6f4:	4770      	bx	lr

023fd6f6 <_ZN9USBSerial4readEv>:
{
 23fd6f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fd6f8:	2100      	movs	r1, #0
 23fd6fa:	7c00      	ldrb	r0, [r0, #16]
 23fd6fc:	f7fe ffe6 	bl	23fc6cc <HAL_USB_USART_Receive_Data>
}
 23fd700:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd704:	bd08      	pop	{r3, pc}

023fd706 <_ZN9USBSerial4peekEv>:
{
 23fd706:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fd708:	2101      	movs	r1, #1
 23fd70a:	7c00      	ldrb	r0, [r0, #16]
 23fd70c:	f7fe ffde 	bl	23fc6cc <HAL_USB_USART_Receive_Data>
}
 23fd710:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd714:	bd08      	pop	{r3, pc}

023fd716 <_ZN9USBSerial17availableForWriteEv>:
{
 23fd716:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fd718:	7c00      	ldrb	r0, [r0, #16]
 23fd71a:	f7fe ffc9 	bl	23fc6b0 <HAL_USB_USART_Available_Data_For_Write>
}
 23fd71e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd722:	bd08      	pop	{r3, pc}

023fd724 <_ZN9USBSerial9availableEv>:
{
 23fd724:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fd726:	7c00      	ldrb	r0, [r0, #16]
 23fd728:	f7fe ffb4 	bl	23fc694 <HAL_USB_USART_Available_Data>
}
 23fd72c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd730:	bd08      	pop	{r3, pc}

023fd732 <_ZN9USBSerial5writeEh>:
{
 23fd732:	b513      	push	{r0, r1, r4, lr}
 23fd734:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fd736:	7c00      	ldrb	r0, [r0, #16]
{
 23fd738:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fd73a:	f7fe ffb9 	bl	23fc6b0 <HAL_USB_USART_Available_Data_For_Write>
 23fd73e:	2800      	cmp	r0, #0
 23fd740:	9901      	ldr	r1, [sp, #4]
 23fd742:	dc01      	bgt.n	23fd748 <_ZN9USBSerial5writeEh+0x16>
 23fd744:	7c60      	ldrb	r0, [r4, #17]
 23fd746:	b120      	cbz	r0, 23fd752 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fd748:	7c20      	ldrb	r0, [r4, #16]
 23fd74a:	f7fe ffcd 	bl	23fc6e8 <HAL_USB_USART_Send_Data>
 23fd74e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fd752:	b002      	add	sp, #8
 23fd754:	bd10      	pop	{r4, pc}

023fd756 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fd756:	7c00      	ldrb	r0, [r0, #16]
 23fd758:	f7fe bfd4 	b.w	23fc704 <HAL_USB_USART_Flush_Data>

023fd75c <_ZN9USBSerialD0Ev>:
 23fd75c:	b510      	push	{r4, lr}
 23fd75e:	4604      	mov	r4, r0
 23fd760:	2114      	movs	r1, #20
 23fd762:	f7fc ff8e 	bl	23fa682 <_ZdlPvj>
 23fd766:	4620      	mov	r0, r4
 23fd768:	bd10      	pop	{r4, pc}
	...

023fd76c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fd76c:	b510      	push	{r4, lr}
 23fd76e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd772:	4604      	mov	r4, r0
 23fd774:	4608      	mov	r0, r1
 23fd776:	2100      	movs	r1, #0
 23fd778:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fd77c:	4b04      	ldr	r3, [pc, #16]	; (23fd790 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fd77e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fd780:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fd782:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fd784:	4611      	mov	r1, r2
  _blocking = true;
 23fd786:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fd788:	f7fe ff68 	bl	23fc65c <HAL_USB_USART_Init>
}
 23fd78c:	4620      	mov	r0, r4
 23fd78e:	bd10      	pop	{r4, pc}
 23fd790:	023fff00 	.word	0x023fff00

023fd794 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fd794:	2200      	movs	r2, #0
 23fd796:	7c00      	ldrb	r0, [r0, #16]
 23fd798:	f7fe bf6e 	b.w	23fc678 <HAL_USB_USART_Begin>

023fd79c <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
 23fd79c:	7c00      	ldrb	r0, [r0, #16]
 23fd79e:	f7fe bfbf 	b.w	23fc720 <HAL_USB_USART_Is_Enabled>

023fd7a2 <_ZN9USBSerialcvbEv>:
  return isEnabled();
 23fd7a2:	f7ff bffb 	b.w	23fd79c <_ZN9USBSerial9isEnabledEv>

023fd7a6 <_Z19acquireSerialBufferv>:
{
 23fd7a6:	b510      	push	{r4, lr}
 23fd7a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fd7aa:	2214      	movs	r2, #20
 23fd7ac:	2100      	movs	r1, #0
 23fd7ae:	f000 facf 	bl	23fdd50 <memset>
}
 23fd7b2:	4620      	mov	r0, r4
 23fd7b4:	bd10      	pop	{r4, pc}
	...

023fd7b8 <_Z16_fetch_usbserialv>:
{
 23fd7b8:	b510      	push	{r4, lr}
 23fd7ba:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fd7bc:	a803      	add	r0, sp, #12
 23fd7be:	f7ff fff2 	bl	23fd7a6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fd7c2:	4c0c      	ldr	r4, [pc, #48]	; (23fd7f4 <_Z16_fetch_usbserialv+0x3c>)
 23fd7c4:	e8d4 1f8f 	ldab	r1, [r4]
 23fd7c8:	f011 0101 	ands.w	r1, r1, #1
 23fd7cc:	d10f      	bne.n	23fd7ee <_Z16_fetch_usbserialv+0x36>
 23fd7ce:	4620      	mov	r0, r4
 23fd7d0:	9101      	str	r1, [sp, #4]
 23fd7d2:	f7fc ff65 	bl	23fa6a0 <__cxa_guard_acquire>
 23fd7d6:	9901      	ldr	r1, [sp, #4]
 23fd7d8:	b148      	cbz	r0, 23fd7ee <_Z16_fetch_usbserialv+0x36>
 23fd7da:	aa03      	add	r2, sp, #12
 23fd7dc:	4806      	ldr	r0, [pc, #24]	; (23fd7f8 <_Z16_fetch_usbserialv+0x40>)
 23fd7de:	f7ff ffc5 	bl	23fd76c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fd7e2:	4620      	mov	r0, r4
 23fd7e4:	f7fc ff61 	bl	23fa6aa <__cxa_guard_release>
 23fd7e8:	4804      	ldr	r0, [pc, #16]	; (23fd7fc <_Z16_fetch_usbserialv+0x44>)
 23fd7ea:	f000 fa9e 	bl	23fdd2a <atexit>
	return _usbserial;
}
 23fd7ee:	4802      	ldr	r0, [pc, #8]	; (23fd7f8 <_Z16_fetch_usbserialv+0x40>)
 23fd7f0:	b008      	add	sp, #32
 23fd7f2:	bd10      	pop	{r4, pc}
 23fd7f4:	1007aec8 	.word	0x1007aec8
 23fd7f8:	1007aecc 	.word	0x1007aecc
 23fd7fc:	023fd6f3 	.word	0x023fd6f3

023fd800 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fd800:	2200      	movs	r2, #0
 23fd802:	6840      	ldr	r0, [r0, #4]
 23fd804:	4611      	mov	r1, r2
 23fd806:	f7ff b84f 	b.w	23fc8a8 <network_ready>

023fd80a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd80a:	2200      	movs	r2, #0
 23fd80c:	6840      	ldr	r0, [r0, #4]
 23fd80e:	4611      	mov	r1, r2
 23fd810:	f7ff b882 	b.w	23fc918 <network_listening>

023fd814 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd814:	2200      	movs	r2, #0
 23fd816:	6840      	ldr	r0, [r0, #4]
 23fd818:	4611      	mov	r1, r2
 23fd81a:	f7ff b899 	b.w	23fc950 <network_get_listen_timeout>

023fd81e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd81e:	2200      	movs	r2, #0
 23fd820:	6840      	ldr	r0, [r0, #4]
 23fd822:	f7ff b887 	b.w	23fc934 <network_set_listen_timeout>

023fd826 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd826:	2200      	movs	r2, #0
 23fd828:	6840      	ldr	r0, [r0, #4]
 23fd82a:	f081 0101 	eor.w	r1, r1, #1
 23fd82e:	f7ff b865 	b.w	23fc8fc <network_listen>

023fd832 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd832:	2300      	movs	r3, #0
 23fd834:	6840      	ldr	r0, [r0, #4]
 23fd836:	461a      	mov	r2, r3
 23fd838:	4619      	mov	r1, r3
 23fd83a:	f7ff b851 	b.w	23fc8e0 <network_off>

023fd83e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd83e:	2300      	movs	r3, #0
 23fd840:	6840      	ldr	r0, [r0, #4]
 23fd842:	461a      	mov	r2, r3
 23fd844:	4619      	mov	r1, r3
 23fd846:	f7ff b83d 	b.w	23fc8c4 <network_on>

023fd84a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd84a:	2200      	movs	r2, #0
 23fd84c:	6840      	ldr	r0, [r0, #4]
 23fd84e:	4611      	mov	r1, r2
 23fd850:	f7ff b80e 	b.w	23fc870 <network_connecting>

023fd854 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd854:	2200      	movs	r2, #0
 23fd856:	2102      	movs	r1, #2
 23fd858:	6840      	ldr	r0, [r0, #4]
 23fd85a:	f7ff b817 	b.w	23fc88c <network_disconnect>

023fd85e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd85e:	2300      	movs	r3, #0
 23fd860:	6840      	ldr	r0, [r0, #4]
 23fd862:	461a      	mov	r2, r3
 23fd864:	f7fe bff6 	b.w	23fc854 <network_connect>

023fd868 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fd868:	2204      	movs	r2, #4
 23fd86a:	4b02      	ldr	r3, [pc, #8]	; (23fd874 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fd86c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fd86e:	4a02      	ldr	r2, [pc, #8]	; (23fd878 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fd870:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fd872:	4770      	bx	lr
 23fd874:	1007aee0 	.word	0x1007aee0
 23fd878:	023fff30 	.word	0x023fff30

023fd87c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fd87c:	4b01      	ldr	r3, [pc, #4]	; (23fd884 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fd87e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fd880:	4770      	bx	lr
 23fd882:	bf00      	nop
 23fd884:	1007ad88 	.word	0x1007ad88

023fd888 <serialEventRun>:
{
 23fd888:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fd88a:	4b0f      	ldr	r3, [pc, #60]	; (23fd8c8 <serialEventRun+0x40>)
 23fd88c:	b143      	cbz	r3, 23fd8a0 <serialEventRun+0x18>
 23fd88e:	f7ff ff93 	bl	23fd7b8 <_Z16_fetch_usbserialv>
 23fd892:	6803      	ldr	r3, [r0, #0]
 23fd894:	691b      	ldr	r3, [r3, #16]
 23fd896:	4798      	blx	r3
 23fd898:	2800      	cmp	r0, #0
 23fd89a:	dd01      	ble.n	23fd8a0 <serialEventRun+0x18>
        serialEvent();
 23fd89c:	e000      	b.n	23fd8a0 <serialEventRun+0x18>
 23fd89e:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fd8a0:	4b0a      	ldr	r3, [pc, #40]	; (23fd8cc <serialEventRun+0x44>)
 23fd8a2:	b143      	cbz	r3, 23fd8b6 <serialEventRun+0x2e>
 23fd8a4:	f000 f9ac 	bl	23fdc00 <_Z22__fetch_global_Serial1v>
 23fd8a8:	6803      	ldr	r3, [r0, #0]
 23fd8aa:	691b      	ldr	r3, [r3, #16]
 23fd8ac:	4798      	blx	r3
 23fd8ae:	2800      	cmp	r0, #0
 23fd8b0:	dd01      	ble.n	23fd8b6 <serialEventRun+0x2e>
        serialEvent1();
 23fd8b2:	e000      	b.n	23fd8b6 <serialEventRun+0x2e>
 23fd8b4:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fd8b6:	4b06      	ldr	r3, [pc, #24]	; (23fd8d0 <serialEventRun+0x48>)
 23fd8b8:	b10b      	cbz	r3, 23fd8be <serialEventRun+0x36>
 23fd8ba:	f000 f9e7 	bl	23fdc8c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fd8be:	4b05      	ldr	r3, [pc, #20]	; (23fd8d4 <serialEventRun+0x4c>)
 23fd8c0:	b10b      	cbz	r3, 23fd8c6 <serialEventRun+0x3e>
 23fd8c2:	f000 fa19 	bl	23fdcf8 <_Z15serialEventRun3v>
}
 23fd8c6:	bd08      	pop	{r3, pc}
	...

023fd8d8 <_post_loop>:
{
 23fd8d8:	b508      	push	{r3, lr}
	serialEventRun();
 23fd8da:	f7ff ffd5 	bl	23fd888 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fd8de:	f7fe fc8d 	bl	23fc1fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fd8e2:	4b01      	ldr	r3, [pc, #4]	; (23fd8e8 <_post_loop+0x10>)
 23fd8e4:	6018      	str	r0, [r3, #0]
}
 23fd8e6:	bd08      	pop	{r3, pc}
 23fd8e8:	1007aef0 	.word	0x1007aef0

023fd8ec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fd8ec:	4805      	ldr	r0, [pc, #20]	; (23fd904 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fd8ee:	4a06      	ldr	r2, [pc, #24]	; (23fd908 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fd8f0:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fd8f2:	1a12      	subs	r2, r2, r0
 23fd8f4:	4905      	ldr	r1, [pc, #20]	; (23fd90c <_Z33system_initialize_user_backup_ramv+0x20>)
 23fd8f6:	f000 fa1e 	bl	23fdd36 <memcpy>
    __backup_sram_signature = signature;
 23fd8fa:	4b05      	ldr	r3, [pc, #20]	; (23fd910 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fd8fc:	4a05      	ldr	r2, [pc, #20]	; (23fd914 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fd8fe:	601a      	str	r2, [r3, #0]
}
 23fd900:	bd08      	pop	{r3, pc}
 23fd902:	bf00      	nop
 23fd904:	1007b400 	.word	0x1007b400
 23fd908:	1007b404 	.word	0x1007b404
 23fd90c:	085ffad0 	.word	0x085ffad0
 23fd910:	1007b400 	.word	0x1007b400
 23fd914:	9a271c1e 	.word	0x9a271c1e

023fd918 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd918:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fd91a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd91c:	461a      	mov	r2, r3
 23fd91e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fd922:	9300      	str	r3, [sp, #0]
 23fd924:	f7fe ff5e 	bl	23fc7e4 <system_ctrl_set_result>
}
 23fd928:	b003      	add	sp, #12
 23fd92a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fd930 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fd930:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fd932:	8843      	ldrh	r3, [r0, #2]
 23fd934:	2b0a      	cmp	r3, #10
 23fd936:	d008      	beq.n	23fd94a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fd938:	2b50      	cmp	r3, #80	; 0x50
 23fd93a:	d10b      	bne.n	23fd954 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fd93c:	4b09      	ldr	r3, [pc, #36]	; (23fd964 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fd93e:	681b      	ldr	r3, [r3, #0]
 23fd940:	b14b      	cbz	r3, 23fd956 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fd942:	b003      	add	sp, #12
 23fd944:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fd948:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fd94a:	f7ff ffe5 	bl	23fd918 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fd94e:	b003      	add	sp, #12
 23fd950:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd954:	2300      	movs	r3, #0
 23fd956:	461a      	mov	r2, r3
 23fd958:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fd95c:	9300      	str	r3, [sp, #0]
 23fd95e:	f7fe ff41 	bl	23fc7e4 <system_ctrl_set_result>
}
 23fd962:	e7f4      	b.n	23fd94e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fd964:	1007aeec 	.word	0x1007aeec

023fd968 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fd968:	2100      	movs	r1, #0
{
 23fd96a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fd96c:	4811      	ldr	r0, [pc, #68]	; (23fd9b4 <module_user_init_hook+0x4c>)
 23fd96e:	f7ff f85f 	bl	23fca30 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fd972:	4b11      	ldr	r3, [pc, #68]	; (23fd9b8 <module_user_init_hook+0x50>)
 23fd974:	681a      	ldr	r2, [r3, #0]
 23fd976:	4b11      	ldr	r3, [pc, #68]	; (23fd9bc <module_user_init_hook+0x54>)
 23fd978:	429a      	cmp	r2, r3
 23fd97a:	bf0c      	ite	eq
 23fd97c:	2201      	moveq	r2, #1
 23fd97e:	2200      	movne	r2, #0
 23fd980:	4b0f      	ldr	r3, [pc, #60]	; (23fd9c0 <module_user_init_hook+0x58>)
 23fd982:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fd984:	d001      	beq.n	23fd98a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fd986:	f7ff ffb1 	bl	23fd8ec <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fd98a:	f7fe fc1b 	bl	23fc1c4 <HAL_RNG_GetRandomNumber>
 23fd98e:	4604      	mov	r4, r0
    srand(seed);
 23fd990:	f000 f9e6 	bl	23fdd60 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fd994:	4b0b      	ldr	r3, [pc, #44]	; (23fd9c4 <module_user_init_hook+0x5c>)
 23fd996:	b113      	cbz	r3, 23fd99e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fd998:	4620      	mov	r0, r4
 23fd99a:	e000      	b.n	23fd99e <module_user_init_hook+0x36>
 23fd99c:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fd99e:	2100      	movs	r1, #0
 23fd9a0:	4808      	ldr	r0, [pc, #32]	; (23fd9c4 <module_user_init_hook+0x5c>)
 23fd9a2:	f7fe ff49 	bl	23fc838 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fd9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fd9aa:	2100      	movs	r1, #0
 23fd9ac:	4806      	ldr	r0, [pc, #24]	; (23fd9c8 <module_user_init_hook+0x60>)
 23fd9ae:	f7fe bf0b 	b.w	23fc7c8 <system_ctrl_set_app_request_handler>
 23fd9b2:	bf00      	nop
 23fd9b4:	023fd87d 	.word	0x023fd87d
 23fd9b8:	1007b400 	.word	0x1007b400
 23fd9bc:	9a271c1e 	.word	0x9a271c1e
 23fd9c0:	1007aee8 	.word	0x1007aee8
 23fd9c4:	00000000 	.word	0x00000000
 23fd9c8:	023fd931 	.word	0x023fd931

023fd9cc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fd9cc:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fd9ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd9d0:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fd9d2:	d902      	bls.n	23fd9da <pinAvailable+0xe>
    return false;
 23fd9d4:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fd9d6:	b003      	add	sp, #12
 23fd9d8:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fd9da:	f1a0 030f 	sub.w	r3, r0, #15
 23fd9de:	2b02      	cmp	r3, #2
 23fd9e0:	d90b      	bls.n	23fd9fa <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fd9e2:	2801      	cmp	r0, #1
 23fd9e4:	d821      	bhi.n	23fda2a <pinAvailable+0x5e>
 23fd9e6:	f000 f8b7 	bl	23fdb58 <_Z19__fetch_global_Wirev>
 23fd9ea:	2100      	movs	r1, #0
 23fd9ec:	7c00      	ldrb	r0, [r0, #16]
 23fd9ee:	f7fe fd01 	bl	23fc3f4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fd9f2:	f080 0001 	eor.w	r0, r0, #1
 23fd9f6:	b2c0      	uxtb	r0, r0
 23fd9f8:	e7ed      	b.n	23fd9d6 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fd9fa:	4d11      	ldr	r5, [pc, #68]	; (23fda40 <pinAvailable+0x74>)
 23fd9fc:	e8d5 1f8f 	ldab	r1, [r5]
 23fda00:	f011 0101 	ands.w	r1, r1, #1
 23fda04:	d10b      	bne.n	23fda1e <pinAvailable+0x52>
 23fda06:	4628      	mov	r0, r5
 23fda08:	9101      	str	r1, [sp, #4]
 23fda0a:	f7fc fe49 	bl	23fa6a0 <__cxa_guard_acquire>
 23fda0e:	9901      	ldr	r1, [sp, #4]
 23fda10:	b128      	cbz	r0, 23fda1e <pinAvailable+0x52>
 23fda12:	480c      	ldr	r0, [pc, #48]	; (23fda44 <pinAvailable+0x78>)
 23fda14:	f7ff fd4e 	bl	23fd4b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fda18:	4628      	mov	r0, r5
 23fda1a:	f7fc fe46 	bl	23fa6aa <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fda1e:	4b09      	ldr	r3, [pc, #36]	; (23fda44 <pinAvailable+0x78>)
 23fda20:	7818      	ldrb	r0, [r3, #0]
 23fda22:	f7fe fd65 	bl	23fc4f0 <hal_spi_is_enabled>
 23fda26:	2800      	cmp	r0, #0
 23fda28:	d1d4      	bne.n	23fd9d4 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fda2a:	3c08      	subs	r4, #8
 23fda2c:	2c01      	cmp	r4, #1
 23fda2e:	d805      	bhi.n	23fda3c <pinAvailable+0x70>
 23fda30:	f000 f8e6 	bl	23fdc00 <_Z22__fetch_global_Serial1v>
 23fda34:	7c00      	ldrb	r0, [r0, #16]
 23fda36:	f7fe fde7 	bl	23fc608 <hal_usart_is_enabled>
 23fda3a:	e7da      	b.n	23fd9f2 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fda3c:	2001      	movs	r0, #1
 23fda3e:	e7ca      	b.n	23fd9d6 <pinAvailable+0xa>
 23fda40:	1007ae80 	.word	0x1007ae80
 23fda44:	1007ae84 	.word	0x1007ae84

023fda48 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fda48:	281b      	cmp	r0, #27
{
 23fda4a:	b538      	push	{r3, r4, r5, lr}
 23fda4c:	4604      	mov	r4, r0
 23fda4e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fda50:	d80a      	bhi.n	23fda68 <pinMode+0x20>
 23fda52:	29ff      	cmp	r1, #255	; 0xff
 23fda54:	d008      	beq.n	23fda68 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fda56:	f7ff ffb9 	bl	23fd9cc <pinAvailable>
 23fda5a:	b128      	cbz	r0, 23fda68 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fda5c:	4629      	mov	r1, r5
 23fda5e:	4620      	mov	r0, r4
}
 23fda60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fda64:	f7fe bbe6 	b.w	23fc234 <hal_gpio_mode>
}
 23fda68:	bd38      	pop	{r3, r4, r5, pc}

023fda6a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fda6a:	b538      	push	{r3, r4, r5, lr}
 23fda6c:	4604      	mov	r4, r0
 23fda6e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fda70:	f7fe fbee 	bl	23fc250 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fda74:	28ff      	cmp	r0, #255	; 0xff
 23fda76:	d010      	beq.n	23fda9a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fda78:	2806      	cmp	r0, #6
 23fda7a:	d804      	bhi.n	23fda86 <digitalWrite+0x1c>
 23fda7c:	234d      	movs	r3, #77	; 0x4d
 23fda7e:	fa23 f000 	lsr.w	r0, r3, r0
 23fda82:	07c3      	lsls	r3, r0, #31
 23fda84:	d409      	bmi.n	23fda9a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fda86:	4620      	mov	r0, r4
 23fda88:	f7ff ffa0 	bl	23fd9cc <pinAvailable>
 23fda8c:	b128      	cbz	r0, 23fda9a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fda8e:	4629      	mov	r1, r5
 23fda90:	4620      	mov	r0, r4
}
 23fda92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fda96:	f7fe bbe9 	b.w	23fc26c <hal_gpio_write>
}
 23fda9a:	bd38      	pop	{r3, r4, r5, pc}

023fda9c <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(hal_pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
 23fda9c:	b570      	push	{r4, r5, r6, lr}
 23fda9e:	4604      	mov	r4, r0
 23fdaa0:	460d      	mov	r5, r1
 23fdaa2:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
 23fdaa4:	f7ff ff92 	bl	23fd9cc <pinAvailable>
 23fdaa8:	b198      	cbz	r0, 23fdad2 <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
 23fdaaa:	2102      	movs	r1, #2
 23fdaac:	4620      	mov	r0, r4
 23fdaae:	f7fe fbb3 	bl	23fc218 <hal_pin_validate_function>
 23fdab2:	2802      	cmp	r0, #2
 23fdab4:	d10d      	bne.n	23fdad2 <_Z11analogWritetmm+0x36>
    {
        PinMode mode = hal_gpio_get_mode(pin);
 23fdab6:	4620      	mov	r0, r4
 23fdab8:	f7fe fbca 	bl	23fc250 <hal_gpio_get_mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 23fdabc:	2801      	cmp	r0, #1
 23fdabe:	d001      	beq.n	23fdac4 <_Z11analogWritetmm+0x28>
 23fdac0:	2804      	cmp	r0, #4
 23fdac2:	d106      	bne.n	23fdad2 <_Z11analogWritetmm+0x36>
        {
            return;
        }

        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
 23fdac4:	4632      	mov	r2, r6
 23fdac6:	4629      	mov	r1, r5
 23fdac8:	4620      	mov	r0, r4
    }
}
 23fdaca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
 23fdace:	f7fe bc13 	b.w	23fc2f8 <hal_pwm_write_with_frequency_ext>
}
 23fdad2:	bd70      	pop	{r4, r5, r6, pc}

023fdad4 <_Z21analogWriteResolutionth>:

uint8_t analogWriteResolution(hal_pin_t pin, uint8_t value)
{
 23fdad4:	b538      	push	{r3, r4, r5, lr}
 23fdad6:	4604      	mov	r4, r0
 23fdad8:	460d      	mov	r5, r1
  // Safety check
  if (!pinAvailable(pin))
 23fdada:	f7ff ff77 	bl	23fd9cc <pinAvailable>
 23fdade:	b1e8      	cbz	r0, 23fdb1c <_Z21analogWriteResolutionth+0x48>
  {
      return 0;
  }

  if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
 23fdae0:	2104      	movs	r1, #4
 23fdae2:	4620      	mov	r0, r4
 23fdae4:	f7fe fb98 	bl	23fc218 <hal_pin_validate_function>
 23fdae8:	2804      	cmp	r0, #4
 23fdaea:	d108      	bne.n	23fdafe <_Z21analogWriteResolutionth+0x2a>
  {
    HAL_DAC_Set_Resolution(pin, value);
 23fdaec:	4620      	mov	r0, r4
 23fdaee:	4629      	mov	r1, r5
 23fdaf0:	f7fe fbd8 	bl	23fc2a4 <HAL_DAC_Set_Resolution>
    return HAL_DAC_Get_Resolution(pin);
 23fdaf4:	4620      	mov	r0, r4
    return hal_pwm_get_resolution(pin);
  }
  

  return 0;
}
 23fdaf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return HAL_DAC_Get_Resolution(pin);
 23fdafa:	f7fe bbc5 	b.w	23fc288 <HAL_DAC_Get_Resolution>
  else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
 23fdafe:	2102      	movs	r1, #2
 23fdb00:	4620      	mov	r0, r4
 23fdb02:	f7fe fb89 	bl	23fc218 <hal_pin_validate_function>
 23fdb06:	2802      	cmp	r0, #2
 23fdb08:	d108      	bne.n	23fdb1c <_Z21analogWriteResolutionth+0x48>
    hal_pwm_set_resolution(pin, value);
 23fdb0a:	4620      	mov	r0, r4
 23fdb0c:	4629      	mov	r1, r5
 23fdb0e:	f7fe fbe5 	bl	23fc2dc <hal_pwm_set_resolution>
    return hal_pwm_get_resolution(pin);
 23fdb12:	4620      	mov	r0, r4
}
 23fdb14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_pwm_get_resolution(pin);
 23fdb18:	f7fe bbd2 	b.w	23fc2c0 <hal_pwm_get_resolution>
}
 23fdb1c:	2000      	movs	r0, #0
 23fdb1e:	bd38      	pop	{r3, r4, r5, pc}

023fdb20 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fdb20:	4770      	bx	lr
	...

023fdb24 <_Z17acquireWireBufferv>:
{
 23fdb24:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fdb26:	4b0a      	ldr	r3, [pc, #40]	; (23fdb50 <_Z17acquireWireBufferv+0x2c>)
{
 23fdb28:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fdb2a:	6003      	str	r3, [r0, #0]
 23fdb2c:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdb2e:	4909      	ldr	r1, [pc, #36]	; (23fdb54 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fdb30:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdb32:	2020      	movs	r0, #32
 23fdb34:	f000 f8f4 	bl	23fdd20 <_ZnajRKSt9nothrow_t>
	};
 23fdb38:	2520      	movs	r5, #32
 23fdb3a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdb3c:	4905      	ldr	r1, [pc, #20]	; (23fdb54 <_Z17acquireWireBufferv+0x30>)
 23fdb3e:	4628      	mov	r0, r5
	};
 23fdb40:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdb42:	f000 f8ed 	bl	23fdd20 <_ZnajRKSt9nothrow_t>
	};
 23fdb46:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fdb4a:	4620      	mov	r0, r4
 23fdb4c:	bd38      	pop	{r3, r4, r5, pc}
 23fdb4e:	bf00      	nop
 23fdb50:	00010018 	.word	0x00010018
 23fdb54:	023fff64 	.word	0x023fff64

023fdb58 <_Z19__fetch_global_Wirev>:
{
 23fdb58:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fdb5a:	4d0e      	ldr	r5, [pc, #56]	; (23fdb94 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fdb5c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fdb5e:	e8d5 1f8f 	ldab	r1, [r5]
 23fdb62:	f011 0401 	ands.w	r4, r1, #1
 23fdb66:	d111      	bne.n	23fdb8c <_Z19__fetch_global_Wirev+0x34>
 23fdb68:	4628      	mov	r0, r5
 23fdb6a:	f7fc fd99 	bl	23fa6a0 <__cxa_guard_acquire>
 23fdb6e:	b168      	cbz	r0, 23fdb8c <_Z19__fetch_global_Wirev+0x34>
 23fdb70:	4668      	mov	r0, sp
 23fdb72:	f7ff ffd7 	bl	23fdb24 <_Z17acquireWireBufferv>
 23fdb76:	466a      	mov	r2, sp
 23fdb78:	4621      	mov	r1, r4
 23fdb7a:	4807      	ldr	r0, [pc, #28]	; (23fdb98 <_Z19__fetch_global_Wirev+0x40>)
 23fdb7c:	f7ff faa0 	bl	23fd0c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fdb80:	4628      	mov	r0, r5
 23fdb82:	f7fc fd92 	bl	23fa6aa <__cxa_guard_release>
 23fdb86:	4805      	ldr	r0, [pc, #20]	; (23fdb9c <_Z19__fetch_global_Wirev+0x44>)
 23fdb88:	f000 f8cf 	bl	23fdd2a <atexit>
	return wire;
}
 23fdb8c:	4802      	ldr	r0, [pc, #8]	; (23fdb98 <_Z19__fetch_global_Wirev+0x40>)
 23fdb8e:	b007      	add	sp, #28
 23fdb90:	bd30      	pop	{r4, r5, pc}
 23fdb92:	bf00      	nop
 23fdb94:	1007aef4 	.word	0x1007aef4
 23fdb98:	1007aef8 	.word	0x1007aef8
 23fdb9c:	023fdb21 	.word	0x023fdb21

023fdba0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fdba0:	4770      	bx	lr
	...

023fdba4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fdba4:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fdba6:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fdba8:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fdbaa:	462a      	mov	r2, r5
 23fdbac:	2100      	movs	r1, #0
 23fdbae:	f000 f8cf 	bl	23fdd50 <memset>
 23fdbb2:	8025      	strh	r5, [r4, #0]
 23fdbb4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdbb6:	4907      	ldr	r1, [pc, #28]	; (23fdbd4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fdbb8:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fdbba:	8125      	strh	r5, [r4, #8]
 23fdbbc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdbbe:	f000 f8af 	bl	23fdd20 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdbc2:	4904      	ldr	r1, [pc, #16]	; (23fdbd4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fdbc4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdbc6:	4628      	mov	r0, r5
 23fdbc8:	f000 f8aa 	bl	23fdd20 <_ZnajRKSt9nothrow_t>
    };
 23fdbcc:	60e0      	str	r0, [r4, #12]
}
 23fdbce:	4620      	mov	r0, r4
 23fdbd0:	bd38      	pop	{r3, r4, r5, pc}
 23fdbd2:	bf00      	nop
 23fdbd4:	023fff64 	.word	0x023fff64

023fdbd8 <__tcf_2>:
 23fdbd8:	4770      	bx	lr

023fdbda <__tcf_1>:
 23fdbda:	4770      	bx	lr

023fdbdc <_Z20acquireSerial1Bufferv>:
{
 23fdbdc:	b510      	push	{r4, lr}
 23fdbde:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fdbe0:	f7ff ffe0 	bl	23fdba4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fdbe4:	4620      	mov	r0, r4
 23fdbe6:	bd10      	pop	{r4, pc}

023fdbe8 <_Z20acquireSerial2Bufferv>:
 23fdbe8:	b510      	push	{r4, lr}
 23fdbea:	4604      	mov	r4, r0
 23fdbec:	f7ff ffda 	bl	23fdba4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fdbf0:	4620      	mov	r0, r4
 23fdbf2:	bd10      	pop	{r4, pc}

023fdbf4 <_Z20acquireSerial3Bufferv>:
 23fdbf4:	b510      	push	{r4, lr}
 23fdbf6:	4604      	mov	r4, r0
 23fdbf8:	f7ff ffd4 	bl	23fdba4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fdbfc:	4620      	mov	r0, r4
 23fdbfe:	bd10      	pop	{r4, pc}

023fdc00 <_Z22__fetch_global_Serial1v>:
{
 23fdc00:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fdc02:	4d0e      	ldr	r5, [pc, #56]	; (23fdc3c <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fdc04:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fdc06:	e8d5 1f8f 	ldab	r1, [r5]
 23fdc0a:	f011 0401 	ands.w	r4, r1, #1
 23fdc0e:	d111      	bne.n	23fdc34 <_Z22__fetch_global_Serial1v+0x34>
 23fdc10:	4628      	mov	r0, r5
 23fdc12:	f7fc fd45 	bl	23fa6a0 <__cxa_guard_acquire>
 23fdc16:	b168      	cbz	r0, 23fdc34 <_Z22__fetch_global_Serial1v+0x34>
 23fdc18:	a801      	add	r0, sp, #4
 23fdc1a:	f7ff ffdf 	bl	23fdbdc <_Z20acquireSerial1Bufferv>
 23fdc1e:	4621      	mov	r1, r4
 23fdc20:	aa01      	add	r2, sp, #4
 23fdc22:	4807      	ldr	r0, [pc, #28]	; (23fdc40 <_Z22__fetch_global_Serial1v+0x40>)
 23fdc24:	f7ff fd4c 	bl	23fd6c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fdc28:	4628      	mov	r0, r5
 23fdc2a:	f7fc fd3e 	bl	23fa6aa <__cxa_guard_release>
 23fdc2e:	4805      	ldr	r0, [pc, #20]	; (23fdc44 <_Z22__fetch_global_Serial1v+0x44>)
 23fdc30:	f000 f87b 	bl	23fdd2a <atexit>
    return serial1;
}
 23fdc34:	4802      	ldr	r0, [pc, #8]	; (23fdc40 <_Z22__fetch_global_Serial1v+0x40>)
 23fdc36:	b007      	add	sp, #28
 23fdc38:	bd30      	pop	{r4, r5, pc}
 23fdc3a:	bf00      	nop
 23fdc3c:	1007af0c 	.word	0x1007af0c
 23fdc40:	1007af18 	.word	0x1007af18
 23fdc44:	023fdba1 	.word	0x023fdba1

023fdc48 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fdc48:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fdc4a:	4c0d      	ldr	r4, [pc, #52]	; (23fdc80 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fdc4c:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fdc4e:	e8d4 3f8f 	ldab	r3, [r4]
 23fdc52:	07db      	lsls	r3, r3, #31
 23fdc54:	d411      	bmi.n	23fdc7a <_Z22__fetch_global_Serial2v+0x32>
 23fdc56:	4620      	mov	r0, r4
 23fdc58:	f7fc fd22 	bl	23fa6a0 <__cxa_guard_acquire>
 23fdc5c:	b168      	cbz	r0, 23fdc7a <_Z22__fetch_global_Serial2v+0x32>
 23fdc5e:	a801      	add	r0, sp, #4
 23fdc60:	f7ff ffc2 	bl	23fdbe8 <_Z20acquireSerial2Bufferv>
 23fdc64:	2101      	movs	r1, #1
 23fdc66:	aa01      	add	r2, sp, #4
 23fdc68:	4806      	ldr	r0, [pc, #24]	; (23fdc84 <_Z22__fetch_global_Serial2v+0x3c>)
 23fdc6a:	f7ff fd29 	bl	23fd6c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fdc6e:	4620      	mov	r0, r4
 23fdc70:	f7fc fd1b 	bl	23fa6aa <__cxa_guard_release>
 23fdc74:	4804      	ldr	r0, [pc, #16]	; (23fdc88 <_Z22__fetch_global_Serial2v+0x40>)
 23fdc76:	f000 f858 	bl	23fdd2a <atexit>
	return serial2;
}
 23fdc7a:	4802      	ldr	r0, [pc, #8]	; (23fdc84 <_Z22__fetch_global_Serial2v+0x3c>)
 23fdc7c:	b006      	add	sp, #24
 23fdc7e:	bd10      	pop	{r4, pc}
 23fdc80:	1007af10 	.word	0x1007af10
 23fdc84:	1007af2c 	.word	0x1007af2c
 23fdc88:	023fdbdb 	.word	0x023fdbdb

023fdc8c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fdc8c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fdc8e:	f7ff ffdb 	bl	23fdc48 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fdc92:	4b07      	ldr	r3, [pc, #28]	; (23fdcb0 <_Z15serialEventRun2v+0x24>)
 23fdc94:	4604      	mov	r4, r0
 23fdc96:	b153      	cbz	r3, 23fdcae <_Z15serialEventRun2v+0x22>
 23fdc98:	f7ff fd26 	bl	23fd6e8 <_ZN11USARTSerial9isEnabledEv>
 23fdc9c:	b138      	cbz	r0, 23fdcae <_Z15serialEventRun2v+0x22>
 23fdc9e:	6823      	ldr	r3, [r4, #0]
 23fdca0:	4620      	mov	r0, r4
 23fdca2:	691b      	ldr	r3, [r3, #16]
 23fdca4:	4798      	blx	r3
 23fdca6:	2800      	cmp	r0, #0
 23fdca8:	dd01      	ble.n	23fdcae <_Z15serialEventRun2v+0x22>
        handler();
 23fdcaa:	e000      	b.n	23fdcae <_Z15serialEventRun2v+0x22>
 23fdcac:	bf00      	nop
}
 23fdcae:	bd10      	pop	{r4, pc}
 23fdcb0:	00000000 	.word	0x00000000

023fdcb4 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fdcb4:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fdcb6:	4c0d      	ldr	r4, [pc, #52]	; (23fdcec <_Z22__fetch_global_Serial3v+0x38>)
{
 23fdcb8:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fdcba:	e8d4 3f8f 	ldab	r3, [r4]
 23fdcbe:	07db      	lsls	r3, r3, #31
 23fdcc0:	d411      	bmi.n	23fdce6 <_Z22__fetch_global_Serial3v+0x32>
 23fdcc2:	4620      	mov	r0, r4
 23fdcc4:	f7fc fcec 	bl	23fa6a0 <__cxa_guard_acquire>
 23fdcc8:	b168      	cbz	r0, 23fdce6 <_Z22__fetch_global_Serial3v+0x32>
 23fdcca:	a801      	add	r0, sp, #4
 23fdccc:	f7ff ff92 	bl	23fdbf4 <_Z20acquireSerial3Bufferv>
 23fdcd0:	2102      	movs	r1, #2
 23fdcd2:	aa01      	add	r2, sp, #4
 23fdcd4:	4806      	ldr	r0, [pc, #24]	; (23fdcf0 <_Z22__fetch_global_Serial3v+0x3c>)
 23fdcd6:	f7ff fcf3 	bl	23fd6c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fdcda:	4620      	mov	r0, r4
 23fdcdc:	f7fc fce5 	bl	23fa6aa <__cxa_guard_release>
 23fdce0:	4804      	ldr	r0, [pc, #16]	; (23fdcf4 <_Z22__fetch_global_Serial3v+0x40>)
 23fdce2:	f000 f822 	bl	23fdd2a <atexit>
	return serial3;
}
 23fdce6:	4802      	ldr	r0, [pc, #8]	; (23fdcf0 <_Z22__fetch_global_Serial3v+0x3c>)
 23fdce8:	b006      	add	sp, #24
 23fdcea:	bd10      	pop	{r4, pc}
 23fdcec:	1007af14 	.word	0x1007af14
 23fdcf0:	1007af40 	.word	0x1007af40
 23fdcf4:	023fdbd9 	.word	0x023fdbd9

023fdcf8 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fdcf8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fdcfa:	f7ff ffdb 	bl	23fdcb4 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fdcfe:	4b07      	ldr	r3, [pc, #28]	; (23fdd1c <_Z15serialEventRun3v+0x24>)
 23fdd00:	4604      	mov	r4, r0
 23fdd02:	b153      	cbz	r3, 23fdd1a <_Z15serialEventRun3v+0x22>
 23fdd04:	f7ff fcf0 	bl	23fd6e8 <_ZN11USARTSerial9isEnabledEv>
 23fdd08:	b138      	cbz	r0, 23fdd1a <_Z15serialEventRun3v+0x22>
 23fdd0a:	6823      	ldr	r3, [r4, #0]
 23fdd0c:	4620      	mov	r0, r4
 23fdd0e:	691b      	ldr	r3, [r3, #16]
 23fdd10:	4798      	blx	r3
 23fdd12:	2800      	cmp	r0, #0
 23fdd14:	dd01      	ble.n	23fdd1a <_Z15serialEventRun3v+0x22>
        handler();
 23fdd16:	e000      	b.n	23fdd1a <_Z15serialEventRun3v+0x22>
 23fdd18:	bf00      	nop
}
 23fdd1a:	bd10      	pop	{r4, pc}
 23fdd1c:	00000000 	.word	0x00000000

023fdd20 <_ZnajRKSt9nothrow_t>:
 23fdd20:	f7fc bcad 	b.w	23fa67e <_Znaj>

023fdd24 <_ZSt25__throw_bad_function_callv>:
 23fdd24:	b508      	push	{r3, lr}
 23fdd26:	f7fe fe59 	bl	23fc9dc <abort>

023fdd2a <atexit>:
 23fdd2a:	2300      	movs	r3, #0
 23fdd2c:	4601      	mov	r1, r0
 23fdd2e:	461a      	mov	r2, r3
 23fdd30:	4618      	mov	r0, r3
 23fdd32:	f000 b861 	b.w	23fddf8 <__register_exitproc>

023fdd36 <memcpy>:
 23fdd36:	440a      	add	r2, r1
 23fdd38:	1e43      	subs	r3, r0, #1
 23fdd3a:	4291      	cmp	r1, r2
 23fdd3c:	d100      	bne.n	23fdd40 <memcpy+0xa>
 23fdd3e:	4770      	bx	lr
 23fdd40:	b510      	push	{r4, lr}
 23fdd42:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fdd46:	4291      	cmp	r1, r2
 23fdd48:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fdd4c:	d1f9      	bne.n	23fdd42 <memcpy+0xc>
 23fdd4e:	bd10      	pop	{r4, pc}

023fdd50 <memset>:
 23fdd50:	4402      	add	r2, r0
 23fdd52:	4603      	mov	r3, r0
 23fdd54:	4293      	cmp	r3, r2
 23fdd56:	d100      	bne.n	23fdd5a <memset+0xa>
 23fdd58:	4770      	bx	lr
 23fdd5a:	f803 1b01 	strb.w	r1, [r3], #1
 23fdd5e:	e7f9      	b.n	23fdd54 <memset+0x4>

023fdd60 <srand>:
 23fdd60:	b538      	push	{r3, r4, r5, lr}
 23fdd62:	4b10      	ldr	r3, [pc, #64]	; (23fdda4 <srand+0x44>)
 23fdd64:	4604      	mov	r4, r0
 23fdd66:	681d      	ldr	r5, [r3, #0]
 23fdd68:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fdd6a:	b9b3      	cbnz	r3, 23fdd9a <srand+0x3a>
 23fdd6c:	2018      	movs	r0, #24
 23fdd6e:	f7fe fe19 	bl	23fc9a4 <malloc>
 23fdd72:	4602      	mov	r2, r0
 23fdd74:	63a8      	str	r0, [r5, #56]	; 0x38
 23fdd76:	b920      	cbnz	r0, 23fdd82 <srand+0x22>
 23fdd78:	4b0b      	ldr	r3, [pc, #44]	; (23fdda8 <srand+0x48>)
 23fdd7a:	2142      	movs	r1, #66	; 0x42
 23fdd7c:	480b      	ldr	r0, [pc, #44]	; (23fddac <srand+0x4c>)
 23fdd7e:	f7fe fe49 	bl	23fca14 <__assert_func>
 23fdd82:	490b      	ldr	r1, [pc, #44]	; (23fddb0 <srand+0x50>)
 23fdd84:	4b0b      	ldr	r3, [pc, #44]	; (23fddb4 <srand+0x54>)
 23fdd86:	e9c0 1300 	strd	r1, r3, [r0]
 23fdd8a:	4b0b      	ldr	r3, [pc, #44]	; (23fddb8 <srand+0x58>)
 23fdd8c:	2100      	movs	r1, #0
 23fdd8e:	6083      	str	r3, [r0, #8]
 23fdd90:	230b      	movs	r3, #11
 23fdd92:	8183      	strh	r3, [r0, #12]
 23fdd94:	2001      	movs	r0, #1
 23fdd96:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fdd9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fdd9c:	2200      	movs	r2, #0
 23fdd9e:	611c      	str	r4, [r3, #16]
 23fdda0:	615a      	str	r2, [r3, #20]
 23fdda2:	bd38      	pop	{r3, r4, r5, pc}
 23fdda4:	1007ad88 	.word	0x1007ad88
 23fdda8:	023fff65 	.word	0x023fff65
 23fddac:	023fff7c 	.word	0x023fff7c
 23fddb0:	abcd330e 	.word	0xabcd330e
 23fddb4:	e66d1234 	.word	0xe66d1234
 23fddb8:	0005deec 	.word	0x0005deec

023fddbc <strdup>:
 23fddbc:	4b02      	ldr	r3, [pc, #8]	; (23fddc8 <strdup+0xc>)
 23fddbe:	4601      	mov	r1, r0
 23fddc0:	6818      	ldr	r0, [r3, #0]
 23fddc2:	f000 b803 	b.w	23fddcc <_strdup_r>
 23fddc6:	bf00      	nop
 23fddc8:	1007ad88 	.word	0x1007ad88

023fddcc <_strdup_r>:
 23fddcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fddce:	4604      	mov	r4, r0
 23fddd0:	4608      	mov	r0, r1
 23fddd2:	460d      	mov	r5, r1
 23fddd4:	f7fc fc2c 	bl	23fa630 <strlen>
 23fddd8:	1c42      	adds	r2, r0, #1
 23fddda:	4620      	mov	r0, r4
 23fdddc:	4611      	mov	r1, r2
 23fddde:	9201      	str	r2, [sp, #4]
 23fdde0:	f7fe fe0a 	bl	23fc9f8 <_malloc_r>
 23fdde4:	4604      	mov	r4, r0
 23fdde6:	b118      	cbz	r0, 23fddf0 <_strdup_r+0x24>
 23fdde8:	9a01      	ldr	r2, [sp, #4]
 23fddea:	4629      	mov	r1, r5
 23fddec:	f7ff ffa3 	bl	23fdd36 <memcpy>
 23fddf0:	4620      	mov	r0, r4
 23fddf2:	b003      	add	sp, #12
 23fddf4:	bd30      	pop	{r4, r5, pc}
	...

023fddf8 <__register_exitproc>:
 23fddf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fddfc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fdebc <__register_exitproc+0xc4>
 23fde00:	4606      	mov	r6, r0
 23fde02:	461f      	mov	r7, r3
 23fde04:	460d      	mov	r5, r1
 23fde06:	f8d8 0000 	ldr.w	r0, [r8]
 23fde0a:	4691      	mov	r9, r2
 23fde0c:	f000 f858 	bl	23fdec0 <__retarget_lock_acquire_recursive>
 23fde10:	4b26      	ldr	r3, [pc, #152]	; (23fdeac <__register_exitproc+0xb4>)
 23fde12:	681c      	ldr	r4, [r3, #0]
 23fde14:	b934      	cbnz	r4, 23fde24 <__register_exitproc+0x2c>
 23fde16:	4c26      	ldr	r4, [pc, #152]	; (23fdeb0 <__register_exitproc+0xb8>)
 23fde18:	601c      	str	r4, [r3, #0]
 23fde1a:	4b26      	ldr	r3, [pc, #152]	; (23fdeb4 <__register_exitproc+0xbc>)
 23fde1c:	b113      	cbz	r3, 23fde24 <__register_exitproc+0x2c>
 23fde1e:	681b      	ldr	r3, [r3, #0]
 23fde20:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fde24:	6863      	ldr	r3, [r4, #4]
 23fde26:	2b1f      	cmp	r3, #31
 23fde28:	dd07      	ble.n	23fde3a <__register_exitproc+0x42>
 23fde2a:	f8d8 0000 	ldr.w	r0, [r8]
 23fde2e:	f000 f849 	bl	23fdec4 <__retarget_lock_release_recursive>
 23fde32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fde36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fde3a:	b35e      	cbz	r6, 23fde94 <__register_exitproc+0x9c>
 23fde3c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fde40:	b988      	cbnz	r0, 23fde66 <__register_exitproc+0x6e>
 23fde42:	4b1d      	ldr	r3, [pc, #116]	; (23fdeb8 <__register_exitproc+0xc0>)
 23fde44:	b923      	cbnz	r3, 23fde50 <__register_exitproc+0x58>
 23fde46:	f8d8 0000 	ldr.w	r0, [r8]
 23fde4a:	f000 f83a 	bl	23fdec2 <__retarget_lock_release>
 23fde4e:	e7f0      	b.n	23fde32 <__register_exitproc+0x3a>
 23fde50:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fde54:	f7fe fda6 	bl	23fc9a4 <malloc>
 23fde58:	2800      	cmp	r0, #0
 23fde5a:	d0f4      	beq.n	23fde46 <__register_exitproc+0x4e>
 23fde5c:	2300      	movs	r3, #0
 23fde5e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fde62:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fde66:	6863      	ldr	r3, [r4, #4]
 23fde68:	2201      	movs	r2, #1
 23fde6a:	2e02      	cmp	r6, #2
 23fde6c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fde70:	fa02 f203 	lsl.w	r2, r2, r3
 23fde74:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fde78:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fde7c:	ea43 0302 	orr.w	r3, r3, r2
 23fde80:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fde84:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fde88:	bf02      	ittt	eq
 23fde8a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fde8e:	4313      	orreq	r3, r2
 23fde90:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fde94:	6863      	ldr	r3, [r4, #4]
 23fde96:	f8d8 0000 	ldr.w	r0, [r8]
 23fde9a:	1c5a      	adds	r2, r3, #1
 23fde9c:	3302      	adds	r3, #2
 23fde9e:	6062      	str	r2, [r4, #4]
 23fdea0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fdea4:	f000 f80e 	bl	23fdec4 <__retarget_lock_release_recursive>
 23fdea8:	2000      	movs	r0, #0
 23fdeaa:	e7c4      	b.n	23fde36 <__register_exitproc+0x3e>
 23fdeac:	1007afe0 	.word	0x1007afe0
 23fdeb0:	1007af54 	.word	0x1007af54
 23fdeb4:	00000000 	.word	0x00000000
 23fdeb8:	023fc9a5 	.word	0x023fc9a5
 23fdebc:	1007adec 	.word	0x1007adec

023fdec0 <__retarget_lock_acquire_recursive>:
 23fdec0:	4770      	bx	lr

023fdec2 <__retarget_lock_release>:
 23fdec2:	4770      	bx	lr

023fdec4 <__retarget_lock_release_recursive>:
 23fdec4:	4770      	bx	lr
	...

023fdec8 <dynalib_user>:
 23fdec8:	a641 023f a669 023f a66d 023f 0000 0000     A.?.i.?.m.?.....
 23fded8:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23fdee8:	7574 6c61 4300 324f 5400 4f56 0043 7070     tual.CO2.TVOC.pp
 23fdef8:	5c62 0074 3248 5c20 0074 7445 6168 6f6e     b\t.H2 \t.Ethano
 23fdf08:	006c 6553 736e 726f 6e20 746f 6620 756f     l.Sensor not fou
 23fdf18:	646e 4d00 6165 7573 6572 656d 746e 6620     nd.Measurement f
 23fdf28:	6961 656c 0064 5f47 5654 434f 0020 7020     ailed.G_TVOC . p
 23fdf38:	6270 0009 5f47 4f43 2032 2000 7070 006d     pb..G_CO2 . ppm.
 23fdf48:	6146 6c69 6465 7420 206f 6567 2074 6162     Failed to get ba
 23fdf58:	6573 696c 656e 7220 6165 6964 676e 0073     seline readings.

023fdf68 <_ZL18FreeSansBold12pt7b>:
 23fdf68:	e278 023f df80 023f 7e20 001d               x.?...?. ~..

023fdf74 <_ZL21FreeSansOblique12pt7b>:
 23fdf74:	edfa 023f eb02 023f 7e20 001d               ..?...?. ~..

023fdf80 <_ZL24FreeSansBold12pt7bGlyphs>:
 23fdf80:	0000 0000 0007 0001 0000 1104 0308 00f0     ................
 23fdf90:	0009 060a 010b 00ef 0011 100d 000d 00f1     ................
 23fdfa0:	002b 140d 000d 00ef 004c 1113 0115 00f0     +.......L.......
 23fdfb0:	0075 1110 0111 00f0 0097 0604 0106 00ef     u...............
 23fdfc0:	009a 1606 0108 00ef 00ab 1606 0108 00ef     ................
 23fdfd0:	00bc 0807 0109 00ef 00c3 0b0b 020e 00f6     ................
 23fdfe0:	00d3 0704 0106 00fe 00d7 0306 0108 00f9     ................
 23fdff0:	00da 0304 0106 00fe 00dc 1106 0007 00f0     ................
 23fe000:	00e9 110c 010d 00f0 0103 1107 030e 00f0     ................
 23fe010:	0112 110c 010d 00f0 012c 110c 010d 00f0     ........,.......
 23fe020:	0146 110b 010d 00f0 015e 110c 010d 00f0     F.......^.......
 23fe030:	0178 110c 010d 00f0 0192 110b 010d 00f0     x...............
 23fe040:	01aa 110c 010d 00f0 01c4 110c 010d 00f0     ................
 23fe050:	01de 0c04 0106 00f5 01e4 1004 0106 00f5     ................
 23fe060:	01ec 0c0c 010e 00f5 01fe 090c 010e 00f7     ................
 23fe070:	020c 0c0c 010e 00f5 021e 120c 020f 00ef     ................
 23fe080:	0239 1515 0117 00ef 0271 1210 0011 00ef     9.......q.......
 23fe090:	0295 120e 0211 00ef 02b5 1210 0111 00ef     ................
 23fe0a0:	02d9 120f 0211 00ef 02fb 120d 0210 00ef     ................
 23fe0b0:	0319 120c 020f 00ef 0334 1210 0112 00ef     ........4.......
 23fe0c0:	0358 120e 0212 00ef 0378 1204 0207 00ef     X.......x.......
 23fe0d0:	0381 120b 010e 00ef 039a 1210 0211 00ef     ................
 23fe0e0:	03be 120b 020f 00ef 03d7 1211 0215 00ef     ................
 23fe0f0:	03fe 120f 0212 00ef 0420 1211 0113 00ef     ........ .......
 23fe100:	0447 120e 0210 00ef 0467 1311 0113 00ef     G.......g.......
 23fe110:	0490 1210 0211 00ef 04b4 120f 0110 00ef     ................
 23fe120:	04d6 120c 020f 00ef 04f1 120e 0212 00ef     ................
 23fe130:	0511 120f 0010 00ef 0533 1217 0017 00ef     ........3.......
 23fe140:	0567 120f 0110 00ef 0589 1210 000f 00ef     g...............
 23fe150:	05ad 120d 010f 00ef 05cb 1706 0208 00ef     ................
 23fe160:	05dd 1107 0007 00f0 05ec 1706 0008 00ef     ................
 23fe170:	05fe 0b0c 010e 00f0 060f 020f ff0d 0004     ................
 23fe180:	0613 0304 0006 00ef 0615 0d0d 010e 00f4     ................
 23fe190:	062b 120d 020f 00ef 0649 0d0c 010d 00f4     +.......I.......
 23fe1a0:	065d 120d 010f 00ef 067b 0d0d 010e 00f4     ].......{.......
 23fe1b0:	0691 1207 0108 00ef 06a1 120d 010f 00f4     ................
 23fe1c0:	06bf 120c 020e 00ef 06da 1204 0207 00ef     ................
 23fe1d0:	06e3 1706 0007 00ef 06f5 120c 020e 00ef     ................
 23fe1e0:	0710 1204 0206 00ef 0719 0d13 0215 00f4     ................
 23fe1f0:	0738 0d0c 020f 00f4 074c 0d0d 010f 00f4     8.......L.......
 23fe200:	0762 120d 020f 00f4 0780 120d 010f 00f4     b...............
 23fe210:	079e 0d08 0209 00f4 07ab 0d0c 010d 00f4     ................
 23fe220:	07bf 0f06 0108 00f2 07cb 0d0c 020f 00f4     ................
 23fe230:	07df 0d0d 000d 00f4 07f5 0d12 0013 00f4     ................
 23fe240:	0813 0d0d 000d 00f4 0829 120d 000d 00f4     ........).......
 23fe250:	0847 0d0a 010c 00f4 0858 1706 0109 00ef     G.......X.......
 23fe260:	086a 1602 0207 00ef 0870 1706 0309 00ef     j.......p.......
 23fe270:	0882 050c 000c 00f9                         ........

023fe278 <_ZL25FreeSansBold12pt7bBitmaps>:
 23fe278:	ffff ffff 6676 ff60 f3f0 fffc cf3f 9861     ....vf`.....?.a.
 23fe288:	0e60 7370 1883 f7ff bfff 73fc 1883 c718     `.ps.......s....
 23fe298:	bfff fffd 18e3 c139 0ece 0270 7e00 f80f     ......9...p..~..
 23fe2a8:	e77f b9af c83d 400f 003f 00ff 05fc 27ff     ....=..@?......'
 23fe2b8:	3ff9 efeb 3ffe 7ce0 8000 0004 063c c10f     .?...?.|....<...
 23fe2c8:	fc81 7330 0c8c 8131 60ce cc1f f303 3c00     ..0s..1..`.....<
 23fe2d8:	8067 f819 7f02 ce80 1170 0686 c139 f887     g.......p...9...
 23fe2e8:	7e30 070c 0780 1f80 3fc0 3ce0 3ce0 3ee0     0~.......?.<.<.>
 23fe2f8:	0fe0 07c0 3f00 7f8c f1cc f0fc f0f8 f878     .....?........x.
 23fe308:	7ff8 3ffc 1fde ff8e 66ff 730c 718e 38c7     ...?.....f.s.q.8
 23fe318:	8ee3 e338 1c8e c371 188e c370 1c87 e338     ..8...q...p...8.
 23fe328:	1c87 c771 711c 38ce 1ce7 8063 2310 f35f     ..q..q.8..c..#_.
 23fe338:	1b87 0e14 c001 0738 ff0f ffff 70f8 010e     ......8......p..
 23fe348:	38c0 ff00 36f3 ffc0 c0ff f0ff 300c 1886     .8...6.......0..
 23fe358:	0c61 c230 6118 3084 1fc0 fc83 e77f f09e     a.0..a.0........
 23fe368:	0fff fff0 f00f 0fff fff0 f00f 9ef7 e37f     ................
 23fe378:	0ffc 0600 7f1c e3ff 8fc7 3c1e f178 c7e3     ...........<x...
 23fe388:	1e8f 831f 7ffc 9fef fff0 000f 0ff0 e001     ................
 23fe398:	0f3c e081 033c 7f80 fff7 f07f 071f fffc     <...<...........
 23fe3a8:	1eef e0f1 031e 78c0 c007 001e 0ff0 fff0     .......x........
 23fe3b8:	7f1f fce7 801f c003 1ff8 e107 27bc f38c     .............'..
 23fe3c8:	631e 7bd8 ffff feff 8007 1ef0 c003 e73f     .c.{..........?.
 23fe3d8:	7ffe 00e7 0660 7ff8 fecf f0f1 000f 0ff0     ....`...........
 23fe3e8:	fe00 ff1e fce7 003f 830f 7ffc 9fe7 0ff0     ......?.........
 23fe3f8:	ff78 fecf fff9 f00f 0fff f7f0 7f9f fce3     x...............
 23fe408:	800f ffff ffff e080 071c e001 0f38 c001     ............8...
 23fe418:	0f78 e001 0f38 e001 003c 030f 7ffc 9ec7     x...8...<.......
 23fe428:	e770 390e f8c1 c73f f09e 0fff fff0 7f9f     p..9..?.........
 23fe438:	fce3 801f 031f 7ffc 9eef eff0 f00f 0fff     ................
 23fe448:	f7f9 3fff eff1 ef00 7f1e fce7 001f f0ff     ...?............
 23fe458:	0000 ff0f f0ff 0000 ff0f 6c11 1000 0307     ...........l....
 23fe468:	fcf1 0f7e e080 c00f 803f 007f 03f0 ffff     ..~.....?.......
 23fe478:	ffff 00f0 0000 ff00 ffff f0ff 0e00 fc00     ................
 23fe488:	f007 e00f 001f 7ff0 8f1f f0e0 0008 071f     ................
 23fe498:	7ffc 9fef fff0 000f 0ff0 e001 073c f080     ............<...
 23fe4a8:	000e 00e0 f000 000f 00f0 00fe fc1f c003     ................
 23fe4b8:	38f0 c301 0780 3d18 8799 6cec c371 06c3     .8.....=...lq...
 23fe4c8:	181e f130 8781 188c 607c 63c3 3b8e df8f     ..0.....|`.c.;..
 23fe4d8:	3c8c 70f0 0100 00c0 8007 1f80 00fe c01f     .<.p............
 23fe4e8:	0300 03e0 03e0 07e0 07f0 07f0 0f70 0e78     ............p.x.
 23fe4f8:	0e78 1e38 1c3c 3f3c 3ffc 3ffe 78fe 780e     x.8.<.<?.?.?.x.x
 23fe508:	700f f00f ff07 ffc3 ffcf 3e3c 7bf0 efc1     .p........<>.{..
 23fe518:	bf0f fffc ffe3 07cf 0fbc 3ff0 ffc0 ff07     ...........?....
 23fe528:	fffe fffb 0780 1fe0 3ff8 7cfc 783e f81f     .........?.|>x..
 23fe538:	f00f f000 f000 f000 f000 f000 f800 780f     ...............x
 23fe548:	7c1f 3f3e 1ffe 07fc fff0 ffe1 ffe3 83e7     .|>?............
 23fe558:	03ef 07de 07fc 0ff8 1ff0 3fe0 7fc0 ff80     ...........?....
 23fe568:	fe03 bc07 7f1f fffc fff1 ff80 fff7 fdbf     ................
 23fe578:	0fe0 7800 c003 fc1f e7ff 3cff e001 000f     ...x.......<....
 23fe588:	0378 1fc0 ffff ffff ffc0 ffff ffff f000     x...............
 23fe598:	000f 0ff0 fffe feef 0ff0 f000 000f 0ff0     ................
 23fe5a8:	f000 000f f003 fc0f fe3f 1f3e 0778 0078     ........?.>.x.x.
 23fe5b8:	00f0 00f0 7ff0 7ff0 7ff0 07f0 0778 0f7c     ............x.|.
 23fe5c8:	1f3e fb3f fb0f e303 3ff0 ffc0 fc03 f00f     >.?......?......
 23fe5d8:	c03f 03ff ffff ffff ffff fc03 f00f c03f     ?.............?.
 23fe5e8:	03ff 0ffc 3ff0 f0c0 ffff ffff ffff ffff     .....?..........
 23fe5f8:	01ff 3ce0 8007 1ef0 c003 0f78 e001 073c     ...<......x...<.
 23fe608:	fff8 e31f 7bfc 7ffe e0c3 3ef0 3cf0 78f0     .....{.....>.<.x
 23fe618:	f0f0 e0f1 c0f3 80f7 00ff 80ff 80ff c0fb     ................
 23fe628:	e0f1 f0f0 f0f0 78f0 3cf0 3ef0 1ef0 1ef0     .......x.<.>....
 23fe638:	c003 0f78 e001 073c f080 031e 78c0 010f     ..x...<......x..
 23fe648:	3ce0 ff07 ffff f8fc fe1f ff0f ff0f ff87     .<..............
 23fe658:	ffc3 ffe1 fff9 effc 77fe 3bfb ddfd fcfe     .........w.;....
 23fe668:	7eff 9f7f cf3f e79f f38f f8c7 c0e3 1ff0     .~..?...........
 23fe678:	3ff0 7ff0 ffe0 ffe1 fdc3 fbc7 f38f e79f     .?..............
 23fe688:	c73f 8f7f 0fff 1ffe 1ffc 1ff8 3ff0 3ce0     ?............?.<
 23fe698:	e003 fc0f ff0f c787 80c7 c0f3 c07b e01f     ............{...
 23fe6a8:	f00f f807 fc03 fe01 f700 f380 78c0 f8f0     .............x..
 23fe6b8:	fc7f fc1f f803 ff00 ffe3 ffef 1fbc 3ff0     ...............?
 23fe6c8:	ffc0 fc03 ff1f fffb fecf 003c 03f0 0fc0     ..........<.....
 23fe6d8:	3c00 f000 c003 0300 0fe0 0ffc 87ff c7c7     .<..............
 23fe6e8:	f380 7bc0 1fc0 0fe0 07f0 03f8 01fc 04fe     ...{............
 23fe6f8:	87f7 c3f3 f0f8 7ff8 1ffc 83ff 80f1 0000     ................
 23fe708:	f8ff fcff fcff 3ef0 1ef0 1ef0 1ef0 3cf0     .......>.......<
 23fe718:	f8ff f0ff f8ff 3cf0 3cf0 3cf0 3cf0 3cf0     .......<.<.<.<.<
 23fe728:	3cf0 1ff0 c00f e17f e7ff efc3 de03 3c00     .<.............<
 23fe738:	7f00 7f00 3ff0 0ff8 01f8 01f0 03fe 0fde     .....?..........
 23fe748:	febf f83f c01f ffff ffff f0f0 000f 0ff0     ..?.............
 23fe758:	f000 000f 0ff0 f000 000f 0ff0 f000 000f     ................
 23fe768:	f0f0 c03f 03ff 0ffc 3ff0 ffc0 fc03 f00f     ..?......?......
 23fe778:	c03f 03ff 0ffc 3ff0 f7c0 9f87 3ffe 3ff0     ?......?.....?.?
 23fe788:	7000 f00e e03d c079 81e3 87c7 0e87 1c0e     .p..=.y.........
 23fe798:	781e e01c c039 8073 007e 01fc 01f8 03e0     .x..9.s.~.......
 23fe7a8:	07c0 7080 1c38 f0e0 e179 f3f0 e1c3 87e3     ...p8...y.......
 23fe7b8:	87c3 870f 3b0e 1e9e 3877 ee1c 3970 e0cc     .....;..w8..p9..
 23fe7c8:	9973 6ec0 003f 7efc f801 03fc f8f0 e103     s..n?..~........
 23fe7d8:	07e0 c083 070f f080 f03c e1f9 e7e1 cf83     ........<.......
 23fe7e8:	fc03 f003 e007 8007 000f 003f 01ff 07fe     ..........?.....
 23fe7f8:	0f9e 3c1e f83c e03d f078 781e 781e 3c3c     ...<<.=.x..x.x<<
 23fe808:	3c3c 1e78 0e78 0f70 07f0 07e0 03e0 03c0     <<x.x.p.........
 23fe818:	03c0 03c0 03c0 03c0 03c0 03c0 ffc0 ffff     ................
 23fe828:	feff f001 000f 0ff0 f800 8007 0778 7c80     ............x..|
 23fe838:	c003 033c 1fc0 ffff ffff ffc0 fcff cff3     ..<.............
 23fe848:	f33c 3ccf cff3 f33c 3ccf ffff c1c0 0381     <..<..<..<......
 23fe858:	0406 180c 3010 4060 81c1 0603 ffff 3ccf     .....0`@.......<
 23fe868:	cff3 f33c 3ccf cff3 f33c ffcf c0ff 000f     ..<..<..<.......
 23fe878:	0ff0 f801 831b 399c 0cc3 e770 e00e ff70     .......9..p...p.
 23fe888:	ffff e6fc 1f30 ff83 fd1f e0e1 030f fff9     ....0...........
 23fe898:	1edf f7f0 bf8f fffc cfe3 f080 8007 013c     ..............<.
 23fe8a8:	0fe0 7b00 ffc3 fe9f f7f8 fc83 e01f 07ff     ...{............
 23fe8b8:	3ff8 dfe3 fffe bee7 0f00 fe83 f77f f08f     .?..............
 23fe8c8:	007f 0ff0 f000 8f77 f37f 0ffe 0080 0378     ......w.......x.
 23fe8d8:	1ec0 f000 8f07 ffbc ffef ff78 fc83 e01f     ..........x.....
 23fe8e8:	07ff 3df8 efe3 3fff fbf8 1fc0 fe81 f91f     ...=...?........
 23fe8f8:	cff1 7f07 fffb 00de 03f0 9fc3 7ffc f8c0     ................
 23fe908:	3e00 fbfd 9fc7 3cbf f178 c7e3 1e8f 783c     .>.....<x.....<x
 23fe918:	1ef0 fb79 fedf fff1 f807 c13f 0ffe 7ff0     ..y.......?.....
 23fe928:	dfc7 7ffe f7f1 3c80 ff01 7f1e fef0 f000     .......<........
 23fe938:	000f 0ff0 f000 7c0f efff f9ff 0fff fff0     .......|........
 23fe948:	f00f 0fff fff0 f00f 0fff f0ff ff0f ffff     ................
 23fe958:	ffff 3cff c0f3 f300 3ccf cff3 f33c 3ccf     ...<.....<..<..<
 23fe968:	cff3 ffff f080 000f 0ff0 f000 0f0f eff1     ................
 23fe978:	f73c f08f 0fff fff8 3c8f cff1 f01e 0fef     <........<......
 23fe988:	ffff ffff ffff ffff f7ff 9f8f fbfb ffff     ................
 23fe998:	f8fc 1eff e31f fcc3 7f78 0f8f e1f1 3cfe     ........x......<
 23fe9a8:	c73f f887 fff0 1e1e cff7 fffe 9fff fff0     ?...............
 23fe9b8:	f00f 0fff fff0 f00f 0fff f0f0 810f 1fff     ................
 23fe9c8:	f1fc 07ef 3ff8 fec1 f00f c77b fc9f c07f     .....?....{.....
 23fe9d8:	00f8 c7f7 3fff f1fd 07ef 3ff8 fec1 f00f     .....?.....?....
 23fe9e8:	c77f fdbf cfff 7878 c003 001e 07f0 0080     ......xx........
 23fe9f8:	790f dfff f1fe 07ff 3ff8 fec1 f00f c77b     .y.......?....{.
 23fea08:	fedf f17f 80f7 013c 0fe0 7800 c003 f7f3     ......<....x....
 23fea18:	f8ff f0f0 f0f0 f0f0 f0f0 1ff0 fc87 efff     ................
 23fea28:	f80f f00f e07f 01ff 0fff e7ff 1ffe 7980     ...............y
 23fea38:	bfe7 e7fd 799e 9ee7 f37d f0c0 0fff fff0     .....y..}.......
 23fea48:	f00f 0fff fff0 f00f 1fff f7ff 3eff f0f0     .............>..
 23fea58:	837b 1c9e e3f1 1c8e 7770 b883 c01d 037e     {.......pw....~.
 23fea68:	1fe0 7000 f000 dce1 7778 3d1f cfe7 b379     ...p....xw.=..y.
 23fea78:	6c8e bbe3 ee38 1ffc 073f c1c7 f0f1 787c     .l..8...?.....|x
 23fea88:	1e0e 7800 c7f3 788f 813b 07fc 1ec0 f001     ...x...x;.......
 23fea98:	c01f 0fef f178 87e7 f000 837b 1c9e e371     ....x.....{...q.
 23feaa8:	1e8e 7370 b883 c01f 037e 0fe0 7000 8003     ..ps....~....p..
 23feab8:	073c 3ec0 e001 ff00 ffff 0ffc 8307 e0c1     <..>............
 23feac8:	78f0 0f3c ffff c0ff f31c 38ce 8ee3 e338     .x<........8..8.
 23fead8:	f0bc 8ee3 e338 3c8e c0f1 ffff ffff f0ff     ....8..<........
 23feae8:	8fe3 711c 1cc7 c771 3d0f 1cc7 c771 f31c     ...q..q..=..q...
 23feaf8:	00ce 0f78 cfe0 7f30 e001                    ..x...0...

023feb02 <_ZL27FreeSansOblique12pt7bGlyphs>:
 23feb02:	0000 0000 0007 0001 0000 1206 0307 00ef     ................
 23feb12:	000e 0606 0409 00f0 0013 120f 010d 00ef     ................
 23feb22:	0035 150d 020d 00ef 0058 1113 0315 00f0     5.......X.......
 23feb32:	0081 110d 0210 00f0 009d 0602 0405 00f0     ................
 23feb42:	009f 1708 0308 00ef 00b6 1708 0008 00f0     ................
 23feb52:	00cd 0808 0409 00ef 00d5 0b0c 020e 00f6     ................
 23feb62:	00e6 0604 0107 00ff 00e9 0206 0208 00f9     ................
 23feb72:	00eb 0203 0207 00ff 00ec 120a 0007 00ef     ................
 23feb82:	0103 110c 020d 00f0 011d 1107 050d 00f0     ................
 23feb92:	012c 110e 010d 00f0 014a 110c 020d 00f0     ,.......J.......
 23feba2:	0164 110c 020d 00f0 017e 110d 020d 00f0     d.......~.......
 23febb2:	019a 110c 020d 00f0 01b4 110d 030d 00f0     ................
 23febc2:	01d0 110c 020d 00f0 01ea 110c 020d 00f0     ................
 23febd2:	0204 0c05 0307 00f5 020c 1006 0207 00f5     ................
 23febe2:	0218 0c0d 020e 00f5 022c 060d 020e 00f8     ........,.......
 23febf2:	0236 0c0d 010e 00f6 024a 120b 040d 00ef     6.......J.......
 23fec02:	0263 1517 0218 00ef 02a0 1210 0010 00ef     c...............
 23fec12:	02c4 120f 0210 00ef 02e6 1210 0211 00ef     ................
 23fec22:	030a 1210 0211 00ef 032e 1210 0210 00ef     ................
 23fec32:	0352 120f 020e 00ef 0374 1210 0313 00ef     R.......t.......
 23fec42:	0398 1211 0211 00ef 03bf 1206 0207 00ef     ................
 23fec52:	03cd 120d 010c 00ef 03eb 1212 0210 00ef     ................
 23fec62:	0414 120b 020d 00ef 042d 1214 0214 00ef     ........-.......
 23fec72:	045a 1211 0212 00ef 0481 1211 0212 00ef     Z...............
 23fec82:	04a8 120f 020f 00ef 04ca 1312 0213 00ef     ................
 23fec92:	04f5 1210 0211 00ef 0519 120f 0210 00ef     ................
 23feca2:	053b 120e 040f 00ef 055b 1210 0311 00ef     ;.......[.......
 23fecb2:	057f 120f 040f 00ef 05a1 1216 0416 00ef     ................
 23fecc2:	05d3 1213 0010 00ef 05fe 1210 0410 00ef     ................
 23fecd2:	0622 1211 010f 00ef 0649 170a 0007 00ef     ".......I.......
 23fece2:	0666 1203 0407 00ef 066d 170a ff07 00f0     f.......m.......
 23fecf2:	068a 090a 020b 00f0 0696 010e ff0d 0004     ................
 23fed02:	0698 0404 0408 00ef 069a 0d0b 020d 00f4     ................
 23fed12:	06ac 120d 010d 00ef 06ca 0d0b 020c 00f4     ................
 23fed22:	06dc 120e 020d 00ef 06fc 0d0c 020d 00f4     ................
 23fed32:	0710 1208 0206 00ef 0722 120e 010d 00f4     ........".......
 23fed42:	0742 120c 010d 00ef 075d 1205 0205 00ef     B.......].......
 23fed52:	0769 1709 ff06 00ef 0783 120d 010c 00ef     i...............
 23fed62:	07a1 1205 0205 00ef 07ad 0d13 0114 00f4     ................
 23fed72:	07cc 0d0c 010d 00f4 07e0 0d0c 020d 00f4     ................
 23fed82:	07f4 120e 000e 00f4 0814 120d 020d 00f4     ................
 23fed92:	0832 0d09 0108 00f4 0841 0d0c 010c 00f4     2.......A.......
 23feda2:	0855 1007 0206 00f1 0863 0d0c 020d 00f4     U.......c.......
 23fedb2:	0877 0d0b 030c 00f4 0889 0d11 0311 00f4     w...............
 23fedc2:	08a5 0d0e 000c 00f4 08bc 120e 000b 00f4     ................
 23fedd2:	08dc 0d0c 010c 00f4 08f0 1708 0308 00ef     ................
 23fede2:	0907 1706 0106 00ef 0919 1709 ff08 00f0     ................
 23fedf2:	0933 050b 030e 00f6                         3.......

023fedfa <_ZL28FreeSansOblique12pt7bBitmaps>:
 23fedfa:	610c 1886 0c63 c230 6118 0000 00c3 3ccf     .a..c.0..a.....<
 23fee0a:	8ae2 0120 038c 0618 1860 31c0 ff83 ff87     .. .....`..1....
 23fee1a:	1803 600c c018 0323 8fff 02ff 0c30 1860     ...`..#.....0.`.
 23fee2a:	6380 c600 0000 3f80 fc03 7332 9991 cc8c     .c.....?..2s....
 23fee3a:	6006 003e 017e 0cfc 43ec 1b62 9d11 7f9c     .`>.~....Cb.....
 23fee4a:	f8c1 0002 0110 0080 0100 c083 fc60 3018     ............`..0
 23fee5a:	0cc2 c118 3083 cc38 f103 3c00 0040 f018     .....08....<@...
 23fee6a:	3f06 8c01 2330 0c06 c360 300e fcc0 0f10     .?..0#..`..0....
 23fee7a:	0100 3fe0 8c81 6018 06c3 1f30 e000 011f     ...?...`..0.....
 23fee8a:	d8dc 816d 0eec 7360 cf87 3ee6 fe38 03a0     ..m...`s...>8...
 23fee9a:	0406 180c 3018 6030 6060 c0c0 c0c0 c0c0     .....00```......
 23feeaa:	c0c0 6040 2060 0604 0206 0303 0303 0303     ..@`` ..........
 23feeba:	0303 0606 0c06 180c 3018 6020 0cc0 490c     .........0 `...I
 23feeca:	3c7f 6c3c 0300 3000 0003 ff30 ffff 0006     .<<l...0..0.....
 23feeda:	0660 c000 000c 2277 ff6c fcf0 4000 0830     `.....w"l....@0.
 23feeea:	0106 c000 1820 0204 8000 1040 0208 0001     .... .....@.....
 23feefa:	20c0 0700 fec0 731c 3083 0336 3660 c003     . .....s.06.`6..
 23fef0a:	077c 6cc0 c006 0cec 87e3 3ef0 0200 770c     |..l.......>...w
 23fef1a:	c1ef 0c83 3018 c361 0c06 6018 f003 e01f     .....0a....`....
 23fef2a:	c7e1 1803 000c 0130 0e80 7000 8007 0778     ......0....p..x.
 23fef3a:	3880 c001 0006 fc1f e0ff c007 1cfe 0373     .8............s.
 23fef4a:	3030 0003 7ce0 c007 000e 0660 6cc0 e10c     00...|....`..l..
 23fef5a:	f8c7 003e 6000 0006 1ee0 e003 0c6c 8cc1     ..>..`......l...
 23fef6a:	c630 c11c ff8f e0ff 0318 3000 0003 f80f     0..........0....
 23fef7a:	c67f 3000 0001 c01b 06ff 601c 0360 1800     ...0.......``...
 23fef8a:	c000 600c 8663 e00f 003e c003 1cfe 8373     ...`c...>.....s.
 23fef9a:	0630 6700 fc87 eef0 c006 066c 4cc0 e10c     0..g......l..L..
 23fefaa:	f887 003e fb3f c0ff 000c 0cc0 c000 0006     ..>.?...........
 23fefba:	0660 7000 0003 0330 1880 c001 000c 00e0     `..p..0.........
 23fefca:	c007 1cfe 0373 3330 3803 fc61 c73f 600e     ....s.03.8a.?..`
 23fefda:	066c 6cc0 e10c f8c7 003e c107 38fe 0373     l..l....>....8s.
 23fefea:	3660 6003 0736 f370 1efe 0e60 cc00 e31c     `6.`6.p...`.....
 23feffa:	f087 003c c039 0000 0000 c039 701c 0000     ..<.9.....9..p..
 23ff00a:	0000 0700 201c 3086 0000 c001 0f3c e081     ..... .0....<...
 23ff01a:	037c 0f80 1f00 3e00 3800 4000 fb7f 80ff     |......>.8.@....
 23ff02a:	0000 ff0f f07f 0120 07c0 0fc0 0f80 1c00     ...... .........
 23ff03a:	e003 1f78 c003 0038 0000 870f c3f9 3cb0     ..x...8........<
 23ff04a:	0006 30c0 030c c001 0c30 8001 0000 0000     ...0....0.......
 23ff05a:	0630 0000 803f ff01 0fe0 e001 0038 e0e0     0...?.......8...
 23ff06a:	c300 8187 1fce 98b1 c371 8361 c686 0f06     ........q.a.....
 23ff07a:	0c0c 303e 6c30 6160 c1d8 3187 1cc7 f761     ..>00l`a...1..a.
 23ff08a:	63f0 80cf 00e0 f000 0000 e0ff 7f00 0000     .c..............
 23ff09a:	3800 7800 7c00 fc00 dc00 cc01 8c01 8c03     .8.x.|..........
 23ff0aa:	0c03 0c06 0e0e fe0f fe1f 0618 0638 0630     ............8.0.
 23ff0ba:	0670 0760 f80f f81f 3860 31c0 6380 ce00     p.`.....`8.1.c..
 23ff0ca:	1803 3f0c 7ff0 c0f0 0073 0066 01cc 0698     ...?....s.f.....
 23ff0da:	1c70 f1ff 80ff f801 fe07 0e0e 031c 0338     p.............8.
 23ff0ea:	0030 0060 0060 00c0 00c0 00c0 00c0 06c0     0.`.`...........
 23ff0fa:	0cc0 1ce0 7870 f03f 801f f80f fc1f 0e18     ....px?.........
 23ff10a:	0718 0318 0318 0338 0330 0330 0330 0670     ......8.0.0.0.p.
 23ff11a:	0670 0c60 0c60 1860 78e0 e0ff 80ff ff0f     p.`.`.`..x......
 23ff12a:	fe1f 0018 0018 0018 0018 0038 0030 fc3f     ..........8.0.?.
 23ff13a:	f83f 0070 0070 0060 0060 0060 00e0 f8ff     ?.p.p.`.`.`.....
 23ff14a:	f8ff fe0f fc3f 0060 01c0 0380 0e00 1800     ....?.`.........
 23ff15a:	3f00 7ff0 c0e1 8003 0006 000c 0018 0070     .?............p.
 23ff16a:	01c0 0080 f801 fe07 0f0e 0318 0330 0070     ............0.p.
 23ff17a:	0060 0060 7fc0 7ec0 02c0 06c0 06c0 0ee0     `.`....~........
 23ff18a:	1e60 3c78 e43f 840f 010c 008e 00c6 00e3     `.x<?...........
 23ff19a:	8061 c030 e018 600c 3f0e 1ffe 1cff 8e01     a.0....`.?......
 23ff1aa:	c601 e300 6100 3180 18c0 1cc0 0c60 0c00     .....a.1....`...
 23ff1ba:	8671 6318 308c 1cc3 8661 e318 0000 0118     q..c.0..a.......
 23ff1ca:	0c80 6000 0003 0138 0c80 6000 0003 0138     ...`..8....`..8.
 23ff1da:	0c8c 6360 1c07 7f70 f001 0c00 8703 c101     ..`c..p.........
 23ff1ea:	e080 6060 7018 3806 9c03 ce00 3700 0f80     ..``.p.8.....7..
 23ff1fa:	0770 018c 80c3 6060 1c18 0306 8003 c0e0     p.....``........
 23ff20a:	3018 0007 030c 6080 010c 3080 010e 3080     .0.....`...0...0
 23ff21a:	0106 38c0 0006 18c0 0007 ffff 0efc 7100     ...8...........q
 23ff22a:	0fe0 001e e0f1 1e1e e101 36e0 033b 3063     ...........6;.c0
 23ff23a:	336e c30e cc30 1833 31c6 638c c631 1833     n3..0.3..1.c1.3.
 23ff24a:	e161 1e8e c118 8cc1 381c 010c 008f 80c7     a........8......
 23ff25a:	e063 f071 d830 ee18 630c 3106 18c7 0ce3     c.q.0....c.1....
 23ff26a:	8c31 c61c 6306 f103 f180 78c0 3cc0 0e60     1....c.....x.<`.
 23ff27a:	0100 03f8 03ff c383 6380 3b00 0d80 0680     .........c.;....
 23ff28a:	03c0 01c0 00e0 00f0 00f8 006c 0036 8031     ..........l.6.1.
 23ff29a:	f030 3f78 07f0 00e0 f80f f83f 3860 31c0     0.x?......?.`8.1
 23ff2aa:	6380 ce00 1803 3f0e 7ff8 c0e1 8003 0006     .c.....?........
 23ff2ba:	000c 0018 0070 01c0 0080 fc00 ff01 f0c0     ....p...........
 23ff2ca:	7078 3806 cc01 3600 0d00 0380 00c0 00f0     xp.8...6........
 23ff2da:	003c 001b c006 3803 c61d e103 f0e0 fe3f     <......8......?.
 23ff2ea:	f103 00c0 0f20 1ffc 18fe 1807 1803 1803     .... ...........
 23ff2fa:	3803 3006 3f0c 3ff8 70f8 701c 600c 600c     .8.0.?.?.p.p.`.`
 23ff30a:	600c e018 c018 c018 031c 1ff8 70f8 c038     .`...........p8.
 23ff31a:	0033 0066 000c 001e c01f f00f f001 ec00     3.f.............
 23ff32a:	d800 b001 7006 7f38 3fe0 ff00 ffff 70f0     .....p8..?.....p
 23ff33a:	c001 0006 0018 0360 0c80 3000 c000 0003     ......`....0....
 23ff34a:	001c 0160 0680 1800 e000 1800 3803 3003     ..`..........8.0
 23ff35a:	3007 3006 7006 7006 600e 600c 600c e00c     .0.0.p.p.`.`.`..
 23ff36a:	c00c c01c c018 c018 e038 7f70 1fe0 c080     ........8.p.....
 23ff37a:	c00f 801b 0073 03c6 060c 1818 7030 c060     ....s.......0p`.
 23ff38a:	81e3 01c6 039c 0630 0de0 1e80 3c00 7000     ......0......<.p
 23ff39a:	c000 1f70 c001 0f6c b003 0c3c f0c1 0673     ..p...l...<...s.
 23ff3aa:	8cc1 063b c630 c730 c318 6718 e10c 3398     ..;.0.0....g...3
 23ff3ba:	e006 1bdc 6003 076c e081 071c 7080 011c     .....`l......p..
 23ff3ca:	7080 0700 e000 38e0 0e0c c301 1880 03e0     .p.....8........
 23ff3da:	0098 0036 8007 f000 1e00 0700 01c0 00dc     ..6.............
 23ff3ea:	8073 301c 0703 c000 3860 0e0e c000 06e0     s..0....`8......
 23ff3fa:	0c60 1c70 3870 7030 6038 c018 c01d 801f     `.p.p80p8`......
 23ff40a:	000f 000e 000e 000e 000c 000c 000c 001c     ................
 23ff41a:	0018 ff0f ff87 0180 01c0 01c0 01c0 01c0     ................
 23ff42a:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 00c0     ................
 23ff43a:	00c0 00c0 f8ff fc7f 0700 e0c1 1860 030c     ............`...
 23ff44a:	c000 1c30 0106 6080 0e18 0003 30c0 060c     ..0....`.....0..
 23ff45a:	8001 1e60 8007 6c93 4992 db24 0724 e081     ..`....l.I$.$...
 23ff46a:	0618 8001 30c0 030c c001 1860 0106 e080     .....0....`.....
 23ff47a:	0c30 0003 60c0 1e18 800f 0103 d8c0 1936     0....`........6.
 23ff48a:	6384 8319 c060 fcff 23e6 c307 e3fc 3098     .c..`....#.....0
 23ff49a:	0106 f387 c0c6 3bd8 7f0e cc77 000c 0360     .......;..w...`.
 23ff4aa:	3000 8001 f00c c37f 3887 8019 06cc 3260     .0.......8....`2
 23ff4ba:	b003 c119 1cce c37f 007c 830f e3f8 36b8     ........|......6
 23ff4ca:	c007 0630 c000 1b18 3f86 e0c3 0c00 6000     ..0......?.....`
 23ff4da:	8001 0006 3e18 ff61 3c0e 7170 ce80 3007     .....>a..<pq...0
 23ff4ea:	c018 0163 0e8c 7838 c07f 00fb c107 38fe     ..c...8x.......8
 23ff4fa:	0377 3760 ffff 00fc 0cc0 e106 f8c7 003e     w.`7..........>.
 23ff50a:	0f07 181c 7e18 307e 3030 6030 6060 6060     .....~~0000`````
 23ff51a:	c0c0 cc03 a13f 8ec7 300e c038 03c6 0c18     ....?....08.....
 23ff52a:	7160 c781 0f0e 1ef8 0360 0c80 7030 807f     `q......`...0p..
 23ff53a:	00f8 000c 0cc0 8001 0118 1f9e c7f1 3338     ..............83
 23ff54a:	3003 0733 6630 6006 0666 c660 180c 00c0     .03.0f.`f.`.....
 23ff55a:	c618 1833 31c6 c698 0100 c080 0000 1800     ..3..1..........
 23ff56a:	0c1c 0306 8101 c080 3060 1818 060c 0303     ........`0......
 23ff57a:	8387 0c80 6000 0003 0130 0c80 6118 3883     .....`..0....a.8
 23ff58a:	8133 0fb8 77c0 1803 c130 0c87 6018 03e3     3....w..0....`..
 23ff59a:	1800 63c6 c618 1833 31c6 c698 1b00 c3e3     ...c..3..1......
 23ff5aa:	fcfd e1f1 189c 0333 6006 ccc0 3b18 0683     ......3..`...;..
 23ff5ba:	6060 0ccc 8319 3003 e660 180c e11b 3cff     ``.....0`......<
 23ff5ca:	8373 3330 3003 0677 6660 6006 0c66 c060     s.03.0w.`f.`f.`.
 23ff5da:	c107 38fe 0377 3e60 c003 063c 6cc0 e10e     ...8w.`>..<..l..
 23ff5ea:	f8c7 003e f00c e03f c7e1 1c03 600c 8031     ..>...?......`1.
 23ff5fa:	07ce 1838 e3e0 0fc7 77f8 80c1 0006 0018     ..8......w......
 23ff60a:	0360 0080 980f ceff e03c 03e6 1b70 9801     `.......<...p...
 23ff61a:	c00c 0766 7838 83ff 00cc 0760 3800 8001     ..f.8x....`..8..
 23ff62a:	000c 8f1b 07cf 0103 c080 60e0 1830 060c     ...........`0...
 23ff63a:	0f00 ffc1 7630 6003 8007 803f 007e 066c     ....0v.`..?.~.l.
 23ff64a:	cfe0 3ef8 1800 6730 c6ef 300c c160 0c83     ...>..0g...0`...
 23ff65a:	3c18 3038 0333 3730 6006 0666 6660 c006     .<803.07.`f.`f..
 23ff66a:	0cec cfc3 7cfc c0c0 1b78 6003 18c6 19c6     .....|..x..`....
 23ff67a:	30c3 0d6c e081 033c c100 e1c3 b0e1 d8f0     .0l...<.........
 23ff68a:	cc78 666c 6336 3033 b099 d858 782c 3c1c     x.lf6c30..X.,x.<
 23ff69a:	1c0e 0e06 0c00 301c e3e0 9801 c007 000e     .......0........
 23ff6aa:	0130 0fe0 7380 8c01 380c 6060 0c18 6160     0....s...8``..`a
 23ff6ba:	8683 1c0c 3160 cc80 3003 800d 0036 03f0     ....`1...0..6...
 23ff6ca:	0680 3000 c000 0006 03f0 0080 f11f 00ff     ...0............
 23ff6da:	0c70 8001 0630 c000 0318 6000 fc0f c0ff     p...0......`....
 23ff6ea:	0e07 1818 1818 3030 3030 e060 60e0 6060     ......0000`..```
 23ff6fa:	c0c0 c0c0 f0c0 0c60 8230 6108 1084 0c43     ......`.0..a..C.
 23ff70a:	8620 4118 3004 00c2 0600 8007 60c0 1830      ..A.0.......`0.
 23ff71a:	0c0c 0306 c001 60e0 3060 0c18 060c 0103     .......``0......
 23ff72a:	8383 3880 820f 8338 38e0                    ...8..8..8

023ff734 <_ZL4font>:
 23ff734:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 23ff744:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 23ff754:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 23ff764:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 23ff774:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 23ff784:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 23ff794:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 23ff7a4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 23ff7b4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 23ff7c4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 23ff7d4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 23ff7e4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 23ff7f4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 23ff804:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 23ff814:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 23ff824:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 23ff834:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 23ff844:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 23ff854:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 23ff864:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 23ff874:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 23ff884:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 23ff894:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 23ff8a4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 23ff8b4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 23ff8c4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 23ff8d4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 23ff8e4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 23ff8f4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 23ff904:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 23ff914:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 23ff924:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 23ff934:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 23ff944:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 23ff954:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 23ff964:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 23ff974:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 23ff984:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 23ff994:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 23ff9a4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 23ff9b4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 23ff9c4:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 23ff9d4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 23ff9e4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 23ff9f4:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 23ffa04:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 23ffa14:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 23ffa24:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 23ffa34:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 23ffa44:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 23ffa54:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 23ffa64:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 23ffa74:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 23ffa84:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 23ffa94:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 23ffaa4:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 23ffab4:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 23ffac4:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 23ffad4:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 23ffae4:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 23ffaf4:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 23ffb04:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 23ffb14:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 23ffb24:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 23ffb34:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 23ffb44:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 23ffb54:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 23ffb64:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 23ffb74:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 23ffb84:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 23ffb94:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 23ffba4:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 23ffbb4:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 23ffbc4:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 23ffbd4:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 23ffbe4:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 23ffbf4:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 23ffc04:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 23ffc14:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 23ffc24:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

023ffc34 <_ZTV12Adafruit_GFX>:
	...
 23ffc44:	b2a1 023f d3d5 023f a689 023f ad53 023f     ..?...?...?.S.?.
 23ffc54:	ad55 023f ad87 023f ad63 023f ad75 023f     U.?...?.c.?.u.?.
 23ffc64:	ac95 023f ad53 023f af7d 023f af7b 023f     ..?.S.?.}.?.{.?.
 23ffc74:	ad9f 023f addd 023f ae17 023f ae5d 023f     ..?...?...?.].?.
 23ffc84:	ae79 023f aefb 023f                         y.?...?.

023ffc8c <_ZTV15Adafruit_SPITFT>:
	...
 23ffc9c:	b2a1 023f d3d5 023f bb45 023f b5db 023f     ..?...?.E.?...?.
 23ffcac:	bb07 023f b6fb 023f b9b3 023f b95b 023f     ..?...?...?.[.?.
 23ffcbc:	ac95 023f b607 023f af7d 023f ba81 023f     ..?...?.}.?...?.
 23ffccc:	b8df 023f b85f 023f b79b 023f ae5d 023f     ..?._.?...?.].?.
 23ffcdc:	ae79 023f aefb 023f a689 023f a689 023f     y.?...?...?...?.

023ffcec <_ZL11cmd_240x240>:
 23ffcec:	0109 9680 8011 3aff 5581 360a 0801 042a     .......:.U.6..*.
 23ffcfc:	0000 f000 042b 0000 f000 8021 130a 0a80     ....+.....!.....
 23ffd0c:	8029 00ff                                   )...

023ffd10 <_ZTV15Adafruit_ST7789>:
	...
 23ffd18:	bc0b 023f bc73 023f b2a1 023f d3d5 023f     ..?.s.?...?...?.
 23ffd28:	bb45 023f b5db 023f bb07 023f b6fb 023f     E.?...?...?...?.
 23ffd38:	b9b3 023f b95b 023f ac95 023f b607 023f     ..?.[.?...?...?.
 23ffd48:	bc0d 023f ba81 023f b8df 023f b85f 023f     ..?...?...?._.?.
 23ffd58:	b79b 023f ae5d 023f ae79 023f aefb 023f     ..?.].?.y.?...?.
 23ffd68:	bd3d 023f bd5d 023f                         =.?.].?.

023ffd70 <_ZTV15Adafruit_ST77xx>:
	...
 23ffd78:	bcc9 023f bdaf 023f b2a1 023f d3d5 023f     ..?...?...?...?.
 23ffd88:	bb45 023f b5db 023f bb07 023f b6fb 023f     E.?...?...?...?.
 23ffd98:	b9b3 023f b95b 023f ac95 023f b607 023f     ..?.[.?...?...?.
 23ffda8:	bccb 023f ba81 023f b8df 023f b85f 023f     ..?...?...?._.?.
 23ffdb8:	b79b 023f ae5d 023f ae79 023f aefb 023f     ..?.].?.y.?...?.
 23ffdc8:	bd3d 023f bd5d 023f                         =.?.].?.

023ffdd0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffdd8:	cac1 023f cac7 023f cb05 023f cad5 023f     ..?...?...?...?.
 23ffde8:	cac3 023f                                   ..?.

023ffdec <_ZTVN5spark13EthernetClassE>:
	...
 23ffdf4:	d04b 023f d041 023f d037 023f d02d 023f     K.?.A.?.7.?.-.?.
 23ffe04:	d021 023f d015 023f d2b1 023f d2b9 023f     !.?...?...?...?.
 23ffe14:	d009 023f d001 023f cff7 023f cfed 023f     ..?...?...?...?.
 23ffe24:	d2e9 023f                                   ..?.

023ffe28 <_ZTV7TwoWire>:
	...
 23ffe30:	d069 023f d0b3 023f d08b 023f d06b 023f     i.?...?...?.k.?.
 23ffe40:	d093 023f d09b 023f d0a3 023f d0ab 023f     ..?...?...?...?.

023ffe50 <_ZTV9IPAddress>:
	...
 23ffe58:	d181 023f d171 023f d173 023f 7061 0070     ..?.q.?.s.?.app.

023ffe68 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe70:	d271 023f d27b 023f d285 023f d28f 023f     q.?.{.?...?...?.
 23ffe80:	d299 023f d2a5 023f d2b1 023f d2b9 023f     ..?...?...?...?.
 23ffe90:	d2c1 023f d2cd 023f d2d5 023f d2df 023f     ..?...?...?...?.
 23ffea0:	d2e9 023f                                   ..?.

023ffea4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffea4:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffeb4:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffec4:	6d69 0065                                   ime.

023ffec8 <_ZTV11USARTSerial>:
	...
 23ffed0:	d645 023f d6b1 023f d689 023f d3d5 023f     E.?...?...?...?.
 23ffee0:	d659 023f d675 023f d667 023f d683 023f     Y.?.u.?.g.?...?.
 23ffef0:	d647 023f d64b 023f                         G.?.K.?.

023ffef8 <_ZTV9USBSerial>:
	...
 23fff00:	d6f5 023f d75d 023f d733 023f d3d5 023f     ..?.].?.3.?...?.
 23fff10:	d725 023f d6f7 023f d707 023f d757 023f     %.?...?...?.W.?.
 23fff20:	d717 023f d6ef 023f                         ..?...?.

023fff28 <_ZTVN5spark9WiFiClassE>:
	...
 23fff30:	d85f 023f d855 023f d84b 023f d801 023f     _.?.U.?.K.?...?.
 23fff40:	d83f 023f d833 023f d2b1 023f d2b9 023f     ?.?.3.?...?...?.
 23fff50:	d827 023f d81f 023f d815 023f d80b 023f     '.?...?...?...?.
 23fff60:	d2e9 023f                                   ..?.

023fff64 <_ZSt7nothrow>:
 23fff64:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff74:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff84:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff94:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa4:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd5 <link_const_data_end>:
 23fffd5:	00          	.byte	0x00
	...

023fffd8 <link_constructors_location>:
 23fffd8:	023fac69 	.word	0x023fac69
 23fffdc:	023fcab1 	.word	0x023fcab1
 23fffe0:	023fd055 	.word	0x023fd055
 23fffe4:	023fd261 	.word	0x023fd261
 23fffe8:	023fd3c1 	.word	0x023fd3c1
 23fffec:	023fd49d 	.word	0x023fd49d
 23ffff0:	023fd60d 	.word	0x023fd60d
 23ffff4:	023fd631 	.word	0x023fd631
 23ffff8:	023fd869 	.word	0x023fd869
