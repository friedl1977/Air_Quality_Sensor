
/Users/friedl/Desktop/Projects/Air_Quality_Sensor/target/5.3.1/p2/Air_Quality_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fa5f0  085fa088  0000a5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00005a00  023fa5f8  085fa090  0000a5f8  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000070  1007ad80  085ffa90  0001ad80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f8  1007adf0  1007adf0  0002adf0  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffb00  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000004b4  085ffb04  085ffb04  0001fb04  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fb04  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0015496d  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00016d8c  00000000  00000000  0017496d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000451b1  00000000  00000000  0018b6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002f90  00000000  00000000  001d08aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000b978  00000000  00000000  001d383a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d57b  00000000  00000000  001df1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004e9b0  00000000  00000000  0020c72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cf4f8  00000000  00000000  0025b0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008a48  00000000  00000000  0032a5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	480e      	ldr	r0, [pc, #56]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa01a:	490f      	ldr	r1, [pc, #60]	; (85fa058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a0e      	ldr	r2, [pc, #56]	; (85fa05c <module_user_pre_init+0x44>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b0d      	ldr	r3, [pc, #52]	; (85fa060 <module_user_pre_init+0x48>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	480d      	ldr	r0, [pc, #52]	; (85fa064 <module_user_pre_init+0x4c>)
 85fa030:	4a0d      	ldr	r2, [pc, #52]	; (85fa068 <module_user_pre_init+0x50>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b0d      	ldr	r3, [pc, #52]	; (85fa06c <module_user_pre_init+0x54>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa03a:	480d      	ldr	r0, [pc, #52]	; (85fa070 <module_user_pre_init+0x58>)
 85fa03c:	490d      	ldr	r1, [pc, #52]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a0d      	ldr	r2, [pc, #52]	; (85fa078 <module_user_pre_init+0x60>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa048:	4b05      	ldr	r3, [pc, #20]	; (85fa060 <module_user_pre_init+0x48>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa04e:	4801      	ldr	r0, [pc, #4]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa050:	bd08      	pop	{r3, pc}
 85fa052:	bf00      	nop
 85fa054:	1007ad80 	.word	0x1007ad80
 85fa058:	085ffa90 	.word	0x085ffa90
 85fa05c:	1007adf0 	.word	0x1007adf0
 85fa060:	10110d2d 	.word	0x10110d2d
 85fa064:	1007adf0 	.word	0x1007adf0
 85fa068:	1007afe8 	.word	0x1007afe8
 85fa06c:	10110ea1 	.word	0x10110ea1
 85fa070:	023fa5f0 	.word	0x023fa5f0
 85fa074:	085fa088 	.word	0x085fa088
 85fa078:	023ffff8 	.word	0x023ffff8

085fa07c <dynalib_preinit>:
 85fa07c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fa5f8 <strlen>:
 23fa5f8:	4603      	mov	r3, r0
 23fa5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fa5fe:	2a00      	cmp	r2, #0
 23fa600:	d1fb      	bne.n	23fa5fa <strlen+0x2>
 23fa602:	1a18      	subs	r0, r3, r0
 23fa604:	3801      	subs	r0, #1
 23fa606:	4770      	bx	lr

023fa608 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fa608:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fa60a:	f003 f9a1 	bl	23fd950 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa60e:	2500      	movs	r5, #0
 23fa610:	4e05      	ldr	r6, [pc, #20]	; (23fa628 <module_user_init+0x20>)
 23fa612:	4c06      	ldr	r4, [pc, #24]	; (23fa62c <module_user_init+0x24>)
 23fa614:	1ba4      	subs	r4, r4, r6
 23fa616:	08a4      	lsrs	r4, r4, #2
 23fa618:	42ac      	cmp	r4, r5
 23fa61a:	d100      	bne.n	23fa61e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fa61c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fa61e:	f856 3b04 	ldr.w	r3, [r6], #4
 23fa622:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa624:	3501      	adds	r5, #1
 23fa626:	e7f7      	b.n	23fa618 <module_user_init+0x10>
 23fa628:	023fffd4 	.word	0x023fffd4
 23fa62c:	023ffff8 	.word	0x023ffff8

023fa630 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fa630:	f000 b902 	b.w	23fa838 <setup>

023fa634 <module_user_loop>:
}

void module_user_loop() {
 23fa634:	b508      	push	{r3, lr}
    loop();
 23fa636:	f000 fae9 	bl	23fac0c <loop>
    _post_loop();
}
 23fa63a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fa63e:	f003 b93f 	b.w	23fd8c0 <_post_loop>

023fa642 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fa642:	f002 b9a3 	b.w	23fc98c <malloc>

023fa646 <_Znaj>:
 23fa646:	f002 b9a1 	b.w	23fc98c <malloc>

023fa64a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fa64a:	f002 b9ad 	b.w	23fc9a8 <free>
	...

023fa650 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa650:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fa652:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa654:	4a02      	ldr	r2, [pc, #8]	; (23fa660 <__cxa_pure_virtual+0x10>)
 23fa656:	4903      	ldr	r1, [pc, #12]	; (23fa664 <__cxa_pure_virtual+0x14>)
 23fa658:	f002 f864 	bl	23fc724 <panic_>
  while (1);
 23fa65c:	e7fe      	b.n	23fa65c <__cxa_pure_virtual+0xc>
 23fa65e:	bf00      	nop
 23fa660:	023fc1ad 	.word	0x023fc1ad
 23fa664:	023fded4 	.word	0x023fded4

023fa668 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fa668:	7800      	ldrb	r0, [r0, #0]
 23fa66a:	fab0 f080 	clz	r0, r0
 23fa66e:	0940      	lsrs	r0, r0, #5
 23fa670:	4770      	bx	lr

023fa672 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fa672:	2301      	movs	r3, #1
 23fa674:	7003      	strb	r3, [r0, #0]
 23fa676:	4770      	bx	lr

023fa678 <_Z11draw_screenv>:
  }

  draw_screen();                                                                         // calls draw_screen() function
}

void draw_screen() {
 23fa678:	b510      	push	{r4, lr}
  
  tft.setFont(&FreeSansBold12pt7b);                                                      // set font
 23fa67a:	4c0f      	ldr	r4, [pc, #60]	; (23fa6b8 <_Z11draw_screenv+0x40>)
 23fa67c:	490f      	ldr	r1, [pc, #60]	; (23fa6bc <_Z11draw_screenv+0x44>)
 23fa67e:	4620      	mov	r0, r4
 23fa680:	f000 fe7b 	bl	23fb37a <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fa684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fa688:	6163      	str	r3, [r4, #20]
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(boolean w) { wrap = w; }
 23fa68a:	2300      	movs	r3, #0
  tft.setTextColor(ST77XX_WHITE);                                                        // set font colour
  tft.setTextWrap(false); 
  tft.setTextSize(3);                                                                    // set font size
 23fa68c:	4620      	mov	r0, r4
 23fa68e:	2103      	movs	r1, #3
 23fa690:	76e3      	strb	r3, [r4, #27]
 23fa692:	f000 fe6c 	bl	23fb36e <_ZN12Adafruit_GFX11setTextSizeEh>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fa696:	4b0a      	ldr	r3, [pc, #40]	; (23fa6c0 <_Z11draw_screenv+0x48>)
  
  tft.setCursor(45, 70);                                                                 // set sursor to start writing text
  tft.print("CO2");
 23fa698:	4620      	mov	r0, r4
 23fa69a:	490a      	ldr	r1, [pc, #40]	; (23fa6c4 <_Z11draw_screenv+0x4c>)
 23fa69c:	6123      	str	r3, [r4, #16]
 23fa69e:	f002 feb5 	bl	23fd40c <_ZN5Print5printEPKc>
 23fa6a2:	4b09      	ldr	r3, [pc, #36]	; (23fa6c8 <_Z11draw_screenv+0x50>)
  
  tft.setCursor(15, 235);
  tft.print("TVOC");
 23fa6a4:	4620      	mov	r0, r4
 23fa6a6:	4909      	ldr	r1, [pc, #36]	; (23fa6cc <_Z11draw_screenv+0x54>)
 23fa6a8:	6123      	str	r3, [r4, #16]
 23fa6aa:	f002 feaf 	bl	23fd40c <_ZN5Print5printEPKc>
  
  delay(50);

}
 23fa6ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(50);
 23fa6b2:	2032      	movs	r0, #50	; 0x32
 23fa6b4:	f002 b9be 	b.w	23fca34 <delay>
 23fa6b8:	1007ae20 	.word	0x1007ae20
 23fa6bc:	023fdf64 	.word	0x023fdf64
 23fa6c0:	0046002d 	.word	0x0046002d
 23fa6c4:	023fdee9 	.word	0x023fdee9
 23fa6c8:	00eb000f 	.word	0x00eb000f
 23fa6cc:	023fdeed 	.word	0x023fdeed

023fa6d0 <_Z12print_valuesv>:

void print_values() {
 23fa6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 
  tft.fillRect(0,95,120,60,ST77XX_WHITE);                                               // draws background fills for readings
 23fa6d2:	253c      	movs	r5, #60	; 0x3c
 23fa6d4:	f64f 77ff 	movw	r7, #65535	; 0xffff
  tft.fillRect(121,95,120,60,ST77XX_BLUE);                                               
 23fa6d8:	261f      	movs	r6, #31
  tft.fillRect(0,95,120,60,ST77XX_WHITE);                                               // draws background fills for readings
 23fa6da:	4c3d      	ldr	r4, [pc, #244]	; (23fa7d0 <_Z12print_valuesv+0x100>)
 23fa6dc:	e9cd 5700 	strd	r5, r7, [sp]
 23fa6e0:	4620      	mov	r0, r4
 23fa6e2:	2378      	movs	r3, #120	; 0x78
 23fa6e4:	225f      	movs	r2, #95	; 0x5f
 23fa6e6:	2100      	movs	r1, #0
 23fa6e8:	f001 f83d 	bl	23fb766 <_ZN15Adafruit_SPITFT8fillRectEsssst>
  tft.fillRect(121,95,120,60,ST77XX_BLUE);                                               
 23fa6ec:	4620      	mov	r0, r4
 23fa6ee:	e9cd 5600 	strd	r5, r6, [sp]
 23fa6f2:	2378      	movs	r3, #120	; 0x78
 23fa6f4:	225f      	movs	r2, #95	; 0x5f
 23fa6f6:	2179      	movs	r1, #121	; 0x79
 23fa6f8:	f001 f835 	bl	23fb766 <_ZN15Adafruit_SPITFT8fillRectEsssst>
    
  tft.fillRect(0,260,120,60,ST77XX_WHITE);
 23fa6fc:	4620      	mov	r0, r4
 23fa6fe:	e9cd 5700 	strd	r5, r7, [sp]
 23fa702:	2378      	movs	r3, #120	; 0x78
 23fa704:	f44f 7282 	mov.w	r2, #260	; 0x104
 23fa708:	2100      	movs	r1, #0
 23fa70a:	f001 f82c 	bl	23fb766 <_ZN15Adafruit_SPITFT8fillRectEsssst>
  tft.fillRect(121,260,120,60,ST77XX_BLUE);
 23fa70e:	4620      	mov	r0, r4
 23fa710:	e9cd 5600 	strd	r5, r6, [sp]
 23fa714:	2378      	movs	r3, #120	; 0x78
 23fa716:	f44f 7282 	mov.w	r2, #260	; 0x104
 23fa71a:	2179      	movs	r1, #121	; 0x79
 23fa71c:	f001 f823 	bl	23fb766 <_ZN15Adafruit_SPITFT8fillRectEsssst>
  void setTextWrap(boolean w) { wrap = w; }
 23fa720:	2300      	movs	r3, #0
 23fa722:	76e3      	strb	r3, [r4, #27]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fa724:	f04f 131f 	mov.w	r3, #2031647	; 0x1f001f
 23fa728:	4a2a      	ldr	r2, [pc, #168]	; (23fa7d4 <_Z12print_valuesv+0x104>)
  tft.setTextWrap(false);
  tft.setCursor(25, 120);
  tft.setTextColor(ST77XX_BLUE);
  tft.setFont(&FreeSansOblique12pt7b);
  tft.setTextSize(1);
  tft.println(sgp.eCO2);
 23fa72a:	4d2b      	ldr	r5, [pc, #172]	; (23fa7d8 <_Z12print_valuesv+0x108>)
  tft.setFont(&FreeSansOblique12pt7b);
 23fa72c:	4620      	mov	r0, r4
 23fa72e:	492b      	ldr	r1, [pc, #172]	; (23fa7dc <_Z12print_valuesv+0x10c>)
 23fa730:	e9c4 2304 	strd	r2, r3, [r4, #16]
 23fa734:	f000 fe21 	bl	23fb37a <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.setTextSize(1);
 23fa738:	4620      	mov	r0, r4
 23fa73a:	2101      	movs	r1, #1
 23fa73c:	f000 fe17 	bl	23fb36e <_ZN12Adafruit_GFX11setTextSizeEh>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fa740:	220a      	movs	r2, #10
 23fa742:	8869      	ldrh	r1, [r5, #2]
 23fa744:	4620      	mov	r0, r4
 23fa746:	f002 fe7e 	bl	23fd446 <_ZN5Print11printNumberEmh>
        n += println();
 23fa74a:	4620      	mov	r0, r4
 23fa74c:	f002 fe65 	bl	23fd41a <_ZN5Print7printlnEv>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fa750:	4b23      	ldr	r3, [pc, #140]	; (23fa7e0 <_Z12print_valuesv+0x110>)
  tft.setCursor(25, 145);
  tft.println("ppm");
 23fa752:	4620      	mov	r0, r4
 23fa754:	4923      	ldr	r1, [pc, #140]	; (23fa7e4 <_Z12print_valuesv+0x114>)
 23fa756:	6123      	str	r3, [r4, #16]
 23fa758:	f002 fe6b 	bl	23fd432 <_ZN5Print7printlnEPKc>
 23fa75c:	4b22      	ldr	r3, [pc, #136]	; (23fa7e8 <_Z12print_valuesv+0x118>)
        return printNumber(val, base) + t;
 23fa75e:	220a      	movs	r2, #10
 23fa760:	8829      	ldrh	r1, [r5, #0]
 23fa762:	4620      	mov	r0, r4
 23fa764:	6123      	str	r3, [r4, #16]
 23fa766:	f002 fe6e 	bl	23fd446 <_ZN5Print11printNumberEmh>
        n += println();
 23fa76a:	4620      	mov	r0, r4
 23fa76c:	f002 fe55 	bl	23fd41a <_ZN5Print7printlnEv>
 23fa770:	4b1e      	ldr	r3, [pc, #120]	; (23fa7ec <_Z12print_valuesv+0x11c>)
  //Serial.print("G_eCO2 "); Serial.print(sgp.eCO2); Serial.print(" ppm");              // DEBUG
  
  tft.setCursor(25, 285);
  tft.println(sgp.TVOC); 
  tft.setCursor(25, 310);
  tft.println("ppb\\t");
 23fa772:	4620      	mov	r0, r4
 23fa774:	491e      	ldr	r1, [pc, #120]	; (23fa7f0 <_Z12print_valuesv+0x120>)
 23fa776:	6123      	str	r3, [r4, #16]
 23fa778:	f002 fe5b 	bl	23fd432 <_ZN5Print7printlnEPKc>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fa77c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fa780:	491c      	ldr	r1, [pc, #112]	; (23fa7f4 <_Z12print_valuesv+0x124>)
        return printNumber(val, base) + t;
 23fa782:	220a      	movs	r2, #10
 23fa784:	e9c4 1304 	strd	r1, r3, [r4, #16]
 23fa788:	4620      	mov	r0, r4
 23fa78a:	88a9      	ldrh	r1, [r5, #4]
 23fa78c:	f002 fe5b 	bl	23fd446 <_ZN5Print11printNumberEmh>
        n += println();
 23fa790:	4620      	mov	r0, r4
 23fa792:	f002 fe42 	bl	23fd41a <_ZN5Print7printlnEv>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fa796:	4b18      	ldr	r3, [pc, #96]	; (23fa7f8 <_Z12print_valuesv+0x128>)

  tft.setCursor(150, 120);
  tft.setTextColor(ST77XX_WHITE);
  tft.println(sgp.rawH2);
  tft.setCursor(150, 145); 
  tft.println("H2 \\t");
 23fa798:	4620      	mov	r0, r4
 23fa79a:	4918      	ldr	r1, [pc, #96]	; (23fa7fc <_Z12print_valuesv+0x12c>)
 23fa79c:	6123      	str	r3, [r4, #16]
 23fa79e:	f002 fe48 	bl	23fd432 <_ZN5Print7printlnEPKc>
 23fa7a2:	4b17      	ldr	r3, [pc, #92]	; (23fa800 <_Z12print_valuesv+0x130>)
        return printNumber(val, base) + t;
 23fa7a4:	220a      	movs	r2, #10
 23fa7a6:	88e9      	ldrh	r1, [r5, #6]
 23fa7a8:	4620      	mov	r0, r4
 23fa7aa:	6123      	str	r3, [r4, #16]
 23fa7ac:	f002 fe4b 	bl	23fd446 <_ZN5Print11printNumberEmh>
        n += println();
 23fa7b0:	4620      	mov	r0, r4
 23fa7b2:	f002 fe32 	bl	23fd41a <_ZN5Print7printlnEv>
 23fa7b6:	4b13      	ldr	r3, [pc, #76]	; (23fa804 <_Z12print_valuesv+0x134>)

  tft.setCursor(150, 285);
  tft.println(sgp.rawEthanol); 
  tft.setCursor(145, 310);
  tft.print("Ethanol"); 
 23fa7b8:	4620      	mov	r0, r4
 23fa7ba:	4913      	ldr	r1, [pc, #76]	; (23fa808 <_Z12print_valuesv+0x138>)
 23fa7bc:	6123      	str	r3, [r4, #16]
 23fa7be:	f002 fe25 	bl	23fd40c <_ZN5Print5printEPKc>

  delay(50);
 23fa7c2:	2032      	movs	r0, #50	; 0x32

}
 23fa7c4:	b003      	add	sp, #12
 23fa7c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  delay(50);
 23fa7ca:	f002 b933 	b.w	23fca34 <delay>
 23fa7ce:	bf00      	nop
 23fa7d0:	1007ae20 	.word	0x1007ae20
 23fa7d4:	00780019 	.word	0x00780019
 23fa7d8:	1007ae0c 	.word	0x1007ae0c
 23fa7dc:	023fdf70 	.word	0x023fdf70
 23fa7e0:	00910019 	.word	0x00910019
 23fa7e4:	023fdf40 	.word	0x023fdf40
 23fa7e8:	011d0019 	.word	0x011d0019
 23fa7ec:	01360019 	.word	0x01360019
 23fa7f0:	023fdef2 	.word	0x023fdef2
 23fa7f4:	00780096 	.word	0x00780096
 23fa7f8:	00910096 	.word	0x00910096
 23fa7fc:	023fdef8 	.word	0x023fdef8
 23fa800:	011d0096 	.word	0x011d0096
 23fa804:	01360091 	.word	0x01360091
 23fa808:	023fdefe 	.word	0x023fdefe

023fa80c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fa80c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fa80e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fa810:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fa812:	b17c      	cbz	r4, 23fa834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fa814:	6863      	ldr	r3, [r4, #4]
 23fa816:	3b01      	subs	r3, #1
 23fa818:	6063      	str	r3, [r4, #4]
 23fa81a:	b95b      	cbnz	r3, 23fa834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fa81c:	6823      	ldr	r3, [r4, #0]
 23fa81e:	4620      	mov	r0, r4
 23fa820:	689b      	ldr	r3, [r3, #8]
 23fa822:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fa824:	68a3      	ldr	r3, [r4, #8]
 23fa826:	3b01      	subs	r3, #1
 23fa828:	60a3      	str	r3, [r4, #8]
 23fa82a:	b91b      	cbnz	r3, 23fa834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fa82c:	6823      	ldr	r3, [r4, #0]
 23fa82e:	4620      	mov	r0, r4
 23fa830:	68db      	ldr	r3, [r3, #12]
 23fa832:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fa834:	4628      	mov	r0, r5
 23fa836:	bd38      	pop	{r3, r4, r5, pc}

023fa838 <setup>:
void setup() {
 23fa838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(115200);                                                                // Start serial
 23fa83a:	f002 ffb1 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fa83e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23fa842:	f002 ff9b 	bl	23fd77c <_ZN9USBSerial5beginEl>
  pinMode(A2, OUTPUT);                                                                 // sets the pin as output
 23fa846:	2101      	movs	r1, #1
 23fa848:	200d      	movs	r0, #13
 23fa84a:	f003 f8f1 	bl	23fda30 <pinMode>
  analogWriteResolution(A2, 12);                                                    // sets analogWrite resolution to 12 bits
 23fa84e:	210c      	movs	r1, #12
 23fa850:	200d      	movs	r0, #13
 23fa852:	f003 f933 	bl	23fdabc <_Z21analogWriteResolutionth>
  int maxFreq = analogWriteMaxFrequency(A2);
 23fa856:	200d      	movs	r0, #13
 23fa858:	f003 f956 	bl	23fdb08 <_Z23analogWriteMaxFrequencyt>
  analogWrite(A2, 3000, maxFreq / 2);                                               // 2000/4095 = ~50% duty cycle                                                             
 23fa85c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 23fa860:	1042      	asrs	r2, r0, #1
 23fa862:	f640 31b8 	movw	r1, #3000	; 0xbb8
 23fa866:	200d      	movs	r0, #13
 23fa868:	f003 f90c 	bl	23fda84 <_Z11analogWritetmm>
  tft.init(240, 320);                                                                  // Init ST7789 320x240 
 23fa86c:	21f0      	movs	r1, #240	; 0xf0
 23fa86e:	4817      	ldr	r0, [pc, #92]	; (23fa8cc <setup+0x94>)
 23fa870:	f44f 72a0 	mov.w	r2, #320	; 0x140
 23fa874:	f001 f9f4 	bl	23fbc60 <_ZN15Adafruit_ST77894initEtt>
  tft.fillScreen(ST77XX_BLACK);                                                        // creates black background in dsiplay
 23fa878:	2100      	movs	r1, #0
 23fa87a:	4814      	ldr	r0, [pc, #80]	; (23fa8cc <setup+0x94>)
 23fa87c:	f000 fad4 	bl	23fae28 <_ZN12Adafruit_GFX10fillScreenEt>
  while (!Serial) { delay(10); }                                                       // Wait for serial console to open!
 23fa880:	f002 ff8e 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fa884:	f002 ff81 	bl	23fd78a <_ZN9USBSerialcvbEv>
 23fa888:	b918      	cbnz	r0, 23fa892 <setup+0x5a>
 23fa88a:	200a      	movs	r0, #10
 23fa88c:	f002 f8d2 	bl	23fca34 <delay>
 23fa890:	e7f6      	b.n	23fa880 <setup+0x48>
  if (! sgp.begin()){                                                                  // initialise SGP30 sensor
 23fa892:	f003 f95f 	bl	23fdb54 <_Z19__fetch_global_Wirev>
 23fa896:	2201      	movs	r2, #1
 23fa898:	4601      	mov	r1, r0
 23fa89a:	480d      	ldr	r0, [pc, #52]	; (23fa8d0 <setup+0x98>)
 23fa89c:	f001 fbe7 	bl	23fc06e <_ZN14Adafruit_SGP305beginEP7TwoWireb>
 23fa8a0:	4602      	mov	r2, r0
 23fa8a2:	b960      	cbnz	r0, 23fa8be <setup+0x86>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23fa8a4:	4b0b      	ldr	r3, [pc, #44]	; (23fa8d4 <setup+0x9c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23fa8a6:	a802      	add	r0, sp, #8
 23fa8a8:	781b      	ldrb	r3, [r3, #0]
 23fa8aa:	490b      	ldr	r1, [pc, #44]	; (23fa8d8 <setup+0xa0>)
 23fa8ac:	f88d 3000 	strb.w	r3, [sp]
 23fa8b0:	233c      	movs	r3, #60	; 0x3c
 23fa8b2:	f002 fa25 	bl	23fcd00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23fa8b6:	a803      	add	r0, sp, #12
 23fa8b8:	f7ff ffa8 	bl	23fa80c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    while (1);
 23fa8bc:	e7fe      	b.n	23fa8bc <setup+0x84>
  delay(50);
 23fa8be:	2032      	movs	r0, #50	; 0x32
}
 23fa8c0:	b005      	add	sp, #20
 23fa8c2:	f85d eb04 	ldr.w	lr, [sp], #4
  delay(50);
 23fa8c6:	f002 b8b5 	b.w	23fca34 <delay>
 23fa8ca:	bf00      	nop
 23fa8cc:	1007ae20 	.word	0x1007ae20
 23fa8d0:	1007ae0c 	.word	0x1007ae0c
 23fa8d4:	1007adf0 	.word	0x1007adf0
 23fa8d8:	023fdf06 	.word	0x023fdf06

023fa8dc <_Z7measurev>:
void measure() {
 23fa8dc:	b570      	push	{r4, r5, r6, lr}
  if (! sgp.IAQmeasure()) {
 23fa8de:	4dbf      	ldr	r5, [pc, #764]	; (23fabdc <_Z7measurev+0x300>)
void measure() {
 23fa8e0:	b086      	sub	sp, #24
  if (! sgp.IAQmeasure()) {
 23fa8e2:	4628      	mov	r0, r5
 23fa8e4:	f001 fc11 	bl	23fc10a <_ZN14Adafruit_SGP3010IAQmeasureEv>
 23fa8e8:	b938      	cbnz	r0, 23fa8fa <_Z7measurev+0x1e>
    Serial.println("Measurement failed");                                             // cofirm wiring if this fails
 23fa8ea:	f002 ff59 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fa8ee:	49bc      	ldr	r1, [pc, #752]	; (23fabe0 <_Z7measurev+0x304>)
}
 23fa8f0:	b006      	add	sp, #24
 23fa8f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("Measurement failed");                                             // cofirm wiring if this fails
 23fa8f6:	f002 bd9c 	b.w	23fd432 <_ZN5Print7printlnEPKc>
  if ((sgp.TVOC >= 0) && (sgp.TVOC <= 220) && (tvoc_state[0] == 0)) {                  // TVOC measurement brackets to define warning indicator colour.
 23fa8fa:	882b      	ldrh	r3, [r5, #0]
 23fa8fc:	4cb9      	ldr	r4, [pc, #740]	; (23fabe4 <_Z7measurev+0x308>)
 23fa8fe:	2bdc      	cmp	r3, #220	; 0xdc
 23fa900:	d858      	bhi.n	23fa9b4 <_Z7measurev+0xd8>
 23fa902:	6826      	ldr	r6, [r4, #0]
 23fa904:	bb0e      	cbnz	r6, 23fa94a <_Z7measurev+0x6e>
    Serial.print("G_TVOC "); Serial.print(sgp.TVOC); Serial.print(" ppb\t");           // DEBUG
 23fa906:	f002 ff4b 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fa90a:	49b7      	ldr	r1, [pc, #732]	; (23fabe8 <_Z7measurev+0x30c>)
 23fa90c:	f002 fd7e 	bl	23fd40c <_ZN5Print5printEPKc>
 23fa910:	f002 ff46 	bl	23fd7a0 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
 23fa914:	220a      	movs	r2, #10
 23fa916:	8829      	ldrh	r1, [r5, #0]
 23fa918:	f002 fd95 	bl	23fd446 <_ZN5Print11printNumberEmh>
 23fa91c:	f002 ff40 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fa920:	49b2      	ldr	r1, [pc, #712]	; (23fabec <_Z7measurev+0x310>)
 23fa922:	f002 fd73 	bl	23fd40c <_ZN5Print5printEPKc>
    tft.fillRect(0,165,240,95,ST77XX_GREEN);
 23fa926:	235f      	movs	r3, #95	; 0x5f
 23fa928:	f44f 6cfc 	mov.w	ip, #2016	; 0x7e0
 23fa92c:	22a5      	movs	r2, #165	; 0xa5
 23fa92e:	e9cd 3c00 	strd	r3, ip, [sp]
 23fa932:	4631      	mov	r1, r6
 23fa934:	23f0      	movs	r3, #240	; 0xf0
 23fa936:	48ae      	ldr	r0, [pc, #696]	; (23fabf0 <_Z7measurev+0x314>)
 23fa938:	f000 ff15 	bl	23fb766 <_ZN15Adafruit_SPITFT8fillRectEsssst>
    tvoc_state[0] = 1;                                                                  // Array is contructed to prevent code from writing the images consitently if there has been no change
 23fa93c:	2301      	movs	r3, #1
    tvoc_state[3] = 0;
 23fa93e:	e9c4 6602 	strd	r6, r6, [r4, #8]
    tvoc_state[1] = 0;                                                                  // This applies to the entire IF stament for both TVOC and CO2   
 23fa942:	e9c4 3600 	strd	r3, r6, [r4]
    print_values();
 23fa946:	f7ff fec3 	bl	23fa6d0 <_Z12print_valuesv>
if ((sgp.eCO2 >= 0) && (sgp.eCO2 <= 1000) && (co2_state[0] == 0)) {
 23fa94a:	886b      	ldrh	r3, [r5, #2]
 23fa94c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 23fa950:	f200 80a9 	bhi.w	23faaa6 <_Z7measurev+0x1ca>
 23fa954:	4ea7      	ldr	r6, [pc, #668]	; (23fabf4 <_Z7measurev+0x318>)
 23fa956:	6834      	ldr	r4, [r6, #0]
 23fa958:	b9fc      	cbnz	r4, 23fa99a <_Z7measurev+0xbe>
  Serial.print("G_CO2 "); Serial.print(sgp.eCO2); Serial.print(" ppm");                // DEBUG
 23fa95a:	f002 ff21 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fa95e:	49a6      	ldr	r1, [pc, #664]	; (23fabf8 <_Z7measurev+0x31c>)
 23fa960:	f002 fd54 	bl	23fd40c <_ZN5Print5printEPKc>
 23fa964:	f002 ff1c 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fa968:	220a      	movs	r2, #10
 23fa96a:	8869      	ldrh	r1, [r5, #2]
 23fa96c:	f002 fd6b 	bl	23fd446 <_ZN5Print11printNumberEmh>
 23fa970:	f002 ff16 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fa974:	49a1      	ldr	r1, [pc, #644]	; (23fabfc <_Z7measurev+0x320>)
 23fa976:	f002 fd49 	bl	23fd40c <_ZN5Print5printEPKc>
  tft.fillRect(0,0,240,95,ST77XX_GREEN);
 23fa97a:	235f      	movs	r3, #95	; 0x5f
 23fa97c:	f44f 6cfc 	mov.w	ip, #2016	; 0x7e0
 23fa980:	4622      	mov	r2, r4
 23fa982:	e9cd 3c00 	strd	r3, ip, [sp]
 23fa986:	4621      	mov	r1, r4
 23fa988:	23f0      	movs	r3, #240	; 0xf0
 23fa98a:	4899      	ldr	r0, [pc, #612]	; (23fabf0 <_Z7measurev+0x314>)
 23fa98c:	f000 feeb 	bl	23fb766 <_ZN15Adafruit_SPITFT8fillRectEsssst>
  co2_state[0] = 1;
 23fa990:	2301      	movs	r3, #1
  co2_state[1] = 0;
 23fa992:	e9c6 3400 	strd	r3, r4, [r6]
          co2_state[2] = 0;
 23fa996:	60b4      	str	r4, [r6, #8]
          co2_state[3] = 0;
 23fa998:	60f4      	str	r4, [r6, #12]
  counter++;                                
 23fa99a:	4b99      	ldr	r3, [pc, #612]	; (23fac00 <_Z7measurev+0x324>)
 23fa99c:	681a      	ldr	r2, [r3, #0]
  if (counter == 30) {
 23fa99e:	2a1d      	cmp	r2, #29
  counter++;                                
 23fa9a0:	f102 0101 	add.w	r1, r2, #1
  if (counter == 30) {
 23fa9a4:	f000 80ff 	beq.w	23faba6 <_Z7measurev+0x2ca>
  counter++;                                
 23fa9a8:	6019      	str	r1, [r3, #0]
}
 23fa9aa:	b006      	add	sp, #24
 23fa9ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  draw_screen();                                                                         // calls draw_screen() function
 23fa9b0:	f7ff be62 	b.w	23fa678 <_Z11draw_screenv>
  } else if ((sgp.TVOC >= 221) && (sgp.TVOC <= 660) && (tvoc_state[1] == 0)) {
 23fa9b4:	f1a3 02dd 	sub.w	r2, r3, #221	; 0xdd
 23fa9b8:	f5b2 7fdc 	cmp.w	r2, #440	; 0x1b8
 23fa9bc:	d223      	bcs.n	23faa06 <_Z7measurev+0x12a>
 23fa9be:	6866      	ldr	r6, [r4, #4]
 23fa9c0:	2e00      	cmp	r6, #0
 23fa9c2:	d1c2      	bne.n	23fa94a <_Z7measurev+0x6e>
          Serial.print("G_TVOC "); Serial.print(sgp.TVOC); Serial.print(" ppb\t");     // DEBUG
 23fa9c4:	f002 feec 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fa9c8:	4987      	ldr	r1, [pc, #540]	; (23fabe8 <_Z7measurev+0x30c>)
 23fa9ca:	f002 fd1f 	bl	23fd40c <_ZN5Print5printEPKc>
 23fa9ce:	f002 fee7 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fa9d2:	220a      	movs	r2, #10
 23fa9d4:	8829      	ldrh	r1, [r5, #0]
 23fa9d6:	f002 fd36 	bl	23fd446 <_ZN5Print11printNumberEmh>
 23fa9da:	f002 fee1 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fa9de:	4983      	ldr	r1, [pc, #524]	; (23fabec <_Z7measurev+0x310>)
 23fa9e0:	f002 fd14 	bl	23fd40c <_ZN5Print5printEPKc>
          tft.fillRect(0,165,240,95,ST77XX_YELLOW);
 23fa9e4:	235f      	movs	r3, #95	; 0x5f
 23fa9e6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 23fa9ea:	22a5      	movs	r2, #165	; 0xa5
 23fa9ec:	e9cd 3000 	strd	r3, r0, [sp]
 23fa9f0:	4631      	mov	r1, r6
 23fa9f2:	23f0      	movs	r3, #240	; 0xf0
 23fa9f4:	487e      	ldr	r0, [pc, #504]	; (23fabf0 <_Z7measurev+0x314>)
 23fa9f6:	f000 feb6 	bl	23fb766 <_ZN15Adafruit_SPITFT8fillRectEsssst>
          tvoc_state[1] = 1;
 23fa9fa:	2301      	movs	r3, #1
          tvoc_state[2] = 0;
 23fa9fc:	e9c4 3601 	strd	r3, r6, [r4, #4]
          tvoc_state[0] = 0;
 23faa00:	6026      	str	r6, [r4, #0]
          tvoc_state[3] = 0;
 23faa02:	60e6      	str	r6, [r4, #12]
 23faa04:	e7a1      	b.n	23fa94a <_Z7measurev+0x6e>
  } else if ((sgp.TVOC >= 661) && (sgp.TVOC <= 1430) && (tvoc_state[2] == 0)) {
 23faa06:	f46f 7125 	mvn.w	r1, #660	; 0x294
 23faa0a:	f240 3201 	movw	r2, #769	; 0x301
 23faa0e:	440b      	add	r3, r1
 23faa10:	b29b      	uxth	r3, r3
 23faa12:	4293      	cmp	r3, r2
 23faa14:	d822      	bhi.n	23faa5c <_Z7measurev+0x180>
 23faa16:	68a6      	ldr	r6, [r4, #8]
 23faa18:	2e00      	cmp	r6, #0
 23faa1a:	d196      	bne.n	23fa94a <_Z7measurev+0x6e>
          Serial.print("G_TVOC "); Serial.print(sgp.TVOC); Serial.print(" ppb\t");    // DEBUG
 23faa1c:	f002 fec0 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23faa20:	4971      	ldr	r1, [pc, #452]	; (23fabe8 <_Z7measurev+0x30c>)
 23faa22:	f002 fcf3 	bl	23fd40c <_ZN5Print5printEPKc>
 23faa26:	f002 febb 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23faa2a:	220a      	movs	r2, #10
 23faa2c:	8829      	ldrh	r1, [r5, #0]
 23faa2e:	f002 fd0a 	bl	23fd446 <_ZN5Print11printNumberEmh>
 23faa32:	f002 feb5 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23faa36:	496d      	ldr	r1, [pc, #436]	; (23fabec <_Z7measurev+0x310>)
 23faa38:	f002 fce8 	bl	23fd40c <_ZN5Print5printEPKc>
          tft.fillRect(0,165,240,95,ST77XX_ORANGE);
 23faa3c:	235f      	movs	r3, #95	; 0x5f
 23faa3e:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 23faa42:	4631      	mov	r1, r6
 23faa44:	e9cd 3200 	strd	r3, r2, [sp]
 23faa48:	4869      	ldr	r0, [pc, #420]	; (23fabf0 <_Z7measurev+0x314>)
 23faa4a:	23f0      	movs	r3, #240	; 0xf0
 23faa4c:	22a5      	movs	r2, #165	; 0xa5
 23faa4e:	f000 fe8a 	bl	23fb766 <_ZN15Adafruit_SPITFT8fillRectEsssst>
          tvoc_state[2] = 1;
 23faa52:	2301      	movs	r3, #1
          tvoc_state[1] = 0;
 23faa54:	e9c4 6600 	strd	r6, r6, [r4]
          tvoc_state[2] = 1;
 23faa58:	60a3      	str	r3, [r4, #8]
 23faa5a:	e7d2      	b.n	23faa02 <_Z7measurev+0x126>
  } else if ((sgp.TVOC >= 1431) && (tvoc_state[3] == 0)) {
 23faa5c:	68e6      	ldr	r6, [r4, #12]
 23faa5e:	2e00      	cmp	r6, #0
 23faa60:	f47f af73 	bne.w	23fa94a <_Z7measurev+0x6e>
          Serial.print("G_TVOC "); Serial.print(sgp.TVOC); Serial.print(" ppb\t");     // DEBUG
 23faa64:	f002 fe9c 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23faa68:	495f      	ldr	r1, [pc, #380]	; (23fabe8 <_Z7measurev+0x30c>)
 23faa6a:	f002 fccf 	bl	23fd40c <_ZN5Print5printEPKc>
 23faa6e:	f002 fe97 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23faa72:	220a      	movs	r2, #10
 23faa74:	8829      	ldrh	r1, [r5, #0]
 23faa76:	f002 fce6 	bl	23fd446 <_ZN5Print11printNumberEmh>
 23faa7a:	f002 fe91 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23faa7e:	495b      	ldr	r1, [pc, #364]	; (23fabec <_Z7measurev+0x310>)
 23faa80:	f002 fcc4 	bl	23fd40c <_ZN5Print5printEPKc>
          tft.fillRect(0,165,240,95,ST77XX_RED);
 23faa84:	235f      	movs	r3, #95	; 0x5f
 23faa86:	f44f 4e78 	mov.w	lr, #63488	; 0xf800
 23faa8a:	22a5      	movs	r2, #165	; 0xa5
 23faa8c:	e9cd 3e00 	strd	r3, lr, [sp]
 23faa90:	4631      	mov	r1, r6
 23faa92:	23f0      	movs	r3, #240	; 0xf0
 23faa94:	4856      	ldr	r0, [pc, #344]	; (23fabf0 <_Z7measurev+0x314>)
 23faa96:	f000 fe66 	bl	23fb766 <_ZN15Adafruit_SPITFT8fillRectEsssst>
          tvoc_state[3] = 1;
 23faa9a:	2301      	movs	r3, #1
          tvoc_state[1] = 0;
 23faa9c:	e9c4 6600 	strd	r6, r6, [r4]
          tvoc_state[2] = 0;
 23faaa0:	60a6      	str	r6, [r4, #8]
          tvoc_state[3] = 1;
 23faaa2:	60e3      	str	r3, [r4, #12]
 23faaa4:	e751      	b.n	23fa94a <_Z7measurev+0x6e>
  } else if ((sgp.eCO2 >= 1001) && (sgp.eCO2 <= 2000) && (co2_state[1] == 0)) {
 23faaa6:	f46f 767a 	mvn.w	r6, #1000	; 0x3e8
 23faaaa:	199a      	adds	r2, r3, r6
 23faaac:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 23faab0:	d223      	bcs.n	23faafa <_Z7measurev+0x21e>
 23faab2:	4e50      	ldr	r6, [pc, #320]	; (23fabf4 <_Z7measurev+0x318>)
 23faab4:	6874      	ldr	r4, [r6, #4]
 23faab6:	2c00      	cmp	r4, #0
 23faab8:	f47f af6f 	bne.w	23fa99a <_Z7measurev+0xbe>
          Serial.print("G_CO2 "); Serial.print(sgp.eCO2); Serial.print(" ppm");        // DEBUG
 23faabc:	f002 fe70 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23faac0:	494d      	ldr	r1, [pc, #308]	; (23fabf8 <_Z7measurev+0x31c>)
 23faac2:	f002 fca3 	bl	23fd40c <_ZN5Print5printEPKc>
 23faac6:	f002 fe6b 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23faaca:	220a      	movs	r2, #10
 23faacc:	8869      	ldrh	r1, [r5, #2]
 23faace:	f002 fcba 	bl	23fd446 <_ZN5Print11printNumberEmh>
 23faad2:	f002 fe65 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23faad6:	4949      	ldr	r1, [pc, #292]	; (23fabfc <_Z7measurev+0x320>)
 23faad8:	f002 fc98 	bl	23fd40c <_ZN5Print5printEPKc>
          tft.fillRect(0,0,240,95,ST77XX_YELLOW);
 23faadc:	f64f 75e0 	movw	r5, #65504	; 0xffe0
 23faae0:	235f      	movs	r3, #95	; 0x5f
 23faae2:	4622      	mov	r2, r4
 23faae4:	e9cd 3500 	strd	r3, r5, [sp]
 23faae8:	4621      	mov	r1, r4
 23faaea:	23f0      	movs	r3, #240	; 0xf0
 23faaec:	4840      	ldr	r0, [pc, #256]	; (23fabf0 <_Z7measurev+0x314>)
 23faaee:	f000 fe3a 	bl	23fb766 <_ZN15Adafruit_SPITFT8fillRectEsssst>
          co2_state[1] = 1;
 23faaf2:	2301      	movs	r3, #1
          co2_state[0] = 0;
 23faaf4:	6034      	str	r4, [r6, #0]
          co2_state[1] = 1;
 23faaf6:	6073      	str	r3, [r6, #4]
 23faaf8:	e74d      	b.n	23fa996 <_Z7measurev+0xba>
  } else if ((sgp.eCO2 >= 2001) && (sgp.eCO2 <= 5000) && (co2_state[2] == 0)) {
 23faafa:	f46f 60fa 	mvn.w	r0, #2000	; 0x7d0
 23faafe:	f640 31b7 	movw	r1, #2999	; 0xbb7
 23fab02:	181a      	adds	r2, r3, r0
 23fab04:	b292      	uxth	r2, r2
 23fab06:	428a      	cmp	r2, r1
 23fab08:	d822      	bhi.n	23fab50 <_Z7measurev+0x274>
 23fab0a:	4e3a      	ldr	r6, [pc, #232]	; (23fabf4 <_Z7measurev+0x318>)
 23fab0c:	68b4      	ldr	r4, [r6, #8]
 23fab0e:	b9fc      	cbnz	r4, 23fab50 <_Z7measurev+0x274>
          Serial.print("G_CO2 "); Serial.print(sgp.eCO2); Serial.print(" ppm");        // DEBUG
 23fab10:	f002 fe46 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fab14:	4938      	ldr	r1, [pc, #224]	; (23fabf8 <_Z7measurev+0x31c>)
 23fab16:	f002 fc79 	bl	23fd40c <_ZN5Print5printEPKc>
 23fab1a:	f002 fe41 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fab1e:	220a      	movs	r2, #10
 23fab20:	8869      	ldrh	r1, [r5, #2]
 23fab22:	f002 fc90 	bl	23fd446 <_ZN5Print11printNumberEmh>
 23fab26:	f002 fe3b 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fab2a:	4934      	ldr	r1, [pc, #208]	; (23fabfc <_Z7measurev+0x320>)
 23fab2c:	f002 fc6e 	bl	23fd40c <_ZN5Print5printEPKc>
          tft.fillRect(0,0,240,95,ST77XX_ORANGE);
 23fab30:	235f      	movs	r3, #95	; 0x5f
 23fab32:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 23fab36:	4622      	mov	r2, r4
 23fab38:	e9cd 3100 	strd	r3, r1, [sp]
 23fab3c:	482c      	ldr	r0, [pc, #176]	; (23fabf0 <_Z7measurev+0x314>)
 23fab3e:	23f0      	movs	r3, #240	; 0xf0
 23fab40:	4621      	mov	r1, r4
 23fab42:	f000 fe10 	bl	23fb766 <_ZN15Adafruit_SPITFT8fillRectEsssst>
          co2_state[2] = 1;
 23fab46:	2301      	movs	r3, #1
          co2_state[1] = 0;
 23fab48:	e9c6 4400 	strd	r4, r4, [r6]
          co2_state[2] = 1;
 23fab4c:	60b3      	str	r3, [r6, #8]
          co2_state[3] = 0;
 23fab4e:	e723      	b.n	23fa998 <_Z7measurev+0xbc>
  } else if ((sgp.eCO2 >= 5000) && (co2_state[3] == 0)) {
 23fab50:	f241 3287 	movw	r2, #4999	; 0x1387
 23fab54:	4293      	cmp	r3, r2
 23fab56:	f67f af20 	bls.w	23fa99a <_Z7measurev+0xbe>
 23fab5a:	4e26      	ldr	r6, [pc, #152]	; (23fabf4 <_Z7measurev+0x318>)
 23fab5c:	68f4      	ldr	r4, [r6, #12]
 23fab5e:	2c00      	cmp	r4, #0
 23fab60:	f47f af1b 	bne.w	23fa99a <_Z7measurev+0xbe>
          Serial.print("G_CO2 "); Serial.print(sgp.eCO2); Serial.print(" ppm");        // DEBUG
 23fab64:	f002 fe1c 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fab68:	4923      	ldr	r1, [pc, #140]	; (23fabf8 <_Z7measurev+0x31c>)
 23fab6a:	f002 fc4f 	bl	23fd40c <_ZN5Print5printEPKc>
 23fab6e:	f002 fe17 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fab72:	220a      	movs	r2, #10
 23fab74:	8869      	ldrh	r1, [r5, #2]
 23fab76:	f002 fc66 	bl	23fd446 <_ZN5Print11printNumberEmh>
 23fab7a:	f002 fe11 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fab7e:	491f      	ldr	r1, [pc, #124]	; (23fabfc <_Z7measurev+0x320>)
 23fab80:	f002 fc44 	bl	23fd40c <_ZN5Print5printEPKc>
          tft.fillRect(0,0,240,95,ST77XX_RED);
 23fab84:	235f      	movs	r3, #95	; 0x5f
 23fab86:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 23fab8a:	4621      	mov	r1, r4
 23fab8c:	e9cd 3200 	strd	r3, r2, [sp]
 23fab90:	4817      	ldr	r0, [pc, #92]	; (23fabf0 <_Z7measurev+0x314>)
 23fab92:	23f0      	movs	r3, #240	; 0xf0
 23fab94:	4622      	mov	r2, r4
 23fab96:	f000 fde6 	bl	23fb766 <_ZN15Adafruit_SPITFT8fillRectEsssst>
          co2_state[3] = 1;
 23fab9a:	2301      	movs	r3, #1
          co2_state[1] = 0;
 23fab9c:	e9c6 4400 	strd	r4, r4, [r6]
          co2_state[2] = 0;
 23faba0:	60b4      	str	r4, [r6, #8]
          co2_state[3] = 1;
 23faba2:	60f3      	str	r3, [r6, #12]
 23faba4:	e6f9      	b.n	23fa99a <_Z7measurev+0xbe>
    counter = 0;
 23faba6:	2200      	movs	r2, #0
    if (! sgp.getIAQBaseline(&eCO2_base, &TVOC_base)) {
 23faba8:	480c      	ldr	r0, [pc, #48]	; (23fabdc <_Z7measurev+0x300>)
    counter = 0;
 23fabaa:	601a      	str	r2, [r3, #0]
    if (! sgp.getIAQBaseline(&eCO2_base, &TVOC_base)) {
 23fabac:	f10d 010e 	add.w	r1, sp, #14
 23fabb0:	aa03      	add	r2, sp, #12
 23fabb2:	f001 fac3 	bl	23fc13c <_ZN14Adafruit_SGP3014getIAQBaselineEPtS0_>
 23fabb6:	4602      	mov	r2, r0
 23fabb8:	2800      	cmp	r0, #0
 23fabba:	f47f aef6 	bne.w	23fa9aa <_Z7measurev+0xce>
 23fabbe:	4b11      	ldr	r3, [pc, #68]	; (23fac04 <_Z7measurev+0x328>)
 23fabc0:	4911      	ldr	r1, [pc, #68]	; (23fac08 <_Z7measurev+0x32c>)
 23fabc2:	781b      	ldrb	r3, [r3, #0]
 23fabc4:	a804      	add	r0, sp, #16
 23fabc6:	f88d 3000 	strb.w	r3, [sp]
 23fabca:	233c      	movs	r3, #60	; 0x3c
 23fabcc:	f002 f898 	bl	23fcd00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23fabd0:	a805      	add	r0, sp, #20
 23fabd2:	f7ff fe1b 	bl	23fa80c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fabd6:	b006      	add	sp, #24
 23fabd8:	bd70      	pop	{r4, r5, r6, pc}
 23fabda:	bf00      	nop
 23fabdc:	1007ae0c 	.word	0x1007ae0c
 23fabe0:	023fdf17 	.word	0x023fdf17
 23fabe4:	1007ae70 	.word	0x1007ae70
 23fabe8:	023fdf2a 	.word	0x023fdf2a
 23fabec:	023fdf32 	.word	0x023fdf32
 23fabf0:	1007ae20 	.word	0x1007ae20
 23fabf4:	1007adf4 	.word	0x1007adf4
 23fabf8:	023fdf38 	.word	0x023fdf38
 23fabfc:	023fdf3f 	.word	0x023fdf3f
 23fac00:	1007ae04 	.word	0x1007ae04
 23fac04:	1007adf0 	.word	0x1007adf0
 23fac08:	023fdf44 	.word	0x023fdf44

023fac0c <loop>:

void loop() {
 23fac0c:	b538      	push	{r3, r4, r5, lr}

  measure();                                                                            // calls measure() function
 23fac0e:	f7ff fe65 	bl	23fa8dc <_Z7measurev>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fac12:	f001 fad9 	bl	23fc1c8 <HAL_Timer_Get_Milli_Seconds>

  unsigned long currentMillis = millis();                                               // starts timer.  when timer has ellapsed, print_values() function is called.
  if (currentMillis - previousMillis >= interval) {
 23fac16:	f242 720f 	movw	r2, #9999	; 0x270f
 23fac1a:	4d05      	ldr	r5, [pc, #20]	; (23fac30 <loop+0x24>)
 23fac1c:	4604      	mov	r4, r0
 23fac1e:	682b      	ldr	r3, [r5, #0]
 23fac20:	1ac3      	subs	r3, r0, r3
 23fac22:	4293      	cmp	r3, r2
 23fac24:	d902      	bls.n	23fac2c <loop+0x20>
    print_values();
 23fac26:	f7ff fd53 	bl	23fa6d0 <_Z12print_valuesv>
    previousMillis = currentMillis;
 23fac2a:	602c      	str	r4, [r5, #0]
  }
}
 23fac2c:	bd38      	pop	{r3, r4, r5, pc}
 23fac2e:	bf00      	nop
 23fac30:	1007ae08 	.word	0x1007ae08

023fac34 <_GLOBAL__sub_I_tvoc_state>:
        val_(val) {
 23fac34:	2201      	movs	r2, #1
 23fac36:	b508      	push	{r3, lr}
 23fac38:	4b06      	ldr	r3, [pc, #24]	; (23fac54 <_GLOBAL__sub_I_tvoc_state+0x20>)
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);     // Hardware SPI
 23fac3a:	2112      	movs	r1, #18
 23fac3c:	701a      	strb	r2, [r3, #0]
 23fac3e:	4806      	ldr	r0, [pc, #24]	; (23fac58 <_GLOBAL__sub_I_tvoc_state+0x24>)
 23fac40:	2306      	movs	r3, #6
 23fac42:	2205      	movs	r2, #5
 23fac44:	f001 f802 	bl	23fbc4c <_ZN15Adafruit_ST7789C1Eaaa>
}
 23fac48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_SGP30 sgp;                                                 // call SPG30 sensor
 23fac4c:	4803      	ldr	r0, [pc, #12]	; (23fac5c <_GLOBAL__sub_I_tvoc_state+0x28>)
 23fac4e:	f001 b99a 	b.w	23fbf86 <_ZN14Adafruit_SGP30C1Ev>
 23fac52:	bf00      	nop
 23fac54:	1007adf0 	.word	0x1007adf0
 23fac58:	1007ae20 	.word	0x1007ae20
 23fac5c:	1007ae0c 	.word	0x1007ae0c

023fac60 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fac64:	461f      	mov	r7, r3
 23fac66:	b085      	sub	sp, #20
 23fac68:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23fac6c:	eba7 0a01 	sub.w	sl, r7, r1
 23fac70:	eba8 0902 	sub.w	r9, r8, r2
 23fac74:	f1b9 0f00 	cmp.w	r9, #0
 23fac78:	bfb8      	it	lt
 23fac7a:	f1c9 0900 	rsblt	r9, r9, #0
 23fac7e:	f1ba 0f00 	cmp.w	sl, #0
 23fac82:	bfb8      	it	lt
 23fac84:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
 23fac88:	45d1      	cmp	r9, sl
        uint16_t color) {
 23fac8a:	4683      	mov	fp, r0
 23fac8c:	460c      	mov	r4, r1
 23fac8e:	4615      	mov	r5, r2
 23fac90:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (steep) {
 23fac94:	dd04      	ble.n	23faca0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23fac96:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
 23fac98:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
 23fac9a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
 23fac9c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
 23fac9e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
 23faca0:	42bc      	cmp	r4, r7
 23faca2:	dd05      	ble.n	23facb0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23faca4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
 23faca6:	4645      	mov	r5, r8
 23faca8:	4690      	mov	r8, r2
    if (x0 > x1) {
 23facaa:	4622      	mov	r2, r4
 23facac:	463c      	mov	r4, r7
 23facae:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
 23facb0:	1b3e      	subs	r6, r7, r4
 23facb2:	b2b2      	uxth	r2, r6
 23facb4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
 23facb6:	eba8 0205 	sub.w	r2, r8, r5
 23facba:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23facbe:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
 23facc2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23facc6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 23facca:	4545      	cmp	r5, r8
 23faccc:	bfb4      	ite	lt
 23facce:	2201      	movlt	r2, #1
 23facd0:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
 23facd4:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
 23facd6:	1076      	asrs	r6, r6, #1
        ystep = -1;
 23facd8:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
 23facda:	42bc      	cmp	r4, r7
 23facdc:	dc1c      	bgt.n	23fad18 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
 23facde:	f8db 2000 	ldr.w	r2, [fp]
        if (steep) {
 23face2:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
 23face4:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23face8:	bfc7      	ittee	gt
 23facea:	4629      	movgt	r1, r5
 23facec:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
 23facee:	462a      	movle	r2, r5
 23facf0:	4621      	movle	r1, r4
            writePixel(y0, x0, color);
 23facf2:	9303      	str	r3, [sp, #12]
            writePixel(x0, y0, color);
 23facf4:	4658      	mov	r0, fp
 23facf6:	47c0      	blx	r8
        }
        err -= dy;
 23facf8:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
 23facfa:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
 23facfc:	1ab6      	subs	r6, r6, r2
 23facfe:	b2b1      	uxth	r1, r6
 23fad00:	b236      	sxth	r6, r6
        if (err < 0) {
 23fad02:	2e00      	cmp	r6, #0
 23fad04:	da05      	bge.n	23fad12 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
 23fad06:	9a02      	ldr	r2, [sp, #8]
 23fad08:	4415      	add	r5, r2
            err += dx;
 23fad0a:	9a00      	ldr	r2, [sp, #0]
            y0 += ystep;
 23fad0c:	b22d      	sxth	r5, r5
            err += dx;
 23fad0e:	1856      	adds	r6, r2, r1
 23fad10:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
 23fad12:	3401      	adds	r4, #1
 23fad14:	b224      	sxth	r4, r4
 23fad16:	e7e0      	b.n	23facda <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
 23fad18:	b005      	add	sp, #20
 23fad1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fad1e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
 23fad1e:	4770      	bx	lr

023fad20 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
 23fad20:	b410      	push	{r4}
    drawPixel(x, y, color);
 23fad22:	6804      	ldr	r4, [r0, #0]
 23fad24:	6924      	ldr	r4, [r4, #16]
 23fad26:	46a4      	mov	ip, r4
}
 23fad28:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
 23fad2c:	4760      	bx	ip

023fad2e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fad2e:	b430      	push	{r4, r5}
 23fad30:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 23fad34:	6804      	ldr	r4, [r0, #0]
 23fad36:	9502      	str	r5, [sp, #8]
 23fad38:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fad3a:	46a4      	mov	ip, r4
}
 23fad3c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
 23fad3e:	4760      	bx	ip

023fad40 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23fad40:	b430      	push	{r4, r5}
 23fad42:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 23fad46:	6804      	ldr	r4, [r0, #0]
 23fad48:	9502      	str	r5, [sp, #8]
 23fad4a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23fad4c:	46a4      	mov	ip, r4
}
 23fad4e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
 23fad50:	4760      	bx	ip

023fad52 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fad52:	b470      	push	{r4, r5, r6}
 23fad54:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23fad58:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 23fad5c:	6804      	ldr	r4, [r0, #0]
 23fad5e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23fad62:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23fad64:	46a4      	mov	ip, r4
}
 23fad66:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
 23fad68:	4760      	bx	ip

023fad6a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fad6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fad6e:	461c      	mov	r4, r3
 23fad70:	4616      	mov	r6, r2
 23fad72:	4605      	mov	r5, r0
 23fad74:	460f      	mov	r7, r1
    startWrite();
 23fad76:	6803      	ldr	r3, [r0, #0]
    writeLine(x, y, x, y+h-1, color);
 23fad78:	3c01      	subs	r4, #1
        int16_t h, uint16_t color) {
 23fad7a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fad7e:	695b      	ldr	r3, [r3, #20]
    writeLine(x, y, x, y+h-1, color);
 23fad80:	4434      	add	r4, r6
    startWrite();
 23fad82:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
 23fad84:	b224      	sxth	r4, r4
 23fad86:	682b      	ldr	r3, [r5, #0]
 23fad88:	f8cd 8004 	str.w	r8, [sp, #4]
 23fad8c:	9400      	str	r4, [sp, #0]
 23fad8e:	4628      	mov	r0, r5
 23fad90:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23fad92:	4632      	mov	r2, r6
 23fad94:	463b      	mov	r3, r7
 23fad96:	4639      	mov	r1, r7
 23fad98:	47a0      	blx	r4
    endWrite();
 23fad9a:	4628      	mov	r0, r5
 23fad9c:	682b      	ldr	r3, [r5, #0]
 23fad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fada0:	b002      	add	sp, #8
 23fada2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fada6:	4718      	bx	r3

023fada8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23fada8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fadac:	4617      	mov	r7, r2
 23fadae:	4604      	mov	r4, r0
 23fadb0:	461d      	mov	r5, r3
 23fadb2:	460e      	mov	r6, r1
    startWrite();
 23fadb4:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
 23fadb6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fadba:	695b      	ldr	r3, [r3, #20]
 23fadbc:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
 23fadbe:	e9cd 7800 	strd	r7, r8, [sp]
 23fadc2:	6822      	ldr	r2, [r4, #0]
 23fadc4:	1e6b      	subs	r3, r5, #1
 23fadc6:	4433      	add	r3, r6
 23fadc8:	4620      	mov	r0, r4
 23fadca:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23fadcc:	4631      	mov	r1, r6
 23fadce:	463a      	mov	r2, r7
 23fadd0:	b21b      	sxth	r3, r3
 23fadd2:	47a8      	blx	r5
    endWrite();
 23fadd4:	4620      	mov	r0, r4
 23fadd6:	6823      	ldr	r3, [r4, #0]
 23fadd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fadda:	b002      	add	sp, #8
 23faddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fade0:	4718      	bx	r3

023fade2 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fade2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fade6:	461e      	mov	r6, r3
    startWrite();
 23fade8:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23fadea:	460c      	mov	r4, r1
    startWrite();
 23fadec:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23fadee:	4605      	mov	r5, r0
 23fadf0:	4617      	mov	r7, r2
 23fadf2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fadf6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23fadfa:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
 23fadfc:	4426      	add	r6, r4
 23fadfe:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
 23fae00:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
 23fae02:	da0b      	bge.n	23fae1c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
 23fae04:	f8cd 8000 	str.w	r8, [sp]
 23fae08:	4621      	mov	r1, r4
 23fae0a:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fae0e:	463a      	mov	r2, r7
 23fae10:	464b      	mov	r3, r9
 23fae12:	4628      	mov	r0, r5
 23fae14:	3401      	adds	r4, #1
 23fae16:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
 23fae18:	b224      	sxth	r4, r4
 23fae1a:	e7f0      	b.n	23fadfe <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
 23fae1c:	4628      	mov	r0, r5
 23fae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fae20:	b002      	add	sp, #8
 23fae22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23fae26:	4718      	bx	r3

023fae28 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23fae28:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
 23fae2a:	9101      	str	r1, [sp, #4]
 23fae2c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fae30:	6802      	ldr	r2, [r0, #0]
 23fae32:	9100      	str	r1, [sp, #0]
 23fae34:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fae36:	2200      	movs	r2, #0
 23fae38:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fae3c:	4611      	mov	r1, r2
 23fae3e:	47a0      	blx	r4
}
 23fae40:	b002      	add	sp, #8
 23fae42:	bd10      	pop	{r4, pc}

023fae44 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fae44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
 23fae48:	4299      	cmp	r1, r3
        uint16_t color) {
 23fae4a:	4616      	mov	r6, r2
 23fae4c:	4680      	mov	r8, r0
 23fae4e:	460d      	mov	r5, r1
 23fae50:	461c      	mov	r4, r3
 23fae52:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fae56:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fae5a:	6802      	ldr	r2, [r0, #0]
    if(x0 == x1){
 23fae5c:	d112      	bne.n	23fae84 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
        if(y0 > y1) _swap_int16_t(y0, y1);
 23fae5e:	42be      	cmp	r6, r7
 23fae60:	bfc2      	ittt	gt
 23fae62:	4633      	movgt	r3, r6
 23fae64:	463e      	movgt	r6, r7
 23fae66:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fae68:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fae6c:	1c7b      	adds	r3, r7, #1
 23fae6e:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23fae70:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fae72:	4632      	mov	r2, r6
 23fae74:	4629      	mov	r1, r5
 23fae76:	4640      	mov	r0, r8
 23fae78:	46a4      	mov	ip, r4
 23fae7a:	b21b      	sxth	r3, r3
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
 23fae7c:	b003      	add	sp, #12
 23fae7e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fae82:	4760      	bx	ip
    } else if(y0 == y1){
 23fae84:	42be      	cmp	r6, r7
 23fae86:	d10a      	bne.n	23fae9e <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
        if(x0 > x1) _swap_int16_t(x0, x1);
 23fae88:	4299      	cmp	r1, r3
 23fae8a:	bfc2      	ittt	gt
 23fae8c:	460b      	movgt	r3, r1
 23fae8e:	4625      	movgt	r5, r4
 23fae90:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fae92:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fae96:	1c63      	adds	r3, r4, #1
 23fae98:	1b5b      	subs	r3, r3, r5
 23fae9a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23fae9c:	e7e9      	b.n	23fae72 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
        startWrite();
 23fae9e:	6953      	ldr	r3, [r2, #20]
 23faea0:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
 23faea2:	e9cd 7900 	strd	r7, r9, [sp]
 23faea6:	f8d8 3000 	ldr.w	r3, [r8]
 23faeaa:	4640      	mov	r0, r8
 23faeac:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23faeae:	4632      	mov	r2, r6
 23faeb0:	4623      	mov	r3, r4
 23faeb2:	4629      	mov	r1, r5
 23faeb4:	47b8      	blx	r7
        endWrite();
 23faeb6:	4640      	mov	r0, r8
 23faeb8:	f8d8 3000 	ldr.w	r3, [r8]
 23faebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23faebe:	b003      	add	sp, #12
 23faec0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 23faec4:	4718      	bx	r3

023faec6 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23faec6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23faeca:	4604      	mov	r4, r0
 23faecc:	460f      	mov	r7, r1
 23faece:	4616      	mov	r6, r2
 23faed0:	461d      	mov	r5, r3
    startWrite();
 23faed2:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23faed4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23faed8:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23faeda:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
 23faede:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
 23faee0:	6823      	ldr	r3, [r4, #0]
 23faee2:	f8cd 8000 	str.w	r8, [sp]
 23faee6:	4632      	mov	r2, r6
 23faee8:	4639      	mov	r1, r7
 23faeea:	4620      	mov	r0, r4
 23faeec:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23faef0:	462b      	mov	r3, r5
 23faef2:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
 23faef4:	6823      	ldr	r3, [r4, #0]
 23faef6:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23faefa:	f8cd 8000 	str.w	r8, [sp]
 23faefe:	4432      	add	r2, r6
 23faf00:	4639      	mov	r1, r7
 23faf02:	4620      	mov	r0, r4
 23faf04:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23faf08:	b212      	sxth	r2, r2
 23faf0a:	462b      	mov	r3, r5
 23faf0c:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
 23faf0e:	6823      	ldr	r3, [r4, #0]
 23faf10:	f8cd 8000 	str.w	r8, [sp]
 23faf14:	4632      	mov	r2, r6
 23faf16:	4639      	mov	r1, r7
 23faf18:	4620      	mov	r0, r4
 23faf1a:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23faf1e:	464b      	mov	r3, r9
 23faf20:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
 23faf22:	1e6b      	subs	r3, r5, #1
 23faf24:	19d9      	adds	r1, r3, r7
 23faf26:	6823      	ldr	r3, [r4, #0]
 23faf28:	f8cd 8000 	str.w	r8, [sp]
 23faf2c:	4620      	mov	r0, r4
 23faf2e:	6a1d      	ldr	r5, [r3, #32]
 23faf30:	4632      	mov	r2, r6
 23faf32:	464b      	mov	r3, r9
 23faf34:	b209      	sxth	r1, r1
 23faf36:	47a8      	blx	r5
    endWrite();
 23faf38:	4620      	mov	r0, r4
 23faf3a:	6823      	ldr	r3, [r4, #0]
 23faf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23faf3e:	b002      	add	sp, #8
 23faf40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23faf44:	4718      	bx	r3

023faf46 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
 23faf46:	4770      	bx	lr

023faf48 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
 23faf48:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
 23faf4c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
 23faf50:	7683      	strb	r3, [r0, #26]
            _width  = WIDTH;
 23faf52:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    switch(rotation) {
 23faf56:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
 23faf58:	bf59      	ittee	pl
 23faf5a:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
 23faf5c:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
 23faf5e:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
 23faf60:	81c3      	strhmi	r3, [r0, #14]
}
 23faf62:	4770      	bx	lr

023faf64 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 23faf64:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
 23faf66:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 23faf68:	2400      	movs	r4, #0
    _width    = WIDTH;
 23faf6a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
 23faf6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
WIDTH(w), HEIGHT(h)
 23faf70:	4d05      	ldr	r5, [pc, #20]	; (23faf88 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23faf72:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
 23faf74:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
 23faf76:	4a05      	ldr	r2, [pc, #20]	; (23faf8c <_ZN12Adafruit_GFXC1Ess+0x28>)
 23faf78:	6044      	str	r4, [r0, #4]
 23faf7a:	e9c0 1205 	strd	r1, r2, [r0, #20]
WIDTH(w), HEIGHT(h)
 23faf7e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
 23faf80:	6104      	str	r4, [r0, #16]
    _cp437    = false;
 23faf82:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
 23faf84:	6204      	str	r4, [r0, #32]
}
 23faf86:	bd30      	pop	{r4, r5, pc}
 23faf88:	023ffc38 	.word	0x023ffc38
 23faf8c:	01000101 	.word	0x01000101

023faf90 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23faf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23faf94:	ed2d 8b02 	vpush	{d8}
 23faf98:	b091      	sub	sp, #68	; 0x44
 23faf9a:	4616      	mov	r6, r2
 23faf9c:	461f      	mov	r7, r3
    if(!gfxFont) { // 'Classic' built-in font
 23faf9e:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23fafa0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23fafa4:	4683      	mov	fp, r0
 23fafa6:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23fafaa:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23fafae:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23fafb2:	9103      	str	r1, [sp, #12]
 23fafb4:	9304      	str	r3, [sp, #16]
    if(!gfxFont) { // 'Classic' built-in font
 23fafb6:	2a00      	cmp	r2, #0
 23fafb8:	f040 80c5 	bne.w	23fb146 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
 23fafbc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fafc0:	428b      	cmp	r3, r1
 23fafc2:	f340 814c 	ble.w	23fb25e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23fafc6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fafca:	42b3      	cmp	r3, r6
 23fafcc:	f340 8147 	ble.w	23fb25e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fafd0:	2306      	movs	r3, #6
 23fafd2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
 23fafd6:	2b00      	cmp	r3, #0
 23fafd8:	f340 8141 	ble.w	23fb25e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
 23fafdc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fafe0:	2b00      	cmp	r3, #0
 23fafe2:	f340 813c 	ble.w	23fb25e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 23fafe6:	7f03      	ldrb	r3, [r0, #28]
 23fafe8:	b91b      	cbnz	r3, 23faff2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23fafea:	2faf      	cmp	r7, #175	; 0xaf
 23fafec:	bf84      	itt	hi
 23fafee:	3701      	addhi	r7, #1
 23faff0:	b2ff      	uxtbhi	r7, r7
        startWrite();
 23faff2:	f8db 3000 	ldr.w	r3, [fp]
 23faff6:	4658      	mov	r0, fp
 23faff8:	695b      	ldr	r3, [r3, #20]
 23faffa:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23faffc:	2205      	movs	r2, #5
 23faffe:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fb000:	2200      	movs	r2, #0
 23fb002:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fb004:	4a98      	ldr	r2, [pc, #608]	; (23fb268 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23fb006:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23fb00a:	18d3      	adds	r3, r2, r3
 23fb00c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
 23fb00e:	b2b3      	uxth	r3, r6
 23fb010:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fb012:	9a05      	ldr	r2, [sp, #20]
 23fb014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fb016:	fb02 f905 	mul.w	r9, r2, r5
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fb01a:	5c9b      	ldrb	r3, [r3, r2]
 23fb01c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fb01e:	b2ab      	uxth	r3, r5
 23fb020:	930b      	str	r3, [sp, #44]	; 0x2c
 23fb022:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fb026:	9308      	str	r3, [sp, #32]
 23fb028:	9b03      	ldr	r3, [sp, #12]
 23fb02a:	fa19 f983 	uxtah	r9, r9, r3
 23fb02e:	fa0f f389 	sxth.w	r3, r9
 23fb032:	ee08 3a10 	vmov	s16, r3
 23fb036:	2308      	movs	r3, #8
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fb038:	f04f 0900 	mov.w	r9, #0
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fb03c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
 23fb03e:	9b03      	ldr	r3, [sp, #12]
 23fb040:	eb02 0a03 	add.w	sl, r2, r3
 23fb044:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
 23fb048:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
 23fb04a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
 23fb04e:	07d2      	lsls	r2, r2, #31
 23fb050:	d552      	bpl.n	23fb0f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
 23fb052:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fb054:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fb058:	d13e      	bne.n	23fb0d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23fb05a:	2c01      	cmp	r4, #1
 23fb05c:	d13c      	bne.n	23fb0d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
 23fb05e:	699b      	ldr	r3, [r3, #24]
 23fb060:	9906      	ldr	r1, [sp, #24]
 23fb062:	461f      	mov	r7, r3
 23fb064:	9b04      	ldr	r3, [sp, #16]
 23fb066:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
 23fb068:	4651      	mov	r1, sl
 23fb06a:	4658      	mov	r0, fp
 23fb06c:	b212      	sxth	r2, r2
 23fb06e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fb070:	f109 0301 	add.w	r3, r9, #1
 23fb074:	fa4f f983 	sxtb.w	r9, r3
 23fb078:	9b07      	ldr	r3, [sp, #28]
 23fb07a:	085b      	lsrs	r3, r3, #1
 23fb07c:	9307      	str	r3, [sp, #28]
 23fb07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fb080:	3b01      	subs	r3, #1
 23fb082:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fb086:	930a      	str	r3, [sp, #40]	; 0x28
 23fb088:	d1de      	bne.n	23fb048 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fb08a:	9f05      	ldr	r7, [sp, #20]
 23fb08c:	3701      	adds	r7, #1
 23fb08e:	b27b      	sxtb	r3, r7
 23fb090:	9305      	str	r3, [sp, #20]
 23fb092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fb094:	3b01      	subs	r3, #1
 23fb096:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fb09a:	9309      	str	r3, [sp, #36]	; 0x24
 23fb09c:	d1b9      	bne.n	23fb012 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
 23fb09e:	9b04      	ldr	r3, [sp, #16]
 23fb0a0:	4543      	cmp	r3, r8
 23fb0a2:	d00f      	beq.n	23fb0c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 23fb0a4:	2d01      	cmp	r5, #1
 23fb0a6:	f8db 3000 	ldr.w	r3, [fp]
 23fb0aa:	d13b      	bne.n	23fb124 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fb0ac:	2c01      	cmp	r4, #1
 23fb0ae:	d139      	bne.n	23fb124 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fb0b0:	9908      	ldr	r1, [sp, #32]
 23fb0b2:	f8cd 8000 	str.w	r8, [sp]
 23fb0b6:	3105      	adds	r1, #5
 23fb0b8:	6a1c      	ldr	r4, [r3, #32]
 23fb0ba:	4632      	mov	r2, r6
 23fb0bc:	2308      	movs	r3, #8
 23fb0be:	4658      	mov	r0, fp
 23fb0c0:	b209      	sxth	r1, r1
 23fb0c2:	47a0      	blx	r4
        endWrite();
 23fb0c4:	4658      	mov	r0, fp
 23fb0c6:	f8db 3000 	ldr.w	r3, [fp]
 23fb0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb0cc:	b011      	add	sp, #68	; 0x44
 23fb0ce:	ecbd 8b02 	vpop	{d8}
 23fb0d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
 23fb0d6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 23fb0d8:	fb14 f202 	smulbb	r2, r4, r2
 23fb0dc:	9906      	ldr	r1, [sp, #24]
 23fb0de:	440a      	add	r2, r1
 23fb0e0:	9904      	ldr	r1, [sp, #16]
 23fb0e2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fb0e4:	9400      	str	r4, [sp, #0]
 23fb0e6:	69db      	ldr	r3, [r3, #28]
 23fb0e8:	ee18 1a10 	vmov	r1, s16
 23fb0ec:	461f      	mov	r7, r3
 23fb0ee:	4658      	mov	r0, fp
 23fb0f0:	462b      	mov	r3, r5
 23fb0f2:	b212      	sxth	r2, r2
 23fb0f4:	47b8      	blx	r7
 23fb0f6:	e7bb      	b.n	23fb070 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
 23fb0f8:	9a04      	ldr	r2, [sp, #16]
 23fb0fa:	4542      	cmp	r2, r8
 23fb0fc:	d0b8      	beq.n	23fb070 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
 23fb0fe:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fb100:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fb104:	d107      	bne.n	23fb116 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23fb106:	2c01      	cmp	r4, #1
 23fb108:	d105      	bne.n	23fb116 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
 23fb10a:	699b      	ldr	r3, [r3, #24]
 23fb10c:	9906      	ldr	r1, [sp, #24]
 23fb10e:	461f      	mov	r7, r3
 23fb110:	440a      	add	r2, r1
 23fb112:	4643      	mov	r3, r8
 23fb114:	e7a8      	b.n	23fb068 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fb116:	fb14 f202 	smulbb	r2, r4, r2
 23fb11a:	9906      	ldr	r1, [sp, #24]
 23fb11c:	f8cd 8004 	str.w	r8, [sp, #4]
 23fb120:	440a      	add	r2, r1
 23fb122:	e7df      	b.n	23fb0e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 23fb124:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fb126:	00e4      	lsls	r4, r4, #3
 23fb128:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23fb12c:	9a08      	ldr	r2, [sp, #32]
 23fb12e:	f8cd 8004 	str.w	r8, [sp, #4]
 23fb132:	440a      	add	r2, r1
 23fb134:	4611      	mov	r1, r2
 23fb136:	9400      	str	r4, [sp, #0]
 23fb138:	69dc      	ldr	r4, [r3, #28]
 23fb13a:	4632      	mov	r2, r6
 23fb13c:	462b      	mov	r3, r5
 23fb13e:	4658      	mov	r0, fp
 23fb140:	b209      	sxth	r1, r1
 23fb142:	47a0      	blx	r4
        endWrite();
 23fb144:	e7be      	b.n	23fb0c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fb146:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
 23fb148:	6851      	ldr	r1, [r2, #4]
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fb14a:	1aff      	subs	r7, r7, r3
    return gfxFont->bitmap;
 23fb14c:	6812      	ldr	r2, [r2, #0]
    return gfxFont->glyph + c;
 23fb14e:	b2ff      	uxtb	r7, r7
    return gfxFont->bitmap;
 23fb150:	920b      	str	r2, [sp, #44]	; 0x2c
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fb152:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
    return gfxFont->glyph + c;
 23fb156:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fb15a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fb15c:	789a      	ldrb	r2, [r3, #2]
        if(size_x > 1 || size_y > 1) {
 23fb15e:	2d01      	cmp	r5, #1
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fb160:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
 23fb162:	78da      	ldrb	r2, [r3, #3]
                 yo = pgm_read_byte(&glyph->yOffset);
 23fb164:	f993 a006 	ldrsb.w	sl, [r3, #6]
                 h  = pgm_read_byte(&glyph->height);
 23fb168:	920c      	str	r2, [sp, #48]	; 0x30
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 23fb16a:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23fb16e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
 23fb170:	d801      	bhi.n	23fb176 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23fb172:	2c01      	cmp	r4, #1
 23fb174:	d957      	bls.n	23fb226 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
 23fb176:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23fb17a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
 23fb17c:	fa0f f38a 	sxth.w	r3, sl
 23fb180:	9307      	str	r3, [sp, #28]
        uint8_t  xx, yy, bits = 0, bit = 0;
 23fb182:	f04f 0800 	mov.w	r8, #0
 23fb186:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
 23fb188:	4647      	mov	r7, r8
        startWrite();
 23fb18a:	f8db 3000 	ldr.w	r3, [fp]
 23fb18e:	4658      	mov	r0, fp
 23fb190:	695b      	ldr	r3, [r3, #20]
 23fb192:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fb194:	b2b3      	uxth	r3, r6
 23fb196:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fb198:	fa1a f386 	uxtah	r3, sl, r6
 23fb19c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
 23fb19e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fb1a0:	429f      	cmp	r7, r3
 23fb1a2:	d28f      	bcs.n	23fb0c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fb1a4:	9b07      	ldr	r3, [sp, #28]
 23fb1a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23fb1a8:	443b      	add	r3, r7
 23fb1aa:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
 23fb1ae:	2200      	movs	r2, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fb1b0:	b21b      	sxth	r3, r3
 23fb1b2:	ee08 3a10 	vmov	s16, r3
 23fb1b6:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
 23fb1b8:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fb1ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23fb1bc:	eb02 0a07 	add.w	sl, r2, r7
 23fb1c0:	fa0f fa8a 	sxth.w	sl, sl
            for(xx=0; xx<w; xx++) {
 23fb1c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fb1c6:	9905      	ldr	r1, [sp, #20]
 23fb1c8:	4291      	cmp	r1, r2
 23fb1ca:	d241      	bcs.n	23fb250 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
 23fb1cc:	1c5a      	adds	r2, r3, #1
 23fb1ce:	b2d2      	uxtb	r2, r2
 23fb1d0:	075b      	lsls	r3, r3, #29
 23fb1d2:	920d      	str	r2, [sp, #52]	; 0x34
 23fb1d4:	d107      	bne.n	23fb1e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
 23fb1d6:	9b06      	ldr	r3, [sp, #24]
 23fb1d8:	9906      	ldr	r1, [sp, #24]
 23fb1da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fb1dc:	3301      	adds	r3, #1
 23fb1de:	b29b      	uxth	r3, r3
 23fb1e0:	f812 9001 	ldrb.w	r9, [r2, r1]
 23fb1e4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
 23fb1e6:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fb1ea:	d012      	beq.n	23fb212 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
 23fb1ec:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fb1ee:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fb1f2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
 23fb1f6:	d11a      	bne.n	23fb22e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23fb1f8:	2c01      	cmp	r4, #1
 23fb1fa:	d118      	bne.n	23fb22e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fb1fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fb1fe:	699b      	ldr	r3, [r3, #24]
 23fb200:	4411      	add	r1, r2
 23fb202:	9a05      	ldr	r2, [sp, #20]
 23fb204:	461e      	mov	r6, r3
 23fb206:	4411      	add	r1, r2
 23fb208:	4658      	mov	r0, fp
 23fb20a:	4652      	mov	r2, sl
 23fb20c:	9b04      	ldr	r3, [sp, #16]
 23fb20e:	b209      	sxth	r1, r1
 23fb210:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
 23fb212:	9e05      	ldr	r6, [sp, #20]
                bits <<= 1;
 23fb214:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
 23fb218:	3601      	adds	r6, #1
 23fb21a:	b2f3      	uxtb	r3, r6
 23fb21c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
 23fb21e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
 23fb222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
 23fb224:	e7ce      	b.n	23fb1c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
 23fb226:	2300      	movs	r3, #0
 23fb228:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23fb22c:	e7a9      	b.n	23fb182 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fb22e:	9805      	ldr	r0, [sp, #20]
 23fb230:	9a08      	ldr	r2, [sp, #32]
 23fb232:	4402      	add	r2, r0
 23fb234:	fb02 1105 	mla	r1, r2, r5, r1
 23fb238:	9a04      	ldr	r2, [sp, #16]
 23fb23a:	4658      	mov	r0, fp
 23fb23c:	e9cd 4200 	strd	r4, r2, [sp]
 23fb240:	69db      	ldr	r3, [r3, #28]
 23fb242:	ee18 2a10 	vmov	r2, s16
 23fb246:	461e      	mov	r6, r3
 23fb248:	b209      	sxth	r1, r1
 23fb24a:	462b      	mov	r3, r5
 23fb24c:	47b0      	blx	r6
 23fb24e:	e7e0      	b.n	23fb212 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23fb250:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
 23fb252:	3701      	adds	r7, #1
 23fb254:	4498      	add	r8, r3
 23fb256:	fa5f f888 	uxtb.w	r8, r8
 23fb25a:	b2ff      	uxtb	r7, r7
 23fb25c:	e79f      	b.n	23fb19e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23fb25e:	b011      	add	sp, #68	; 0x44
 23fb260:	ecbd 8b02 	vpop	{d8}
 23fb264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb268:	023ff730 	.word	0x023ff730

023fb26c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23fb26c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
 23fb26e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23fb270:	4604      	mov	r4, r0
 23fb272:	460b      	mov	r3, r1
 23fb274:	b085      	sub	sp, #20
    if(!gfxFont) { // 'Classic' built-in font
 23fb276:	2a00      	cmp	r2, #0
 23fb278:	d134      	bne.n	23fb2e4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
 23fb27a:	290a      	cmp	r1, #10
 23fb27c:	d108      	bne.n	23fb290 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
 23fb27e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
 23fb280:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fb282:	7e42      	ldrb	r2, [r0, #25]
 23fb284:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
 23fb288:	8263      	strh	r3, [r4, #18]
}
 23fb28a:	2001      	movs	r0, #1
 23fb28c:	b005      	add	sp, #20
 23fb28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
 23fb290:	290d      	cmp	r1, #13
 23fb292:	d0fa      	beq.n	23fb28a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fb294:	7ee1      	ldrb	r1, [r4, #27]
 23fb296:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fb298:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fb29a:	b171      	cbz	r1, 23fb2ba <_ZN12Adafruit_GFX5writeEh+0x4e>
 23fb29c:	2106      	movs	r1, #6
 23fb29e:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23fb2a2:	fb11 6100 	smlabb	r1, r1, r0, r6
 23fb2a6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23fb2aa:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
 23fb2ac:	bfc1      	itttt	gt
 23fb2ae:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
 23fb2b2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
 23fb2b4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23fb2b8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fb2ba:	8ae2      	ldrh	r2, [r4, #22]
 23fb2bc:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23fb2c0:	9201      	str	r2, [sp, #4]
 23fb2c2:	8aa2      	ldrh	r2, [r4, #20]
 23fb2c4:	4620      	mov	r0, r4
 23fb2c6:	9200      	str	r2, [sp, #0]
 23fb2c8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fb2cc:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fb2d0:	f7ff fe5e 	bl	23faf90 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
 23fb2d4:	7e23      	ldrb	r3, [r4, #24]
 23fb2d6:	8a22      	ldrh	r2, [r4, #16]
 23fb2d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fb2dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fb2e0:	8223      	strh	r3, [r4, #16]
 23fb2e2:	e7d2      	b.n	23fb28a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
 23fb2e4:	290a      	cmp	r1, #10
 23fb2e6:	d107      	bne.n	23fb2f8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
 23fb2e8:	2300      	movs	r3, #0
 23fb2ea:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
 23fb2ec:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fb2ee:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
 23fb2f0:	8a43      	ldrh	r3, [r0, #18]
 23fb2f2:	fb01 3302 	mla	r3, r1, r2, r3
 23fb2f6:	e7c7      	b.n	23fb288 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
 23fb2f8:	290d      	cmp	r1, #13
 23fb2fa:	d0c6      	beq.n	23fb28a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 23fb2fc:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23fb2fe:	42a9      	cmp	r1, r5
 23fb300:	d3c3      	bcc.n	23fb28a <_ZN12Adafruit_GFX5writeEh+0x1e>
 23fb302:	7a51      	ldrb	r1, [r2, #9]
 23fb304:	4299      	cmp	r1, r3
 23fb306:	d3c0      	bcc.n	23fb28a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
 23fb308:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
 23fb30a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
 23fb30c:	b2ed      	uxtb	r5, r5
 23fb30e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
 23fb312:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23fb314:	b328      	cbz	r0, 23fb362 <_ZN12Adafruit_GFX5writeEh+0xf6>
 23fb316:	78e9      	ldrb	r1, [r5, #3]
 23fb318:	b319      	cbz	r1, 23fb362 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fb31a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fb31c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fb31e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fb320:	b191      	cbz	r1, 23fb348 <_ZN12Adafruit_GFX5writeEh+0xdc>
 23fb322:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23fb326:	4408      	add	r0, r1
 23fb328:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fb32c:	fb06 1100 	mla	r1, r6, r0, r1
 23fb330:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23fb334:	4281      	cmp	r1, r0
 23fb336:	dd07      	ble.n	23fb348 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
 23fb338:	2000      	movs	r0, #0
 23fb33a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fb33c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fb340:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
 23fb342:	fb02 1207 	mla	r2, r2, r7, r1
 23fb346:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fb348:	8ae2      	ldrh	r2, [r4, #22]
 23fb34a:	4620      	mov	r0, r4
 23fb34c:	9201      	str	r2, [sp, #4]
 23fb34e:	8aa2      	ldrh	r2, [r4, #20]
 23fb350:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23fb354:	9200      	str	r2, [sp, #0]
 23fb356:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fb35a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fb35e:	f7ff fe17 	bl	23faf90 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fb362:	7929      	ldrb	r1, [r5, #4]
 23fb364:	7e22      	ldrb	r2, [r4, #24]
 23fb366:	8a23      	ldrh	r3, [r4, #16]
 23fb368:	fb01 3302 	mla	r3, r1, r2, r3
 23fb36c:	e7b8      	b.n	23fb2e0 <_ZN12Adafruit_GFX5writeEh+0x74>

023fb36e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
 23fb36e:	2901      	cmp	r1, #1
 23fb370:	bf38      	it	cc
 23fb372:	2101      	movcc	r1, #1
 23fb374:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
 23fb376:	7641      	strb	r1, [r0, #25]
}
 23fb378:	4770      	bx	lr

023fb37a <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
        if(!gfxFont) { // And no current font struct?
 23fb37a:	6a03      	ldr	r3, [r0, #32]
    if(f) {            // Font struct pointer passed in?
 23fb37c:	b129      	cbz	r1, 23fb38a <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x10>
        if(!gfxFont) { // And no current font struct?
 23fb37e:	b913      	cbnz	r3, 23fb386 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
            cursor_y += 6;
 23fb380:	8a43      	ldrh	r3, [r0, #18]
 23fb382:	3306      	adds	r3, #6
        cursor_y -= 6;
 23fb384:	8243      	strh	r3, [r0, #18]
    gfxFont = (GFXfont *)f;
 23fb386:	6201      	str	r1, [r0, #32]
}
 23fb388:	4770      	bx	lr
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 23fb38a:	2b00      	cmp	r3, #0
 23fb38c:	d0fb      	beq.n	23fb386 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
        cursor_y -= 6;
 23fb38e:	8a43      	ldrh	r3, [r0, #18]
 23fb390:	3b06      	subs	r3, #6
 23fb392:	e7f7      	b.n	23fb384 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xa>

023fb394 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>:
  #endif
 #else  // !HAS_PORT_SET_CLR
    *swspi.sckPort   &= swspi.sckPinMaskClr;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(swspi._sck, LOW);
 23fb394:	2100      	movs	r1, #0
 23fb396:	b280      	uxth	r0, r0
 23fb398:	f002 bb5b 	b.w	23fda52 <digitalWrite>

023fb39c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>:
    digitalWrite(swspi._sck, HIGH);
 23fb39c:	2101      	movs	r1, #1
 23fb39e:	b280      	uxth	r0, r0
 23fb3a0:	f002 bb57 	b.w	23fda52 <digitalWrite>

023fb3a4 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>:
    digitalWrite(swspi._mosi, LOW);
 23fb3a4:	2100      	movs	r1, #0
 23fb3a6:	b280      	uxth	r0, r0
 23fb3a8:	f002 bb53 	b.w	23fda52 <digitalWrite>

023fb3ac <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>:
    digitalWrite(swspi._mosi, HIGH);
 23fb3ac:	2101      	movs	r1, #1
 23fb3ae:	b280      	uxth	r0, r0
 23fb3b0:	f002 bb4f 	b.w	23fda52 <digitalWrite>

023fb3b4 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>:
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *dcPort   &= dcPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_dc, LOW);
 23fb3b4:	2100      	movs	r1, #0
 23fb3b6:	b280      	uxth	r0, r0
 23fb3b8:	f002 bb4b 	b.w	23fda52 <digitalWrite>

023fb3bc <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>:
        digitalWrite(_dc, HIGH);
 23fb3bc:	2101      	movs	r1, #1
 23fb3be:	b280      	uxth	r0, r0
 23fb3c0:	f002 bb47 	b.w	23fda52 <digitalWrite>

023fb3c4 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23fb3c4:	b538      	push	{r3, r4, r5, lr}
 23fb3c6:	4604      	mov	r4, r0
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fb3c8:	b212      	sxth	r2, r2
 23fb3ca:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23fb3cc:	461d      	mov	r5, r3
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fb3ce:	f7ff fdc9 	bl	23faf64 <_ZN12Adafruit_GFXC1Ess>
 23fb3d2:	2200      	movs	r2, #0
 23fb3d4:	4b0b      	ldr	r3, [pc, #44]	; (23fb404 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa+0x40>)
}
 23fb3d6:	4620      	mov	r0, r4
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fb3d8:	6023      	str	r3, [r4, #0]
 23fb3da:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 23fb3de:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 23fb3e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 23fb3e6:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 23fb3ea:	6422      	str	r2, [r4, #64]	; 0x40
 23fb3ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 23fb3f0:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 23fb3f4:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 23fb3f8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 23fb3fc:	64a2      	str	r2, [r4, #72]	; 0x48
    hwspi._spi = spiClass;
 23fb3fe:	6265      	str	r5, [r4, #36]	; 0x24
}
 23fb400:	bd38      	pop	{r3, r4, r5, pc}
 23fb402:	bf00      	nop
 23fb404:	023ffc90 	.word	0x023ffc90

023fb408 <_ZN15Adafruit_SPITFTC1Ettaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, int8_t cs,
 23fb408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb40c:	4604      	mov	r4, r0
 23fb40e:	460d      	mov	r5, r1
 23fb410:	4616      	mov	r6, r2
 23fb412:	461f      	mov	r7, r3

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fb414:	f8df 804c 	ldr.w	r8, [pc, #76]	; 23fb464 <_ZN15Adafruit_SPITFTC1Ettaaa+0x5c>
 23fb418:	b086      	sub	sp, #24
 23fb41a:	e8d8 0f8f 	ldab	r0, [r8]
 23fb41e:	f010 0101 	ands.w	r1, r0, #1
 23fb422:	d10b      	bne.n	23fb43c <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23fb424:	4640      	mov	r0, r8
 23fb426:	9105      	str	r1, [sp, #20]
 23fb428:	f7ff f91e 	bl	23fa668 <__cxa_guard_acquire>
 23fb42c:	9905      	ldr	r1, [sp, #20]
 23fb42e:	b128      	cbz	r0, 23fb43c <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23fb430:	480b      	ldr	r0, [pc, #44]	; (23fb460 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23fb432:	f002 f833 	bl	23fd49c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fb436:	4640      	mov	r0, r8
 23fb438:	f7ff f91b 	bl	23fa672 <__cxa_guard_release>
  int8_t dc, int8_t rst) : Adafruit_SPITFT(w, h, &SPI, cs, dc, rst) {
 23fb43c:	f99d 3034 	ldrsb.w	r3, [sp, #52]	; 0x34
 23fb440:	4632      	mov	r2, r6
 23fb442:	9302      	str	r3, [sp, #8]
 23fb444:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
 23fb448:	4629      	mov	r1, r5
 23fb44a:	e9cd 7300 	strd	r7, r3, [sp]
 23fb44e:	4620      	mov	r0, r4
 23fb450:	4b03      	ldr	r3, [pc, #12]	; (23fb460 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23fb452:	f7ff ffb7 	bl	23fb3c4 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>
}
 23fb456:	4620      	mov	r0, r4
 23fb458:	b006      	add	sp, #24
 23fb45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fb45e:	bf00      	nop
 23fb460:	1007ae84 	.word	0x1007ae84
 23fb464:	1007ae80 	.word	0x1007ae80

023fb468 <_ZN15Adafruit_SPITFT7initSPIEmh>:
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23fb468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb46a:	4604      	mov	r4, r0
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23fb46c:	4f48      	ldr	r7, [pc, #288]	; (23fb590 <_ZN15Adafruit_SPITFT7initSPIEmh+0x128>)
    if(_cs >= 0) {
 23fb46e:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23fb472:	2900      	cmp	r1, #0
 23fb474:	bf18      	it	ne
 23fb476:	460f      	movne	r7, r1
    if(_cs >= 0) {
 23fb478:	2800      	cmp	r0, #0
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23fb47a:	4616      	mov	r6, r2
    if(_cs >= 0) {
 23fb47c:	db09      	blt.n	23fb492 <_ZN15Adafruit_SPITFT7initSPIEmh+0x2a>
        pinMode(_cs, OUTPUT);
 23fb47e:	2101      	movs	r1, #1
 23fb480:	b280      	uxth	r0, r0
 23fb482:	f002 fad5 	bl	23fda30 <pinMode>
        digitalWrite(_cs, HIGH); // Deselect
 23fb486:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23fb48a:	2101      	movs	r1, #1
 23fb48c:	b280      	uxth	r0, r0
 23fb48e:	f002 fae0 	bl	23fda52 <digitalWrite>
    pinMode(_dc, OUTPUT);
 23fb492:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23fb496:	2101      	movs	r1, #1
 23fb498:	b280      	uxth	r0, r0
 23fb49a:	f002 fac9 	bl	23fda30 <pinMode>
    digitalWrite(_dc, HIGH); // Data mode
 23fb49e:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23fb4a2:	2101      	movs	r1, #1
 23fb4a4:	b280      	uxth	r0, r0
 23fb4a6:	f002 fad4 	bl	23fda52 <digitalWrite>
    if(connection == TFT_HARD_SPI) {
 23fb4aa:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
 23fb4ae:	bb85      	cbnz	r5, 23fb512 <_ZN15Adafruit_SPITFT7initSPIEmh+0xaa>
    SPI_CLK_SYSTEM = 0,         // represents the system clock speed
    SPI_CLK_ARDUINO = 16*MHZ,
};

namespace particle {
class SPISettings : public Printable {
 23fb4b0:	2301      	movs	r3, #1
            hwspi._spi->begin();
 23fb4b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb4b4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 23fb4b8:	6327      	str	r7, [r4, #48]	; 0x30
 23fb4ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 23fb4be:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        hwspi._mode    = spiMode; // Save spiMode value for later
 23fb4c2:	63a6      	str	r6, [r4, #56]	; 0x38
            hwspi._spi->begin();
 23fb4c4:	f001 fff4 	bl	23fd4b0 <_ZN8SPIClass5beginEv>
    if(_rst >= 0) {
 23fb4c8:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fb4cc:	2800      	cmp	r0, #0
 23fb4ce:	db5e      	blt.n	23fb58e <_ZN15Adafruit_SPITFT7initSPIEmh+0x126>
        pinMode(_rst, OUTPUT);
 23fb4d0:	2101      	movs	r1, #1
 23fb4d2:	b280      	uxth	r0, r0
 23fb4d4:	f002 faac 	bl	23fda30 <pinMode>
        digitalWrite(_rst, HIGH);
 23fb4d8:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fb4dc:	2101      	movs	r1, #1
 23fb4de:	b280      	uxth	r0, r0
 23fb4e0:	f002 fab7 	bl	23fda52 <digitalWrite>
        delay(100);
 23fb4e4:	2064      	movs	r0, #100	; 0x64
 23fb4e6:	f001 faa5 	bl	23fca34 <delay>
        digitalWrite(_rst, LOW);
 23fb4ea:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fb4ee:	2100      	movs	r1, #0
 23fb4f0:	b280      	uxth	r0, r0
 23fb4f2:	f002 faae 	bl	23fda52 <digitalWrite>
        delay(100);
 23fb4f6:	2064      	movs	r0, #100	; 0x64
 23fb4f8:	f001 fa9c 	bl	23fca34 <delay>
        digitalWrite(_rst, HIGH);
 23fb4fc:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fb500:	2101      	movs	r1, #1
 23fb502:	b280      	uxth	r0, r0
 23fb504:	f002 faa5 	bl	23fda52 <digitalWrite>
}
 23fb508:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        delay(200);
 23fb50c:	20c8      	movs	r0, #200	; 0xc8
 23fb50e:	f001 ba91 	b.w	23fca34 <delay>
    } else if(connection == TFT_SOFT_SPI) {
 23fb512:	2d01      	cmp	r5, #1
 23fb514:	d120      	bne.n	23fb558 <_ZN15Adafruit_SPITFT7initSPIEmh+0xf0>
        pinMode(swspi._mosi, OUTPUT);
 23fb516:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fb51a:	4629      	mov	r1, r5
 23fb51c:	b280      	uxth	r0, r0
 23fb51e:	f002 fa87 	bl	23fda30 <pinMode>
        digitalWrite(swspi._mosi, LOW);
 23fb522:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fb526:	2100      	movs	r1, #0
 23fb528:	b280      	uxth	r0, r0
 23fb52a:	f002 fa92 	bl	23fda52 <digitalWrite>
        pinMode(swspi._sck, OUTPUT);
 23fb52e:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb532:	4629      	mov	r1, r5
 23fb534:	b280      	uxth	r0, r0
 23fb536:	f002 fa7b 	bl	23fda30 <pinMode>
        digitalWrite(swspi._sck, LOW);
 23fb53a:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb53e:	2100      	movs	r1, #0
 23fb540:	b280      	uxth	r0, r0
 23fb542:	f002 fa86 	bl	23fda52 <digitalWrite>
        if(swspi._miso >= 0) {
 23fb546:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fb54a:	2800      	cmp	r0, #0
 23fb54c:	dbbc      	blt.n	23fb4c8 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(swspi._miso, INPUT);
 23fb54e:	2100      	movs	r1, #0
 23fb550:	b280      	uxth	r0, r0
 23fb552:	f002 fa6d 	bl	23fda30 <pinMode>
 23fb556:	e7b7      	b.n	23fb4c8 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
        pinMode(tft8._wr, OUTPUT);
 23fb558:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fb55c:	2101      	movs	r1, #1
 23fb55e:	b280      	uxth	r0, r0
 23fb560:	f002 fa66 	bl	23fda30 <pinMode>
        digitalWrite(tft8._wr, HIGH);
 23fb564:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fb568:	2101      	movs	r1, #1
 23fb56a:	b280      	uxth	r0, r0
 23fb56c:	f002 fa71 	bl	23fda52 <digitalWrite>
        if(tft8._rd >= 0) {
 23fb570:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb574:	2800      	cmp	r0, #0
 23fb576:	dba7      	blt.n	23fb4c8 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(tft8._rd, OUTPUT);
 23fb578:	2101      	movs	r1, #1
 23fb57a:	b280      	uxth	r0, r0
 23fb57c:	f002 fa58 	bl	23fda30 <pinMode>
            digitalWrite(tft8._rd, HIGH);
 23fb580:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb584:	2101      	movs	r1, #1
 23fb586:	b280      	uxth	r0, r0
 23fb588:	f002 fa63 	bl	23fda52 <digitalWrite>
 23fb58c:	e79c      	b.n	23fb4c8 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
}
 23fb58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fb590:	00f42400 	.word	0x00f42400

023fb594 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23fb594:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23fb598:	b923      	cbnz	r3, 23fb5a4 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x10>
        hwspi._spi->beginTransaction(hwspi.settings);
 23fb59a:	f100 0128 	add.w	r1, r0, #40	; 0x28
 23fb59e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fb5a0:	f001 bfb4 	b.w	23fd50c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
}
 23fb5a4:	4770      	bx	lr

023fb5a6 <_ZN15Adafruit_SPITFT10startWriteEv>:
void Adafruit_SPITFT::startWrite(void) {
 23fb5a6:	b510      	push	{r4, lr}
 23fb5a8:	4604      	mov	r4, r0
    SPI_BEGIN_TRANSACTION();
 23fb5aa:	f7ff fff3 	bl	23fb594 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    if(_cs >= 0) SPI_CS_LOW();
 23fb5ae:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23fb5b2:	2800      	cmp	r0, #0
 23fb5b4:	db05      	blt.n	23fb5c2 <_ZN15Adafruit_SPITFT10startWriteEv+0x1c>
}
 23fb5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_cs, LOW);
 23fb5ba:	2100      	movs	r1, #0
 23fb5bc:	b280      	uxth	r0, r0
 23fb5be:	f002 ba48 	b.w	23fda52 <digitalWrite>
 23fb5c2:	bd10      	pop	{r4, pc}

023fb5c4 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23fb5c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23fb5c8:	b913      	cbnz	r3, 23fb5d0 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv+0xc>
        hwspi._spi->endTransaction();
 23fb5ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fb5cc:	f001 bf84 	b.w	23fd4d8 <_ZN8SPIClass14endTransactionEv>
}
 23fb5d0:	4770      	bx	lr

023fb5d2 <_ZN15Adafruit_SPITFT8endWriteEv>:
void Adafruit_SPITFT::endWrite(void) {
 23fb5d2:	b510      	push	{r4, lr}
 23fb5d4:	4604      	mov	r4, r0
    if(_cs >= 0) SPI_CS_HIGH();
 23fb5d6:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
 23fb5da:	2800      	cmp	r0, #0
 23fb5dc:	db03      	blt.n	23fb5e6 <_ZN15Adafruit_SPITFT8endWriteEv+0x14>
        digitalWrite(_cs, HIGH);
 23fb5de:	2101      	movs	r1, #1
 23fb5e0:	b280      	uxth	r0, r0
 23fb5e2:	f002 fa36 	bl	23fda52 <digitalWrite>
    SPI_END_TRANSACTION();
 23fb5e6:	4620      	mov	r0, r4
 23fb5e8:	f7ff ffec 	bl	23fb5c4 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>
}
 23fb5ec:	bd10      	pop	{r4, pc}

023fb5ee <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>:

/*!
    @brief  Set the WR line LOW, then HIGH. Used for parallel-connected
            interfaces when writing data.
*/
inline void Adafruit_SPITFT::TFT_WR_STROBE(void) {
 23fb5ee:	b510      	push	{r4, lr}
 23fb5f0:	4604      	mov	r4, r0
 #else  // !HAS_PORT_SET_CLR
    *tft8.wrPort   &= tft8.wrPinMaskClr;
    *tft8.wrPort   |= tft8.wrPinMaskSet;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(tft8._wr, LOW);
 23fb5f2:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 23fb5f6:	2100      	movs	r1, #0
 23fb5f8:	b280      	uxth	r0, r0
 23fb5fa:	f002 fa2a 	bl	23fda52 <digitalWrite>
    digitalWrite(tft8._wr, HIGH);
 23fb5fe:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fb602:	2101      	movs	r1, #1
#endif // end !USE_FAST_PINIO
}
 23fb604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(tft8._wr, HIGH);
 23fb608:	b280      	uxth	r0, r0
 23fb60a:	f002 ba22 	b.w	23fda52 <digitalWrite>

023fb60e <_ZN15Adafruit_SPITFT10writeColorEtm>:
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {
 23fb60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb612:	4605      	mov	r5, r0
 23fb614:	460e      	mov	r6, r1
    if(!len) return; // Avoid 0-byte transfers
 23fb616:	4614      	mov	r4, r2
 23fb618:	b17a      	cbz	r2, 23fb63a <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
    if(connection == TFT_HARD_SPI) {
 23fb61a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    uint8_t hi = color >> 8, lo = color;
 23fb61e:	ea4f 2811 	mov.w	r8, r1, lsr #8
 23fb622:	b2cf      	uxtb	r7, r1
    if(connection == TFT_HARD_SPI) {
 23fb624:	b95b      	cbnz	r3, 23fb63e <_ZN15Adafruit_SPITFT10writeColorEtm+0x30>
            hwspi._spi->transfer(hi);
 23fb626:	4641      	mov	r1, r8
 23fb628:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fb62a:	f001 ffdd 	bl	23fd5e8 <_ZN8SPIClass8transferEh>
            hwspi._spi->transfer(lo);
 23fb62e:	4639      	mov	r1, r7
 23fb630:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fb632:	f001 ffd9 	bl	23fd5e8 <_ZN8SPIClass8transferEh>
        while(len--) {
 23fb636:	3c01      	subs	r4, #1
 23fb638:	d1f5      	bne.n	23fb626 <_ZN15Adafruit_SPITFT10writeColorEtm+0x18>
}
 23fb63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(connection == TFT_SOFT_SPI) {
 23fb63e:	2b01      	cmp	r3, #1
 23fb640:	d11e      	bne.n	23fb680 <_ZN15Adafruit_SPITFT10writeColorEtm+0x72>
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fb642:	46b0      	mov	r8, r6
 23fb644:	2710      	movs	r7, #16
                if(x & 0x8000) SPI_MOSI_HIGH();
 23fb646:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 23fb64a:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23fb64e:	d014      	beq.n	23fb67a <_ZN15Adafruit_SPITFT10writeColorEtm+0x6c>
 23fb650:	f7ff feac 	bl	23fb3ac <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
                SPI_SCK_HIGH();
 23fb654:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fb658:	3f01      	subs	r7, #1
                SPI_SCK_HIGH();
 23fb65a:	f7ff fe9f 	bl	23fb39c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
                x <<= 1;
 23fb65e:	ea4f 0848 	mov.w	r8, r8, lsl #1
                SPI_SCK_LOW();
 23fb662:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fb666:	b2bf      	uxth	r7, r7
                SPI_SCK_LOW();
 23fb668:	f7ff fe94 	bl	23fb394 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
                x <<= 1;
 23fb66c:	fa1f f888 	uxth.w	r8, r8
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fb670:	2f00      	cmp	r7, #0
 23fb672:	d1e8      	bne.n	23fb646 <_ZN15Adafruit_SPITFT10writeColorEtm+0x38>
        while(len--) {
 23fb674:	3c01      	subs	r4, #1
 23fb676:	d1e4      	bne.n	23fb642 <_ZN15Adafruit_SPITFT10writeColorEtm+0x34>
 23fb678:	e7df      	b.n	23fb63a <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                else           SPI_MOSI_LOW();
 23fb67a:	f7ff fe93 	bl	23fb3a4 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fb67e:	e7e9      	b.n	23fb654 <_ZN15Adafruit_SPITFT10writeColorEtm+0x46>
        if(hi == lo) {
 23fb680:	45b8      	cmp	r8, r7
 23fb682:	d0da      	beq.n	23fb63a <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                TFT_WR_STROBE();
 23fb684:	4628      	mov	r0, r5
 23fb686:	f7ff ffb2 	bl	23fb5ee <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
            while(len--) {
 23fb68a:	3c01      	subs	r4, #1
 23fb68c:	d1fa      	bne.n	23fb684 <_ZN15Adafruit_SPITFT10writeColorEtm+0x76>
 23fb68e:	e7d4      	b.n	23fb63a <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>

023fb690 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fb690:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fb694:	461d      	mov	r5, r3
 23fb696:	4604      	mov	r4, r0
    setAddrWindow(x, y, w, h);
 23fb698:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  int16_t w, int16_t h, uint16_t color) {
 23fb69c:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    setAddrWindow(x, y, w, h);
 23fb6a0:	9300      	str	r3, [sp, #0]
 23fb6a2:	6803      	ldr	r3, [r0, #0]
 23fb6a4:	b292      	uxth	r2, r2
 23fb6a6:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
 23fb6aa:	b289      	uxth	r1, r1
 23fb6ac:	b2ab      	uxth	r3, r5
  int16_t w, int16_t h, uint16_t color) {
 23fb6ae:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    setAddrWindow(x, y, w, h);
 23fb6b2:	47c0      	blx	r8
    writeColor(color, (uint32_t)w * h);
 23fb6b4:	4631      	mov	r1, r6
 23fb6b6:	4620      	mov	r0, r4
 23fb6b8:	fb05 f207 	mul.w	r2, r5, r7
}
 23fb6bc:	b002      	add	sp, #8
 23fb6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    writeColor(color, (uint32_t)w * h);
 23fb6c2:	f7ff bfa4 	b.w	23fb60e <_ZN15Adafruit_SPITFT10writeColorEtm>

023fb6c6 <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fb6c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fb6ca:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
    if(w && h) {                            // Nonzero width and height?
 23fb6ce:	2b00      	cmp	r3, #0
 23fb6d0:	d046      	beq.n	23fb760 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
 23fb6d2:	2c00      	cmp	r4, #0
 23fb6d4:	d044      	beq.n	23fb760 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
        if(w < 0) {                         // If negative width...
 23fb6d6:	2b00      	cmp	r3, #0
 23fb6d8:	da05      	bge.n	23fb6e6 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x20>
            x +=  w + 1;                    //   Move X to left edge
 23fb6da:	3101      	adds	r1, #1
 23fb6dc:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                        //   Use positive width
 23fb6e0:	425b      	negs	r3, r3
            x +=  w + 1;                    //   Move X to left edge
 23fb6e2:	b209      	sxth	r1, r1
            w  = -w;                        //   Use positive width
 23fb6e4:	b21b      	sxth	r3, r3
        if(x < _width) {                    // Not off right
 23fb6e6:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 23fb6ea:	428e      	cmp	r6, r1
 23fb6ec:	dd38      	ble.n	23fb760 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
            if(h < 0) {                     // If negative height...
 23fb6ee:	2c00      	cmp	r4, #0
 23fb6f0:	da05      	bge.n	23fb6fe <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x38>
                y +=  h + 1;                //   Move Y to top edge
 23fb6f2:	3201      	adds	r2, #1
 23fb6f4:	fa12 f284 	uxtah	r2, r2, r4
                h  = -h;                    //   Use positive height
 23fb6f8:	4264      	negs	r4, r4
                y +=  h + 1;                //   Move Y to top edge
 23fb6fa:	b212      	sxth	r2, r2
                h  = -h;                    //   Use positive height
 23fb6fc:	b224      	sxth	r4, r4
            if(y < _height) {               // Not off bottom
 23fb6fe:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
 23fb702:	4295      	cmp	r5, r2
 23fb704:	dd2c      	ble.n	23fb760 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                int16_t x2 = x + w - 1;
 23fb706:	eb01 0803 	add.w	r8, r1, r3
 23fb70a:	fa1f f888 	uxth.w	r8, r8
 23fb70e:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 23fb712:	fa0f fc8c 	sxth.w	ip, ip
                if(x2 >= 0) {               // Not off left
 23fb716:	f1bc 0f00 	cmp.w	ip, #0
 23fb71a:	db21      	blt.n	23fb760 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                    int16_t y2 = y + h - 1;
 23fb71c:	eb02 0e04 	add.w	lr, r2, r4
 23fb720:	fa1f fe8e 	uxth.w	lr, lr
 23fb724:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
 23fb728:	b23f      	sxth	r7, r7
                    if(y2 >= 0) {           // Not off top
 23fb72a:	2f00      	cmp	r7, #0
 23fb72c:	db18      	blt.n	23fb760 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fb72e:	2900      	cmp	r1, #0
 23fb730:	bfbc      	itt	lt
 23fb732:	2100      	movlt	r1, #0
 23fb734:	fa0f f388 	sxthlt.w	r3, r8
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fb738:	2a00      	cmp	r2, #0
 23fb73a:	bfbc      	itt	lt
 23fb73c:	2200      	movlt	r2, #0
 23fb73e:	fa0f f48e 	sxthlt.w	r4, lr
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fb742:	4566      	cmp	r6, ip
 23fb744:	bfdc      	itt	le
 23fb746:	1a73      	suble	r3, r6, r1
 23fb748:	b21b      	sxthle	r3, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb74a:	42bd      	cmp	r5, r7
 23fb74c:	bfd8      	it	le
 23fb74e:	1aac      	suble	r4, r5, r2
                        writeFillRectPreclipped(x, y, w, h, color);
 23fb750:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb754:	bfd8      	it	le
 23fb756:	b224      	sxthle	r4, r4
                        writeFillRectPreclipped(x, y, w, h, color);
 23fb758:	e9cd 4500 	strd	r4, r5, [sp]
 23fb75c:	f7ff ff98 	bl	23fb690 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fb760:	b002      	add	sp, #8
 23fb762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb766 <_ZN15Adafruit_SPITFT8fillRectEsssst>:
  uint16_t color) {
 23fb766:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fb76a:	4680      	mov	r8, r0
 23fb76c:	460c      	mov	r4, r1
 23fb76e:	4615      	mov	r5, r2
    if(w && h) {                            // Nonzero width and height?
 23fb770:	461e      	mov	r6, r3
  uint16_t color) {
 23fb772:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fb776:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if(w && h) {                            // Nonzero width and height?
 23fb77a:	2b00      	cmp	r3, #0
 23fb77c:	d052      	beq.n	23fb824 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
 23fb77e:	2f00      	cmp	r7, #0
 23fb780:	d050      	beq.n	23fb824 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
        if(w < 0) {                         // If negative width...
 23fb782:	2b00      	cmp	r3, #0
 23fb784:	da05      	bge.n	23fb792 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x2c>
            x +=  w + 1;                    //   Move X to left edge
 23fb786:	3401      	adds	r4, #1
 23fb788:	fa14 f483 	uxtah	r4, r4, r3
            w  = -w;                        //   Use positive width
 23fb78c:	425e      	negs	r6, r3
            x +=  w + 1;                    //   Move X to left edge
 23fb78e:	b224      	sxth	r4, r4
            w  = -w;                        //   Use positive width
 23fb790:	b236      	sxth	r6, r6
        if(x < _width) {                    // Not off right
 23fb792:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 23fb796:	42a3      	cmp	r3, r4
 23fb798:	dd44      	ble.n	23fb824 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
            if(h < 0) {                     // If negative height...
 23fb79a:	2f00      	cmp	r7, #0
 23fb79c:	da05      	bge.n	23fb7aa <_ZN15Adafruit_SPITFT8fillRectEsssst+0x44>
                y +=  h + 1;                //   Move Y to top edge
 23fb79e:	3501      	adds	r5, #1
 23fb7a0:	fa15 f587 	uxtah	r5, r5, r7
                h  = -h;                    //   Use positive height
 23fb7a4:	427f      	negs	r7, r7
                y +=  h + 1;                //   Move Y to top edge
 23fb7a6:	b22d      	sxth	r5, r5
                h  = -h;                    //   Use positive height
 23fb7a8:	b23f      	sxth	r7, r7
            if(y < _height) {               // Not off bottom
 23fb7aa:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 23fb7ae:	42aa      	cmp	r2, r5
 23fb7b0:	dd38      	ble.n	23fb824 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                int16_t x2 = x + w - 1;
 23fb7b2:	eb04 0e06 	add.w	lr, r4, r6
 23fb7b6:	fa1f fe8e 	uxth.w	lr, lr
 23fb7ba:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 23fb7be:	b200      	sxth	r0, r0
                if(x2 >= 0) {               // Not off left
 23fb7c0:	2800      	cmp	r0, #0
 23fb7c2:	db2f      	blt.n	23fb824 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                    int16_t y2 = y + h - 1;
 23fb7c4:	eb05 0c07 	add.w	ip, r5, r7
 23fb7c8:	fa1f fc8c 	uxth.w	ip, ip
 23fb7cc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 23fb7d0:	b209      	sxth	r1, r1
                    if(y2 >= 0) {           // Not off top
 23fb7d2:	2900      	cmp	r1, #0
 23fb7d4:	db26      	blt.n	23fb824 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fb7d6:	2c00      	cmp	r4, #0
 23fb7d8:	bfbc      	itt	lt
 23fb7da:	2400      	movlt	r4, #0
 23fb7dc:	fa0f f68e 	sxthlt.w	r6, lr
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fb7e0:	2d00      	cmp	r5, #0
 23fb7e2:	bfbc      	itt	lt
 23fb7e4:	2500      	movlt	r5, #0
 23fb7e6:	fa0f f78c 	sxthlt.w	r7, ip
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fb7ea:	4283      	cmp	r3, r0
 23fb7ec:	bfdc      	itt	le
 23fb7ee:	1b1b      	suble	r3, r3, r4
 23fb7f0:	b21e      	sxthle	r6, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb7f2:	428a      	cmp	r2, r1
                        startWrite();
 23fb7f4:	f8d8 3000 	ldr.w	r3, [r8]
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb7f8:	bfdc      	itt	le
 23fb7fa:	1b52      	suble	r2, r2, r5
 23fb7fc:	b217      	sxthle	r7, r2
                        startWrite();
 23fb7fe:	4640      	mov	r0, r8
 23fb800:	695b      	ldr	r3, [r3, #20]
 23fb802:	4798      	blx	r3
                        writeFillRectPreclipped(x, y, w, h, color);
 23fb804:	4633      	mov	r3, r6
 23fb806:	4640      	mov	r0, r8
 23fb808:	462a      	mov	r2, r5
 23fb80a:	4621      	mov	r1, r4
 23fb80c:	e9cd 7900 	strd	r7, r9, [sp]
 23fb810:	f7ff ff3e 	bl	23fb690 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                        endWrite();
 23fb814:	4640      	mov	r0, r8
 23fb816:	f8d8 3000 	ldr.w	r3, [r8]
 23fb81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb81c:	b003      	add	sp, #12
 23fb81e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                        endWrite();
 23fb822:	4718      	bx	r3
}
 23fb824:	b003      	add	sp, #12
 23fb826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fb82a <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
  uint16_t color) {
 23fb82a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fb82e:	1e17      	subs	r7, r2, #0
  uint16_t color) {
 23fb830:	4606      	mov	r6, r0
 23fb832:	460c      	mov	r4, r1
 23fb834:	461d      	mov	r5, r3
 23fb836:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fb83a:	db33      	blt.n	23fb8a4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23fb83c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fb840:	42bb      	cmp	r3, r7
 23fb842:	dd2f      	ble.n	23fb8a4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23fb844:	2d00      	cmp	r5, #0
 23fb846:	d02d      	beq.n	23fb8a4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
        if(w < 0) {                      // If negative width...
 23fb848:	da05      	bge.n	23fb856 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
            x +=  w + 1;                 //   Move X to left edge
 23fb84a:	3401      	adds	r4, #1
 23fb84c:	fa14 f485 	uxtah	r4, r4, r5
            w  = -w;                     //   Use positive width
 23fb850:	426d      	negs	r5, r5
            x +=  w + 1;                 //   Move X to left edge
 23fb852:	b224      	sxth	r4, r4
            w  = -w;                     //   Use positive width
 23fb854:	b22d      	sxth	r5, r5
        if(x < _width) {                 // Not off right
 23fb856:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 23fb85a:	42a3      	cmp	r3, r4
 23fb85c:	dd22      	ble.n	23fb8a4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
            int16_t x2 = x + w - 1;
 23fb85e:	1961      	adds	r1, r4, r5
 23fb860:	b289      	uxth	r1, r1
 23fb862:	1e4a      	subs	r2, r1, #1
 23fb864:	b212      	sxth	r2, r2
            if(x2 >= 0) {                // Not off left
 23fb866:	2a00      	cmp	r2, #0
 23fb868:	db1c      	blt.n	23fb8a4 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fb86a:	2c00      	cmp	r4, #0
 23fb86c:	bfbc      	itt	lt
 23fb86e:	2400      	movlt	r4, #0
 23fb870:	b20d      	sxthlt	r5, r1
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fb872:	4293      	cmp	r3, r2
 23fb874:	bfdc      	itt	le
 23fb876:	1b1b      	suble	r3, r3, r4
 23fb878:	b21d      	sxthle	r5, r3
                startWrite();
 23fb87a:	6833      	ldr	r3, [r6, #0]
 23fb87c:	4630      	mov	r0, r6
 23fb87e:	695b      	ldr	r3, [r3, #20]
 23fb880:	4798      	blx	r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23fb882:	2301      	movs	r3, #1
 23fb884:	4630      	mov	r0, r6
 23fb886:	9300      	str	r3, [sp, #0]
 23fb888:	463a      	mov	r2, r7
 23fb88a:	462b      	mov	r3, r5
 23fb88c:	4621      	mov	r1, r4
 23fb88e:	f8cd 8004 	str.w	r8, [sp, #4]
 23fb892:	f7ff fefd 	bl	23fb690 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23fb896:	4630      	mov	r0, r6
 23fb898:	6833      	ldr	r3, [r6, #0]
 23fb89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb89c:	b002      	add	sp, #8
 23fb89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23fb8a2:	4718      	bx	r3
}
 23fb8a4:	b002      	add	sp, #8
 23fb8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb8aa <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
  uint16_t color) {
 23fb8aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fb8ae:	1e0f      	subs	r7, r1, #0
  uint16_t color) {
 23fb8b0:	4606      	mov	r6, r0
 23fb8b2:	4614      	mov	r4, r2
 23fb8b4:	461d      	mov	r5, r3
 23fb8b6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fb8ba:	db31      	blt.n	23fb920 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23fb8bc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fb8c0:	42bb      	cmp	r3, r7
 23fb8c2:	dd2d      	ble.n	23fb920 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23fb8c4:	2d00      	cmp	r5, #0
 23fb8c6:	d02b      	beq.n	23fb920 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
        if(h < 0) {                     // If negative height...
 23fb8c8:	da05      	bge.n	23fb8d6 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
            y +=  h + 1;                //   Move Y to top edge
 23fb8ca:	3401      	adds	r4, #1
 23fb8cc:	fa14 f485 	uxtah	r4, r4, r5
            h  = -h;                    //   Use positive height
 23fb8d0:	426d      	negs	r5, r5
            y +=  h + 1;                //   Move Y to top edge
 23fb8d2:	b224      	sxth	r4, r4
            h  = -h;                    //   Use positive height
 23fb8d4:	b22d      	sxth	r5, r5
        if(y < _height) {               // Not off bottom
 23fb8d6:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 23fb8da:	42a3      	cmp	r3, r4
 23fb8dc:	dd20      	ble.n	23fb920 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
            int16_t y2 = y + h - 1;
 23fb8de:	1961      	adds	r1, r4, r5
 23fb8e0:	b289      	uxth	r1, r1
 23fb8e2:	1e4a      	subs	r2, r1, #1
 23fb8e4:	b212      	sxth	r2, r2
            if(y2 >= 0) {               // Not off top
 23fb8e6:	2a00      	cmp	r2, #0
 23fb8e8:	db1a      	blt.n	23fb920 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fb8ea:	2c00      	cmp	r4, #0
 23fb8ec:	bfbc      	itt	lt
 23fb8ee:	2400      	movlt	r4, #0
 23fb8f0:	b20d      	sxthlt	r5, r1
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb8f2:	4293      	cmp	r3, r2
 23fb8f4:	bfdc      	itt	le
 23fb8f6:	1b1b      	suble	r3, r3, r4
 23fb8f8:	b21d      	sxthle	r5, r3
                startWrite();
 23fb8fa:	6833      	ldr	r3, [r6, #0]
 23fb8fc:	4630      	mov	r0, r6
 23fb8fe:	695b      	ldr	r3, [r3, #20]
 23fb900:	4798      	blx	r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fb902:	4630      	mov	r0, r6
 23fb904:	2301      	movs	r3, #1
 23fb906:	4622      	mov	r2, r4
 23fb908:	4639      	mov	r1, r7
 23fb90a:	e9cd 5800 	strd	r5, r8, [sp]
 23fb90e:	f7ff febf 	bl	23fb690 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23fb912:	4630      	mov	r0, r6
 23fb914:	6833      	ldr	r3, [r6, #0]
 23fb916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb918:	b002      	add	sp, #8
 23fb91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23fb91e:	4718      	bx	r3
}
 23fb920:	b002      	add	sp, #8
 23fb922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb926 <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fb926:	2a00      	cmp	r2, #0
  uint16_t color) {
 23fb928:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fb92a:	db26      	blt.n	23fb97a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23fb92c:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fb930:	4294      	cmp	r4, r2
 23fb932:	dd22      	ble.n	23fb97a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23fb934:	2b00      	cmp	r3, #0
 23fb936:	d020      	beq.n	23fb97a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
        if(w < 0) {                      // If negative width...
 23fb938:	da05      	bge.n	23fb946 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x20>
            x +=  w + 1;                 //   Move X to left edge
 23fb93a:	3101      	adds	r1, #1
 23fb93c:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                     //   Use positive width
 23fb940:	425b      	negs	r3, r3
            x +=  w + 1;                 //   Move X to left edge
 23fb942:	b209      	sxth	r1, r1
            w  = -w;                     //   Use positive width
 23fb944:	b21b      	sxth	r3, r3
        if(x < _width) {                 // Not off right
 23fb946:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fb94a:	428c      	cmp	r4, r1
 23fb94c:	dd15      	ble.n	23fb97a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
            int16_t x2 = x + w - 1;
 23fb94e:	18ce      	adds	r6, r1, r3
 23fb950:	b2b6      	uxth	r6, r6
 23fb952:	1e75      	subs	r5, r6, #1
 23fb954:	b22d      	sxth	r5, r5
            if(x2 >= 0) {                // Not off left
 23fb956:	2d00      	cmp	r5, #0
 23fb958:	db0f      	blt.n	23fb97a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fb95a:	2900      	cmp	r1, #0
 23fb95c:	bfbc      	itt	lt
 23fb95e:	2100      	movlt	r1, #0
 23fb960:	b233      	sxthlt	r3, r6
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fb962:	42ac      	cmp	r4, r5
 23fb964:	bfd8      	it	le
 23fb966:	1a63      	suble	r3, r4, r1
                writeFillRectPreclipped(x, y, w, 1, color);
 23fb968:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fb96c:	bfd8      	it	le
 23fb96e:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23fb970:	9401      	str	r4, [sp, #4]
 23fb972:	2401      	movs	r4, #1
 23fb974:	9400      	str	r4, [sp, #0]
 23fb976:	f7ff fe8b 	bl	23fb690 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fb97a:	b002      	add	sp, #8
 23fb97c:	bd70      	pop	{r4, r5, r6, pc}

023fb97e <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
  uint16_t color) {
 23fb97e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fb980:	2900      	cmp	r1, #0
 23fb982:	db26      	blt.n	23fb9d2 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fb984:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fb988:	428c      	cmp	r4, r1
 23fb98a:	dd22      	ble.n	23fb9d2 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fb98c:	2b00      	cmp	r3, #0
 23fb98e:	d020      	beq.n	23fb9d2 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
        if(h < 0) {                     // If negative height...
 23fb990:	da05      	bge.n	23fb99e <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x20>
            y +=  h + 1;                //   Move Y to top edge
 23fb992:	3201      	adds	r2, #1
 23fb994:	fa12 f283 	uxtah	r2, r2, r3
            h  = -h;                    //   Use positive height
 23fb998:	425b      	negs	r3, r3
            y +=  h + 1;                //   Move Y to top edge
 23fb99a:	b212      	sxth	r2, r2
            h  = -h;                    //   Use positive height
 23fb99c:	b21b      	sxth	r3, r3
        if(y < _height) {               // Not off bottom
 23fb99e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fb9a2:	4294      	cmp	r4, r2
 23fb9a4:	dd15      	ble.n	23fb9d2 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
            int16_t y2 = y + h - 1;
 23fb9a6:	18d6      	adds	r6, r2, r3
 23fb9a8:	b2b6      	uxth	r6, r6
 23fb9aa:	1e75      	subs	r5, r6, #1
 23fb9ac:	b22d      	sxth	r5, r5
            if(y2 >= 0) {               // Not off top
 23fb9ae:	2d00      	cmp	r5, #0
 23fb9b0:	db0f      	blt.n	23fb9d2 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fb9b2:	2a00      	cmp	r2, #0
 23fb9b4:	bfbc      	itt	lt
 23fb9b6:	2200      	movlt	r2, #0
 23fb9b8:	b233      	sxthlt	r3, r6
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb9ba:	42ac      	cmp	r4, r5
 23fb9bc:	bfd8      	it	le
 23fb9be:	1aa3      	suble	r3, r4, r2
                writeFillRectPreclipped(x, y, 1, h, color);
 23fb9c0:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fb9c4:	bfd8      	it	le
 23fb9c6:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fb9c8:	e9cd 3400 	strd	r3, r4, [sp]
 23fb9cc:	2301      	movs	r3, #1
 23fb9ce:	f7ff fe5f 	bl	23fb690 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fb9d2:	b002      	add	sp, #8
 23fb9d4:	bd70      	pop	{r4, r5, r6, pc}

023fb9d6 <_ZN15Adafruit_SPITFT8spiWriteEh>:
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fb9d6:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fb9d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fb9dc:	4604      	mov	r4, r0
 23fb9de:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23fb9e0:	b923      	cbnz	r3, 23fb9ec <_ZN15Adafruit_SPITFT8spiWriteEh+0x16>
}
 23fb9e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(b);
 23fb9e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fb9e8:	f001 bdfe 	b.w	23fd5e8 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fb9ec:	2b01      	cmp	r3, #1
 23fb9ee:	d118      	bne.n	23fba22 <_ZN15Adafruit_SPITFT8spiWriteEh+0x4c>
 23fb9f0:	2608      	movs	r6, #8
            if(b & 0x80) SPI_MOSI_HIGH();
 23fb9f2:	062b      	lsls	r3, r5, #24
 23fb9f4:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fb9f8:	d510      	bpl.n	23fba1c <_ZN15Adafruit_SPITFT8spiWriteEh+0x46>
 23fb9fa:	f7ff fcd7 	bl	23fb3ac <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fb9fe:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fba02:	f7ff fccb 	bl	23fb39c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<8; bit++) {
 23fba06:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fba08:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fba0c:	f7ff fcc2 	bl	23fb394 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            b <<= 1;
 23fba10:	006d      	lsls	r5, r5, #1
        for(uint8_t bit=0; bit<8; bit++) {
 23fba12:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            b <<= 1;
 23fba16:	b2ed      	uxtb	r5, r5
        for(uint8_t bit=0; bit<8; bit++) {
 23fba18:	d1eb      	bne.n	23fb9f2 <_ZN15Adafruit_SPITFT8spiWriteEh+0x1c>
}
 23fba1a:	bd70      	pop	{r4, r5, r6, pc}
            else         SPI_MOSI_LOW();
 23fba1c:	f7ff fcc2 	bl	23fb3a4 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fba20:	e7ed      	b.n	23fb9fe <_ZN15Adafruit_SPITFT8spiWriteEh+0x28>
        TFT_WR_STROBE();
 23fba22:	f7ff fde4 	bl	23fb5ee <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fba26:	e7f8      	b.n	23fba1a <_ZN15Adafruit_SPITFT8spiWriteEh+0x44>

023fba28 <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23fba28:	b513      	push	{r0, r1, r4, lr}
 23fba2a:	4604      	mov	r4, r0
    SPI_DC_LOW();
 23fba2c:	f990 003f 	ldrsb.w	r0, [r0, #63]	; 0x3f
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23fba30:	9101      	str	r1, [sp, #4]
    SPI_DC_LOW();
 23fba32:	f7ff fcbf 	bl	23fb3b4 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>
    spiWrite(cmd);
 23fba36:	4620      	mov	r0, r4
 23fba38:	9901      	ldr	r1, [sp, #4]
 23fba3a:	f7ff ffcc 	bl	23fb9d6 <_ZN15Adafruit_SPITFT8spiWriteEh>
    SPI_DC_HIGH();
 23fba3e:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
}
 23fba42:	b002      	add	sp, #8
 23fba44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SPI_DC_HIGH();
 23fba48:	f7ff bcb8 	b.w	23fb3bc <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>

023fba4c <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
 23fba4c:	b570      	push	{r4, r5, r6, lr}
 23fba4e:	460d      	mov	r5, r1
    startWrite();
 23fba50:	6803      	ldr	r3, [r0, #0]
void Adafruit_SPITFT::invertDisplay(bool i) {
 23fba52:	4604      	mov	r4, r0
    startWrite();
 23fba54:	695b      	ldr	r3, [r3, #20]
 23fba56:	4798      	blx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23fba58:	b155      	cbz	r5, 23fba70 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x24>
 23fba5a:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 23fba5e:	4620      	mov	r0, r4
 23fba60:	f7ff ffe2 	bl	23fba28 <_ZN15Adafruit_SPITFT12writeCommandEh>
    endWrite();
 23fba64:	6823      	ldr	r3, [r4, #0]
 23fba66:	4620      	mov	r0, r4
}
 23fba68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    endWrite();
 23fba6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fba6e:	4718      	bx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23fba70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 23fba74:	e7f3      	b.n	23fba5e <_ZN15Adafruit_SPITFT13invertDisplayEb+0x12>

023fba76 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>:
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23fba76:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fba78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23fba7c:	4605      	mov	r5, r0
 23fba7e:	460c      	mov	r4, r1
    if(connection == TFT_HARD_SPI) {
 23fba80:	b94b      	cbnz	r3, 23fba96 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x20>
        hwspi._spi->transfer(w >> 8);
 23fba82:	0a09      	lsrs	r1, r1, #8
 23fba84:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fba86:	f001 fdaf 	bl	23fd5e8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(w);
 23fba8a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fba8c:	b2e1      	uxtb	r1, r4
}
 23fba8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(w);
 23fba92:	f001 bda9 	b.w	23fd5e8 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fba96:	2b01      	cmp	r3, #1
 23fba98:	d118      	bne.n	23fbacc <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x56>
 23fba9a:	2610      	movs	r6, #16
            if(w & 0x8000) SPI_MOSI_HIGH();
 23fba9c:	0423      	lsls	r3, r4, #16
 23fba9e:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23fbaa2:	d510      	bpl.n	23fbac6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x50>
 23fbaa4:	f7ff fc82 	bl	23fb3ac <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fbaa8:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23fbaac:	f7ff fc76 	bl	23fb39c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<16; bit++) {
 23fbab0:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fbab2:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23fbab6:	f7ff fc6d 	bl	23fb394 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            w <<= 1;
 23fbaba:	0064      	lsls	r4, r4, #1
        for(uint8_t bit=0; bit<16; bit++) {
 23fbabc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            w <<= 1;
 23fbac0:	b2a4      	uxth	r4, r4
        for(uint8_t bit=0; bit<16; bit++) {
 23fbac2:	d1eb      	bne.n	23fba9c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x26>
}
 23fbac4:	bd70      	pop	{r4, r5, r6, pc}
            else           SPI_MOSI_LOW();
 23fbac6:	f7ff fc6d 	bl	23fb3a4 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fbaca:	e7ed      	b.n	23fbaa8 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x32>
        TFT_WR_STROBE();
 23fbacc:	f7ff fd8f 	bl	23fb5ee <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fbad0:	e7f8      	b.n	23fbac4 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x4e>

023fbad2 <_ZN15Adafruit_SPITFT10writePixelEsst>:
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fbad2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fbad4:	2900      	cmp	r1, #0
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fbad6:	4604      	mov	r4, r0
 23fbad8:	461e      	mov	r6, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fbada:	db17      	blt.n	23fbb0c <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fbadc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fbae0:	428b      	cmp	r3, r1
 23fbae2:	dd13      	ble.n	23fbb0c <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fbae4:	2a00      	cmp	r2, #0
 23fbae6:	db11      	blt.n	23fbb0c <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fbae8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fbaec:	4293      	cmp	r3, r2
 23fbaee:	dd0d      	ble.n	23fbb0c <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
        setAddrWindow(x, y, 1, 1);
 23fbaf0:	2301      	movs	r3, #1
 23fbaf2:	6805      	ldr	r5, [r0, #0]
 23fbaf4:	9300      	str	r3, [sp, #0]
 23fbaf6:	6d6f      	ldr	r7, [r5, #84]	; 0x54
 23fbaf8:	b292      	uxth	r2, r2
 23fbafa:	b289      	uxth	r1, r1
 23fbafc:	47b8      	blx	r7
        SPI_WRITE16(color);
 23fbafe:	4631      	mov	r1, r6
 23fbb00:	4620      	mov	r0, r4
}
 23fbb02:	b003      	add	sp, #12
 23fbb04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        SPI_WRITE16(color);
 23fbb08:	f7ff bfb5 	b.w	23fba76 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
}
 23fbb0c:	b003      	add	sp, #12
 23fbb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fbb10 <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fbb10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fbb14:	1e0d      	subs	r5, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fbb16:	4604      	mov	r4, r0
 23fbb18:	4616      	mov	r6, r2
 23fbb1a:	461f      	mov	r7, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fbb1c:	db20      	blt.n	23fbb60 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fbb1e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fbb22:	42ab      	cmp	r3, r5
 23fbb24:	dd1c      	ble.n	23fbb60 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fbb26:	2a00      	cmp	r2, #0
 23fbb28:	db1a      	blt.n	23fbb60 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fbb2a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fbb2e:	4293      	cmp	r3, r2
 23fbb30:	dd16      	ble.n	23fbb60 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
        startWrite();
 23fbb32:	6803      	ldr	r3, [r0, #0]
 23fbb34:	695b      	ldr	r3, [r3, #20]
 23fbb36:	4798      	blx	r3
        setAddrWindow(x, y, 1, 1);
 23fbb38:	2301      	movs	r3, #1
 23fbb3a:	6822      	ldr	r2, [r4, #0]
 23fbb3c:	9300      	str	r3, [sp, #0]
 23fbb3e:	4620      	mov	r0, r4
 23fbb40:	f8d2 8054 	ldr.w	r8, [r2, #84]	; 0x54
 23fbb44:	b2a9      	uxth	r1, r5
 23fbb46:	b2b2      	uxth	r2, r6
 23fbb48:	47c0      	blx	r8
        SPI_WRITE16(color);
 23fbb4a:	4620      	mov	r0, r4
 23fbb4c:	4639      	mov	r1, r7
 23fbb4e:	f7ff ff92 	bl	23fba76 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
        endWrite();
 23fbb52:	4620      	mov	r0, r4
 23fbb54:	6823      	ldr	r3, [r4, #0]
 23fbb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbb58:	b002      	add	sp, #8
 23fbb5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        endWrite();
 23fbb5e:	4718      	bx	r3
}
 23fbb60:	b002      	add	sp, #8
 23fbb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fbb66 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fbb66:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fbb68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fbb6c:	4604      	mov	r4, r0
 23fbb6e:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23fbb70:	b99b      	cbnz	r3, 23fbb9a <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x34>
        hwspi._spi->transfer(l >> 24);
 23fbb72:	0e09      	lsrs	r1, r1, #24
 23fbb74:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fbb76:	f001 fd37 	bl	23fd5e8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 16);
 23fbb7a:	f3c5 4107 	ubfx	r1, r5, #16, #8
 23fbb7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fbb80:	f001 fd32 	bl	23fd5e8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 8);
 23fbb84:	f3c5 2107 	ubfx	r1, r5, #8, #8
 23fbb88:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fbb8a:	f001 fd2d 	bl	23fd5e8 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l);
 23fbb8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fbb90:	b2e9      	uxtb	r1, r5
}
 23fbb92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(l);
 23fbb96:	f001 bd27 	b.w	23fd5e8 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fbb9a:	2b01      	cmp	r3, #1
 23fbb9c:	d118      	bne.n	23fbbd0 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x6a>
 23fbb9e:	2620      	movs	r6, #32
            if(l & 0x80000000) SPI_MOSI_HIGH();
 23fbba0:	2d00      	cmp	r5, #0
 23fbba2:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fbba6:	da10      	bge.n	23fbbca <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x64>
 23fbba8:	f7ff fc00 	bl	23fb3ac <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fbbac:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fbbb0:	f7ff fbf4 	bl	23fb39c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fbbb4:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fbbb6:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fbbba:	f7ff fbeb 	bl	23fb394 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fbbbe:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            l <<= 1;
 23fbbc2:	ea4f 0545 	mov.w	r5, r5, lsl #1
        for(uint8_t bit=0; bit<32; bit++) {
 23fbbc6:	d1eb      	bne.n	23fbba0 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x3a>
}
 23fbbc8:	bd70      	pop	{r4, r5, r6, pc}
            else               SPI_MOSI_LOW();
 23fbbca:	f7ff fbeb 	bl	23fb3a4 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fbbce:	e7ed      	b.n	23fbbac <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x46>
        TFT_WR_STROBE();
 23fbbd0:	f7ff fd0d 	bl	23fb5ee <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fbbd4:	e7f8      	b.n	23fbbc8 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x62>

023fbbd6 <_ZN15Adafruit_ST7789D1Ev>:

//#include "Adafruit_ST77xx.h"
#include "../lib/Adafruit_ST7735_RK/src/Adafruit_ST77xx.h"

/// Subclass of ST77XX type display for ST7789 TFT Driver
class Adafruit_ST7789 : public Adafruit_ST77xx {
 23fbbd6:	4770      	bx	lr

023fbbd8 <_ZN15Adafruit_ST778911setRotationEh>:
*/
/**************************************************************************/
void Adafruit_ST7789::setRotation(uint8_t m) {
  uint8_t madctl = 0;

  rotation = m & 3; // can't be higher than 3
 23fbbd8:	f001 0103 	and.w	r1, r1, #3

  switch (rotation) {
 23fbbdc:	2902      	cmp	r1, #2
void Adafruit_ST7789::setRotation(uint8_t m) {
 23fbbde:	b570      	push	{r4, r5, r6, lr}
 23fbbe0:	4604      	mov	r4, r0
  rotation = m & 3; // can't be higher than 3
 23fbbe2:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 23fbbe4:	d024      	beq.n	23fbc30 <_ZN15Adafruit_ST778911setRotationEh+0x58>
 23fbbe6:	2903      	cmp	r1, #3
 23fbbe8:	d025      	beq.n	23fbc36 <_ZN15Adafruit_ST778911setRotationEh+0x5e>
 23fbbea:	2901      	cmp	r1, #1
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 23fbbec:	bf14      	ite	ne
 23fbbee:	25c0      	movne	r5, #192	; 0xc0
     _xstart = _colstart;
     _ystart = _rowstart;
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fbbf0:	25a0      	moveq	r5, #160	; 0xa0
 23fbbf2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 23fbbf6:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
     _xstart = _colstart;
 23fbbfa:	bf19      	ittee	ne
 23fbbfc:	f8a0 3040 	strhne.w	r3, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fbc00:	f8a0 2042 	strhne.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fbc04:	f8a0 2040 	strheq.w	r2, [r0, #64]	; 0x40
     _ystart = _colstart;
 23fbc08:	f8a0 3042 	strheq.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _xstart = 0;
     _ystart = 0;
     break;
  }
  startWrite();
 23fbc0c:	6823      	ldr	r3, [r4, #0]
 23fbc0e:	4620      	mov	r0, r4
 23fbc10:	695b      	ldr	r3, [r3, #20]
 23fbc12:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
 23fbc14:	4620      	mov	r0, r4
 23fbc16:	2136      	movs	r1, #54	; 0x36
 23fbc18:	f7ff ff06 	bl	23fba28 <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
 23fbc1c:	4620      	mov	r0, r4
 23fbc1e:	4629      	mov	r1, r5
 23fbc20:	f7ff fed9 	bl	23fb9d6 <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
 23fbc24:	6823      	ldr	r3, [r4, #0]
 23fbc26:	4620      	mov	r0, r4
}
 23fbc28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
 23fbc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbc2e:	4718      	bx	r3
     _xstart = 0;
 23fbc30:	2500      	movs	r5, #0
 23fbc32:	6405      	str	r5, [r0, #64]	; 0x40
     break;
 23fbc34:	e7ea      	b.n	23fbc0c <_ZN15Adafruit_ST778911setRotationEh+0x34>
     _xstart = 0;
 23fbc36:	2300      	movs	r3, #0
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fbc38:	2560      	movs	r5, #96	; 0x60
     _xstart = 0;
 23fbc3a:	6403      	str	r3, [r0, #64]	; 0x40
     break;
 23fbc3c:	e7e6      	b.n	23fbc0c <_ZN15Adafruit_ST778911setRotationEh+0x34>

023fbc3e <_ZN15Adafruit_ST7789D0Ev>:
 23fbc3e:	b510      	push	{r4, lr}
 23fbc40:	4604      	mov	r4, r0
 23fbc42:	2150      	movs	r1, #80	; 0x50
 23fbc44:	f7fe fd01 	bl	23fa64a <_ZdlPvj>
 23fbc48:	4620      	mov	r0, r4
 23fbc4a:	bd10      	pop	{r4, pc}

023fbc4c <_ZN15Adafruit_ST7789C1Eaaa>:
Adafruit_ST7789::Adafruit_ST7789(int8_t cs, int8_t dc, int8_t rst) :
 23fbc4c:	b510      	push	{r4, lr}
 23fbc4e:	4604      	mov	r4, r0
  Adafruit_ST77xx(cs, dc, rst) {
 23fbc50:	f000 f89a 	bl	23fbd88 <_ZN15Adafruit_ST77xxC1Eaaa>
 23fbc54:	4b01      	ldr	r3, [pc, #4]	; (23fbc5c <_ZN15Adafruit_ST7789C1Eaaa+0x10>)
}
 23fbc56:	4620      	mov	r0, r4
  Adafruit_ST77xx(cs, dc, rst) {
 23fbc58:	6023      	str	r3, [r4, #0]
}
 23fbc5a:	bd10      	pop	{r4, pc}
 23fbc5c:	023ffd14 	.word	0x023ffd14

023fbc60 <_ZN15Adafruit_ST77894initEtt>:
void Adafruit_ST7789::init(uint16_t width, uint16_t height) {
 23fbc60:	b570      	push	{r4, r5, r6, lr}
 23fbc62:	4604      	mov	r4, r0
  _colstart = ST7789_240x240_XSTART;
 23fbc64:	2500      	movs	r5, #0
  commonInit(NULL);
 23fbc66:	2100      	movs	r1, #0
 23fbc68:	f000 f8e5 	bl	23fbe36 <_ZN15Adafruit_ST77xx10commonInitEPKh>
  _width    = 240;
 23fbc6c:	4b07      	ldr	r3, [pc, #28]	; (23fbc8c <_ZN15Adafruit_ST77894initEtt+0x2c>)
  displayInit(cmd_240x240);
 23fbc6e:	4620      	mov	r0, r4
  _width    = 240;
 23fbc70:	60e3      	str	r3, [r4, #12]
  displayInit(cmd_240x240);
 23fbc72:	4907      	ldr	r1, [pc, #28]	; (23fbc90 <_ZN15Adafruit_ST77894initEtt+0x30>)
  _colstart = ST7789_240x240_XSTART;
 23fbc74:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  displayInit(cmd_240x240);
 23fbc78:	f000 f89a 	bl	23fbdb0 <_ZN15Adafruit_ST77xx11displayInitEPKh>
  setRotation(0);
 23fbc7c:	6823      	ldr	r3, [r4, #0]
 23fbc7e:	4629      	mov	r1, r5
 23fbc80:	4620      	mov	r0, r4
}
 23fbc82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setRotation(0);
 23fbc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fbc88:	4718      	bx	r3
 23fbc8a:	bf00      	nop
 23fbc8c:	014000f0 	.word	0x014000f0
 23fbc90:	023ffce8 	.word	0x023ffce8

023fbc94 <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA    0xF81F
#define ST77XX_YELLOW     0xFFE0
#define	ST77XX_ORANGE     0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
 23fbc94:	4770      	bx	lr

023fbc96 <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
 23fbc96:	b570      	push	{r4, r5, r6, lr}
  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
 23fbc98:	f001 0103 	and.w	r1, r1, #3

  switch(rotation) {
 23fbc9c:	2902      	cmp	r1, #2
void Adafruit_ST77xx::setRotation(uint8_t m) {
 23fbc9e:	4604      	mov	r4, r0
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
     _xstart = _colstart;
 23fbca0:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
     _ystart = _rowstart;
 23fbca4:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
  rotation = m % 4; // can't be higher than 3
 23fbca8:	7681      	strb	r1, [r0, #26]
  switch(rotation) {
 23fbcaa:	d020      	beq.n	23fbcee <_ZN15Adafruit_ST77xx11setRotationEh+0x58>
 23fbcac:	2903      	cmp	r1, #3
 23fbcae:	d024      	beq.n	23fbcfa <_ZN15Adafruit_ST77xx11setRotationEh+0x64>
 23fbcb0:	2901      	cmp	r1, #1
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 23fbcb2:	bf17      	itett	ne
 23fbcb4:	25c0      	movne	r5, #192	; 0xc0
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fbcb6:	25a0      	moveq	r5, #160	; 0xa0
     _xstart = _colstart;
 23fbcb8:	f8a0 2040 	strhne.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fbcbc:	f8a0 3042 	strhne.w	r3, [r0, #66]	; 0x42
     _ystart = _colstart;
 23fbcc0:	bf04      	itt	eq
 23fbcc2:	f8a0 2042 	strheq.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fbcc6:	f8a0 3040 	strheq.w	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _ystart = _colstart;
     _xstart = _rowstart;
     break;
  }
  startWrite();
 23fbcca:	6823      	ldr	r3, [r4, #0]
 23fbccc:	4620      	mov	r0, r4
 23fbcce:	695b      	ldr	r3, [r3, #20]
 23fbcd0:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
 23fbcd2:	4620      	mov	r0, r4
 23fbcd4:	2136      	movs	r1, #54	; 0x36
 23fbcd6:	f7ff fea7 	bl	23fba28 <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
 23fbcda:	4620      	mov	r0, r4
 23fbcdc:	4629      	mov	r1, r5
 23fbcde:	f7ff fe7a 	bl	23fb9d6 <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
 23fbce2:	6823      	ldr	r3, [r4, #0]
 23fbce4:	4620      	mov	r0, r4
}
 23fbce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
 23fbcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbcec:	4718      	bx	r3
     madctl  = ST77XX_MADCTL_RGB;
 23fbcee:	2500      	movs	r5, #0
     _xstart = _colstart;
 23fbcf0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fbcf4:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
     break;
 23fbcf8:	e7e7      	b.n	23fbcca <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fbcfa:	2560      	movs	r5, #96	; 0x60
     _ystart = _colstart;
 23fbcfc:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fbd00:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
     break;
 23fbd04:	e7e1      	b.n	23fbcca <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
	...

023fbd08 <_ZN15Adafruit_ST77xx5beginEm>:
    freq = SPI_DEFAULT_FREQ;
 23fbd08:	4b06      	ldr	r3, [pc, #24]	; (23fbd24 <_ZN15Adafruit_ST77xx5beginEm+0x1c>)
  initSPI(freq);
 23fbd0a:	2200      	movs	r2, #0
    freq = SPI_DEFAULT_FREQ;
 23fbd0c:	2900      	cmp	r1, #0
 23fbd0e:	bf18      	it	ne
 23fbd10:	460b      	movne	r3, r1
  invertOnCommand  = ST77XX_INVON;
 23fbd12:	f242 0121 	movw	r1, #8225	; 0x2021
  _freq = freq;
 23fbd16:	6483      	str	r3, [r0, #72]	; 0x48
  invertOnCommand  = ST77XX_INVON;
 23fbd18:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
  initSPI(freq);
 23fbd1c:	4619      	mov	r1, r3
 23fbd1e:	f7ff bba3 	b.w	23fb468 <_ZN15Adafruit_SPITFT7initSPIEmh>
 23fbd22:	bf00      	nop
 23fbd24:	00f42400 	.word	0x00f42400

023fbd28 <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  uint16_t h) {
 23fbd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbd2a:	4604      	mov	r4, r0
  x += _xstart;
 23fbd2c:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
  y += _ystart;
 23fbd30:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
  uint16_t h) {
 23fbd34:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  x += _xstart;
 23fbd38:	4439      	add	r1, r7
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fbd3a:	fa13 f781 	uxtah	r7, r3, r1
  y += _ystart;
 23fbd3e:	442a      	add	r2, r5
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fbd40:	fa16 f582 	uxtah	r5, r6, r2
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fbd44:	3f01      	subs	r7, #1
 23fbd46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fbd4a:	3d01      	subs	r5, #1
  writeCommand(ST77XX_CASET); // Column addr set
 23fbd4c:	212a      	movs	r1, #42	; 0x2a
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fbd4e:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  writeCommand(ST77XX_CASET); // Column addr set
 23fbd52:	f7ff fe69 	bl	23fba28 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
 23fbd56:	4639      	mov	r1, r7
 23fbd58:	4620      	mov	r0, r4
 23fbd5a:	f7ff ff04 	bl	23fbb66 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RASET); // Row addr set
 23fbd5e:	4620      	mov	r0, r4
 23fbd60:	212b      	movs	r1, #43	; 0x2b
 23fbd62:	f7ff fe61 	bl	23fba28 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
 23fbd66:	4629      	mov	r1, r5
 23fbd68:	4620      	mov	r0, r4
 23fbd6a:	f7ff fefc 	bl	23fbb66 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RAMWR); // write to RAM
 23fbd6e:	4620      	mov	r0, r4
}
 23fbd70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  writeCommand(ST77XX_RAMWR); // write to RAM
 23fbd74:	212c      	movs	r1, #44	; 0x2c
 23fbd76:	f7ff be57 	b.w	23fba28 <_ZN15Adafruit_SPITFT12writeCommandEh>

023fbd7a <_ZN15Adafruit_ST77xxD0Ev>:
 23fbd7a:	b510      	push	{r4, lr}
 23fbd7c:	4604      	mov	r4, r0
 23fbd7e:	2150      	movs	r1, #80	; 0x50
 23fbd80:	f7fe fc63 	bl	23fa64a <_ZdlPvj>
 23fbd84:	4620      	mov	r0, r4
 23fbd86:	bd10      	pop	{r4, pc}

023fbd88 <_ZN15Adafruit_ST77xxC1Eaaa>:
Adafruit_ST77xx::Adafruit_ST77xx(int8_t cs, int8_t dc, int8_t rst) :
 23fbd88:	b513      	push	{r0, r1, r4, lr}
 23fbd8a:	4604      	mov	r4, r0
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
 23fbd8c:	e9cd 2300 	strd	r2, r3, [sp]
 23fbd90:	460b      	mov	r3, r1
 23fbd92:	22a0      	movs	r2, #160	; 0xa0
 23fbd94:	2180      	movs	r1, #128	; 0x80
 23fbd96:	f7ff fb37 	bl	23fb408 <_ZN15Adafruit_SPITFTC1Ettaaa>
 23fbd9a:	4b04      	ldr	r3, [pc, #16]	; (23fbdac <_ZN15Adafruit_ST77xxC1Eaaa+0x24>)
}
 23fbd9c:	4620      	mov	r0, r4
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
 23fbd9e:	6023      	str	r3, [r4, #0]
 23fbda0:	2300      	movs	r3, #0
 23fbda2:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
}
 23fbda6:	b002      	add	sp, #8
 23fbda8:	bd10      	pop	{r4, pc}
 23fbdaa:	bf00      	nop
 23fbdac:	023ffd74 	.word	0x023ffd74

023fbdb0 <_ZN15Adafruit_ST77xx11displayInitEPKh>:
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 23fbdb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fbdb4:	460c      	mov	r4, r1
  startWrite();
 23fbdb6:	6803      	ldr	r3, [r0, #0]
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 23fbdb8:	4605      	mov	r5, r0
  startWrite();
 23fbdba:	695b      	ldr	r3, [r3, #20]
 23fbdbc:	4798      	blx	r3
  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
 23fbdbe:	f814 7b01 	ldrb.w	r7, [r4], #1
  while(numCommands--) {                 // For each command...
 23fbdc2:	b397      	cbz	r7, 23fbe2a <_ZN15Adafruit_ST77xx11displayInitEPKh+0x7a>
    writeCommand(pgm_read_byte(addr++)); // Read, issue command
 23fbdc4:	4626      	mov	r6, r4
 23fbdc6:	4628      	mov	r0, r5
 23fbdc8:	f816 1b02 	ldrb.w	r1, [r6], #2
 23fbdcc:	f7ff fe2c 	bl	23fba28 <_ZN15Adafruit_SPITFT12writeCommandEh>
    numArgs  = pgm_read_byte(addr++);    // Number of args to follow
 23fbdd0:	f894 9001 	ldrb.w	r9, [r4, #1]
 23fbdd4:	46b2      	mov	sl, r6
    numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 23fbdd6:	f009 087f 	and.w	r8, r9, #127	; 0x7f
 23fbdda:	4644      	mov	r4, r8
    while(numArgs--) {                   // For each argument...
 23fbddc:	3c01      	subs	r4, #1
 23fbdde:	b2e4      	uxtb	r4, r4
 23fbde0:	2cff      	cmp	r4, #255	; 0xff
 23fbde2:	d005      	beq.n	23fbdf0 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x40>
      spiWrite(pgm_read_byte(addr++));   // Read, issue argument
 23fbde4:	4628      	mov	r0, r5
 23fbde6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 23fbdea:	f7ff fdf4 	bl	23fb9d6 <_ZN15Adafruit_SPITFT8spiWriteEh>
    while(numArgs--) {                   // For each argument...
 23fbdee:	e7f5      	b.n	23fbddc <_ZN15Adafruit_ST77xx11displayInitEPKh+0x2c>
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *csPort   |= csPinMaskSet;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_cs, HIGH);
 23fbdf0:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
 23fbdf4:	2101      	movs	r1, #1
 23fbdf6:	b280      	uxth	r0, r0
 23fbdf8:	f001 fe2b 	bl	23fda52 <digitalWrite>
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *csPort   &= csPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_cs, LOW);
 23fbdfc:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
 23fbe00:	2100      	movs	r1, #0
 23fbe02:	b280      	uxth	r0, r0
 23fbe04:	f001 fe25 	bl	23fda52 <digitalWrite>
    if(ms) {
 23fbe08:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fbe0c:	eb06 0408 	add.w	r4, r6, r8
 23fbe10:	d008      	beq.n	23fbe24 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x74>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 23fbe12:	f816 0008 	ldrb.w	r0, [r6, r8]
 23fbe16:	3401      	adds	r4, #1
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 23fbe18:	28ff      	cmp	r0, #255	; 0xff
      delay(ms);
 23fbe1a:	bf08      	it	eq
 23fbe1c:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 23fbe20:	f000 fe08 	bl	23fca34 <delay>
 23fbe24:	3f01      	subs	r7, #1
 23fbe26:	b2ff      	uxtb	r7, r7
 23fbe28:	e7cb      	b.n	23fbdc2 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x12>
  endWrite();
 23fbe2a:	682b      	ldr	r3, [r5, #0]
 23fbe2c:	4628      	mov	r0, r5
}
 23fbe2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23fbe32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbe34:	4718      	bx	r3

023fbe36 <_ZN15Adafruit_ST77xx10commonInitEPKh>:
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 23fbe36:	b538      	push	{r3, r4, r5, lr}
 23fbe38:	460d      	mov	r5, r1
  begin();
 23fbe3a:	6803      	ldr	r3, [r0, #0]
 23fbe3c:	2100      	movs	r1, #0
 23fbe3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 23fbe40:	4604      	mov	r4, r0
  begin();
 23fbe42:	4798      	blx	r3
  if(cmdList) {
 23fbe44:	b12d      	cbz	r5, 23fbe52 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x1c>
    displayInit(cmdList);
 23fbe46:	4629      	mov	r1, r5
 23fbe48:	4620      	mov	r0, r4
}
 23fbe4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    displayInit(cmdList);
 23fbe4e:	f7ff bfaf 	b.w	23fbdb0 <_ZN15Adafruit_ST77xx11displayInitEPKh>
}
 23fbe52:	bd38      	pop	{r3, r4, r5, pc}

023fbe54 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 23fbe54:	6042      	str	r2, [r0, #4]
  _begun = false;
 23fbe56:	2200      	movs	r2, #0
 23fbe58:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
 23fbe5a:	2220      	movs	r2, #32
  _addr = addr;
 23fbe5c:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 23fbe5e:	60c2      	str	r2, [r0, #12]
#endif
}
 23fbe60:	4770      	bx	lr

023fbe62 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 23fbe62:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 23fbe64:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 23fbe66:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 23fbe68:	b153      	cbz	r3, 23fbe80 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 23fbe6a:	7821      	ldrb	r1, [r4, #0]
 23fbe6c:	6860      	ldr	r0, [r4, #4]
 23fbe6e:	f001 f968 	bl	23fd142 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 23fbe72:	6860      	ldr	r0, [r4, #4]
 23fbe74:	f001 f96d 	bl	23fd152 <_ZN7TwoWire15endTransmissionEv>
 23fbe78:	fab0 f080 	clz	r0, r0
 23fbe7c:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 23fbe7e:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 23fbe80:	2101      	movs	r1, #1
 23fbe82:	f000 f803 	bl	23fbe8c <_ZN18Adafruit_I2CDevice5beginEb>
 23fbe86:	2800      	cmp	r0, #0
 23fbe88:	d1ef      	bne.n	23fbe6a <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 23fbe8a:	e7f8      	b.n	23fbe7e <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

023fbe8c <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23fbe8c:	b538      	push	{r3, r4, r5, lr}
 23fbe8e:	4604      	mov	r4, r0
  _wire->begin();
 23fbe90:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23fbe92:	460d      	mov	r5, r1
  _wire->begin();
 23fbe94:	f001 f926 	bl	23fd0e4 <_ZN7TwoWire5beginEv>
  _begun = true;
 23fbe98:	2001      	movs	r0, #1
 23fbe9a:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 23fbe9c:	b125      	cbz	r5, 23fbea8 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 23fbe9e:	4620      	mov	r0, r4
}
 23fbea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 23fbea4:	f7ff bfdd 	b.w	23fbe62 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 23fbea8:	bd38      	pop	{r3, r4, r5, pc}

023fbeaa <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 23fbeaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fbeae:	461f      	mov	r7, r3
 23fbeb0:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 23fbeb4:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 23fbeb6:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 23fbeb8:	4432      	add	r2, r6
 23fbeba:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 23fbebc:	4604      	mov	r4, r0
 23fbebe:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 23fbec0:	d902      	bls.n	23fbec8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 23fbec2:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
 23fbec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 23fbec8:	7801      	ldrb	r1, [r0, #0]
 23fbeca:	6840      	ldr	r0, [r0, #4]
 23fbecc:	f001 f939 	bl	23fd142 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 23fbed0:	b97e      	cbnz	r6, 23fbef2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 23fbed2:	6860      	ldr	r0, [r4, #4]
 23fbed4:	462a      	mov	r2, r5
 23fbed6:	6803      	ldr	r3, [r0, #0]
 23fbed8:	4641      	mov	r1, r8
 23fbeda:	68db      	ldr	r3, [r3, #12]
 23fbedc:	4798      	blx	r3
 23fbede:	4285      	cmp	r5, r0
 23fbee0:	d1ef      	bne.n	23fbec2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 23fbee2:	4639      	mov	r1, r7
 23fbee4:	6860      	ldr	r0, [r4, #4]
 23fbee6:	f001 f930 	bl	23fd14a <_ZN7TwoWire15endTransmissionEh>
 23fbeea:	fab0 f080 	clz	r0, r0
 23fbeee:	0940      	lsrs	r0, r0, #5
 23fbef0:	e7e8      	b.n	23fbec4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
 23fbef2:	f1b9 0f00 	cmp.w	r9, #0
 23fbef6:	d0ec      	beq.n	23fbed2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 23fbef8:	6860      	ldr	r0, [r4, #4]
 23fbefa:	4632      	mov	r2, r6
 23fbefc:	6803      	ldr	r3, [r0, #0]
 23fbefe:	4649      	mov	r1, r9
 23fbf00:	68db      	ldr	r3, [r3, #12]
 23fbf02:	4798      	blx	r3
 23fbf04:	4286      	cmp	r6, r0
 23fbf06:	d1dc      	bne.n	23fbec2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 23fbf08:	e7e3      	b.n	23fbed2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

023fbf0a <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
 23fbf0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fbf0e:	4615      	mov	r5, r2
 23fbf10:	4604      	mov	r4, r0
 23fbf12:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 23fbf14:	b2d2      	uxtb	r2, r2
 23fbf16:	7801      	ldrb	r1, [r0, #0]
 23fbf18:	6840      	ldr	r0, [r0, #4]
 23fbf1a:	f001 f900 	bl	23fd11e <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 23fbf1e:	4285      	cmp	r5, r0
 23fbf20:	d10d      	bne.n	23fbf3e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
 23fbf22:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 23fbf24:	fa1f f887 	uxth.w	r8, r7
 23fbf28:	45a8      	cmp	r8, r5
 23fbf2a:	f107 0701 	add.w	r7, r7, #1
 23fbf2e:	d209      	bcs.n	23fbf44 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
 23fbf30:	6860      	ldr	r0, [r4, #4]
 23fbf32:	6803      	ldr	r3, [r0, #0]
 23fbf34:	695b      	ldr	r3, [r3, #20]
 23fbf36:	4798      	blx	r3
 23fbf38:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 23fbf3c:	e7f2      	b.n	23fbf24 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
 23fbf3e:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23fbf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fbf44:	2001      	movs	r0, #1
 23fbf46:	e7fb      	b.n	23fbf40 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

023fbf48 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23fbf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fbf4c:	4607      	mov	r7, r0
 23fbf4e:	4688      	mov	r8, r1
 23fbf50:	4616      	mov	r6, r2
 23fbf52:	4699      	mov	r9, r3
  size_t pos = 0;
 23fbf54:	2500      	movs	r5, #0
  while (pos < len) {
 23fbf56:	42b5      	cmp	r5, r6
 23fbf58:	d212      	bcs.n	23fbf80 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
 23fbf5a:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
 23fbf5c:	1b74      	subs	r4, r6, r5
 23fbf5e:	4294      	cmp	r4, r2
 23fbf60:	bf28      	it	cs
 23fbf62:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
 23fbf64:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
 23fbf66:	42ab      	cmp	r3, r5
 23fbf68:	bf94      	ite	ls
 23fbf6a:	464b      	movls	r3, r9
 23fbf6c:	2300      	movhi	r3, #0
 23fbf6e:	4622      	mov	r2, r4
 23fbf70:	4638      	mov	r0, r7
 23fbf72:	eb08 0105 	add.w	r1, r8, r5
 23fbf76:	f7ff ffc8 	bl	23fbf0a <_ZN18Adafruit_I2CDevice5_readEPhjb>
 23fbf7a:	b110      	cbz	r0, 23fbf82 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
 23fbf7c:	4425      	add	r5, r4
  while (pos < len) {
 23fbf7e:	e7ea      	b.n	23fbf56 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
 23fbf80:	2001      	movs	r0, #1
}
 23fbf82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023fbf86 <_ZN14Adafruit_SGP30C1Ev>:
#include "Arduino.h"

/*!
 *  @brief  Instantiates a new SGP30 class
 */
Adafruit_SGP30::Adafruit_SGP30() {}
 23fbf86:	2200      	movs	r2, #0
 23fbf88:	6102      	str	r2, [r0, #16]
 23fbf8a:	4770      	bx	lr

023fbf8c <_ZN14Adafruit_SGP3011generateCRCEPhh>:
  return true;
}

uint8_t Adafruit_SGP30::generateCRC(uint8_t *data, uint8_t datalen) {
  // calculates 8-Bit checksum with given polynomial
  uint8_t crc = SGP30_CRC8_INIT;
 23fbf8c:	20ff      	movs	r0, #255	; 0xff
 23fbf8e:	440a      	add	r2, r1

  for (uint8_t i = 0; i < datalen; i++) {
 23fbf90:	428a      	cmp	r2, r1
 23fbf92:	d011      	beq.n	23fbfb8 <_ZN14Adafruit_SGP3011generateCRCEPhh+0x2c>
    crc ^= data[i];
 23fbf94:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fbf98:	4058      	eors	r0, r3
 23fbf9a:	2308      	movs	r3, #8
    for (uint8_t b = 0; b < 8; b++) {
      if (crc & 0x80)
 23fbf9c:	f010 0f80 	tst.w	r0, #128	; 0x80
    for (uint8_t b = 0; b < 8; b++) {
 23fbfa0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 23fbfa4:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (crc << 1) ^ SGP30_CRC8_POLYNOMIAL;
 23fbfa8:	bf18      	it	ne
 23fbfaa:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (uint8_t b = 0; b < 8; b++) {
 23fbfae:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      else
        crc <<= 1;
 23fbfb2:	b2c0      	uxtb	r0, r0
    for (uint8_t b = 0; b < 8; b++) {
 23fbfb4:	d1f2      	bne.n	23fbf9c <_ZN14Adafruit_SGP3011generateCRCEPhh+0x10>
 23fbfb6:	e7eb      	b.n	23fbf90 <_ZN14Adafruit_SGP3011generateCRCEPhh+0x4>
    }
  }
  return crc;
 23fbfb8:	4770      	bx	lr

023fbfba <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>:
                                         uint8_t readlen) {
 23fbfba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fbfbe:	4698      	mov	r8, r3
  if (!i2c_dev->write(command, commandLength)) {
 23fbfc0:	2300      	movs	r3, #0
                                         uint8_t readlen) {
 23fbfc2:	b082      	sub	sp, #8
  if (!i2c_dev->write(command, commandLength)) {
 23fbfc4:	e9cd 3300 	strd	r3, r3, [sp]
                                         uint8_t readlen) {
 23fbfc8:	af02      	add	r7, sp, #8
 23fbfca:	4606      	mov	r6, r0
  if (!i2c_dev->write(command, commandLength)) {
 23fbfcc:	2301      	movs	r3, #1
 23fbfce:	6900      	ldr	r0, [r0, #16]
                                         uint8_t readlen) {
 23fbfd0:	f8d7 9020 	ldr.w	r9, [r7, #32]
 23fbfd4:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
  if (!i2c_dev->write(command, commandLength)) {
 23fbfd8:	f7ff ff67 	bl	23fbeaa <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23fbfdc:	4605      	mov	r5, r0
 23fbfde:	b390      	cbz	r0, 23fc046 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x8c>
  delay(delayms);
 23fbfe0:	4640      	mov	r0, r8
 23fbfe2:	f000 fd27 	bl	23fca34 <delay>
  if (readlen == 0)
 23fbfe6:	b354      	cbz	r4, 23fc03e <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x84>
  uint8_t replylen = readlen * (SGP30_WORD_LEN + 1);
 23fbfe8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 23fbfec:	b2d2      	uxtb	r2, r2
  uint8_t replybuffer[replylen];
 23fbfee:	1dd3      	adds	r3, r2, #7
 23fbff0:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
 23fbff4:	ebad 0d03 	sub.w	sp, sp, r3
 23fbff8:	f10d 0a08 	add.w	sl, sp, #8
  if (!i2c_dev->read(replybuffer, replylen)) {
 23fbffc:	2301      	movs	r3, #1
 23fbffe:	4651      	mov	r1, sl
 23fc000:	6930      	ldr	r0, [r6, #16]
 23fc002:	f7ff ffa1 	bl	23fbf48 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23fc006:	b1f0      	cbz	r0, 23fc046 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x8c>
 23fc008:	3c01      	subs	r4, #1
 23fc00a:	b2e4      	uxtb	r4, r4
 23fc00c:	f1a9 0802 	sub.w	r8, r9, #2
 23fc010:	eb09 0444 	add.w	r4, r9, r4, lsl #1
    uint8_t crc = generateCRC(replybuffer + i * 3, 2);
 23fc014:	2202      	movs	r2, #2
 23fc016:	4651      	mov	r1, sl
 23fc018:	4630      	mov	r0, r6
 23fc01a:	f7ff ffb7 	bl	23fbf8c <_ZN14Adafruit_SGP3011generateCRCEPhh>
    if (crc != replybuffer[i * 3 + 2])
 23fc01e:	f89a 3002 	ldrb.w	r3, [sl, #2]
 23fc022:	4283      	cmp	r3, r0
 23fc024:	d10f      	bne.n	23fc046 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x8c>
    readdata[i] = replybuffer[i * 3];
 23fc026:	f89a 2000 	ldrb.w	r2, [sl]
    readdata[i] |= replybuffer[i * 3 + 1];
 23fc02a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  for (uint8_t i = 0; i < readlen; i++) {
 23fc02e:	f10a 0a03 	add.w	sl, sl, #3
    readdata[i] |= replybuffer[i * 3 + 1];
 23fc032:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23fc036:	f828 3f02 	strh.w	r3, [r8, #2]!
  for (uint8_t i = 0; i < readlen; i++) {
 23fc03a:	45a0      	cmp	r8, r4
 23fc03c:	d1ea      	bne.n	23fc014 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x5a>
}
 23fc03e:	4628      	mov	r0, r5
 23fc040:	46bd      	mov	sp, r7
 23fc042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 23fc046:	2500      	movs	r5, #0
 23fc048:	e7f9      	b.n	23fc03e <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x84>

023fc04a <_ZN14Adafruit_SGP307IAQinitEv>:
boolean Adafruit_SGP30::IAQinit(void) {
 23fc04a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  command[0] = 0x20;
 23fc04c:	2320      	movs	r3, #32
 23fc04e:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x03;
 23fc052:	2303      	movs	r3, #3
 23fc054:	f88d 300d 	strb.w	r3, [sp, #13]
  return readWordFromCommand(command, 2, 10);
 23fc058:	2300      	movs	r3, #0
 23fc05a:	2202      	movs	r2, #2
 23fc05c:	e9cd 3300 	strd	r3, r3, [sp]
 23fc060:	a903      	add	r1, sp, #12
 23fc062:	230a      	movs	r3, #10
 23fc064:	f7ff ffa9 	bl	23fbfba <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
}
 23fc068:	b005      	add	sp, #20
 23fc06a:	f85d fb04 	ldr.w	pc, [sp], #4

023fc06e <_ZN14Adafruit_SGP305beginEP7TwoWireb>:
boolean Adafruit_SGP30::begin(TwoWire *theWire, boolean initSensor) {
 23fc06e:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc070:	4604      	mov	r4, r0
  if (i2c_dev) {
 23fc072:	6900      	ldr	r0, [r0, #16]
boolean Adafruit_SGP30::begin(TwoWire *theWire, boolean initSensor) {
 23fc074:	460f      	mov	r7, r1
 23fc076:	4616      	mov	r6, r2
 23fc078:	b085      	sub	sp, #20
  if (i2c_dev) {
 23fc07a:	b110      	cbz	r0, 23fc082 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x14>
    delete i2c_dev; // remove old interface
 23fc07c:	2110      	movs	r1, #16
 23fc07e:	f7fe fae4 	bl	23fa64a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(SGP30_I2CADDR_DEFAULT, theWire);
 23fc082:	2010      	movs	r0, #16
 23fc084:	f7fe fadd 	bl	23fa642 <_Znwj>
 23fc088:	4605      	mov	r5, r0
 23fc08a:	b118      	cbz	r0, 23fc094 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x26>
 23fc08c:	463a      	mov	r2, r7
 23fc08e:	2158      	movs	r1, #88	; 0x58
 23fc090:	f7ff fee0 	bl	23fbe54 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23fc094:	2101      	movs	r1, #1
 23fc096:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(SGP30_I2CADDR_DEFAULT, theWire);
 23fc098:	6125      	str	r5, [r4, #16]
  if (!i2c_dev->begin()) {
 23fc09a:	f7ff fef7 	bl	23fbe8c <_ZN18Adafruit_I2CDevice5beginEb>
 23fc09e:	b910      	cbnz	r0, 23fc0a6 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x38>
    return false;
 23fc0a0:	2000      	movs	r0, #0
}
 23fc0a2:	b005      	add	sp, #20
 23fc0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  command[0] = 0x36;
 23fc0a6:	2336      	movs	r3, #54	; 0x36
 23fc0a8:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x82;
 23fc0ac:	2382      	movs	r3, #130	; 0x82
 23fc0ae:	f88d 300d 	strb.w	r3, [sp, #13]
  if (!readWordFromCommand(command, 2, 10, serialnumber, 3))
 23fc0b2:	2303      	movs	r3, #3
 23fc0b4:	9301      	str	r3, [sp, #4]
 23fc0b6:	f104 0308 	add.w	r3, r4, #8
 23fc0ba:	9300      	str	r3, [sp, #0]
 23fc0bc:	2202      	movs	r2, #2
 23fc0be:	230a      	movs	r3, #10
 23fc0c0:	4620      	mov	r0, r4
 23fc0c2:	a903      	add	r1, sp, #12
 23fc0c4:	f7ff ff79 	bl	23fbfba <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 23fc0c8:	2800      	cmp	r0, #0
 23fc0ca:	d0e9      	beq.n	23fc0a0 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x32>
  command[0] = 0x20;
 23fc0cc:	2320      	movs	r3, #32
 23fc0ce:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x2F;
 23fc0d2:	232f      	movs	r3, #47	; 0x2f
 23fc0d4:	f88d 300d 	strb.w	r3, [sp, #13]
  if (!readWordFromCommand(command, 2, 10, &featureset, 1))
 23fc0d8:	2301      	movs	r3, #1
 23fc0da:	9301      	str	r3, [sp, #4]
 23fc0dc:	f10d 030e 	add.w	r3, sp, #14
 23fc0e0:	9300      	str	r3, [sp, #0]
 23fc0e2:	2202      	movs	r2, #2
 23fc0e4:	230a      	movs	r3, #10
 23fc0e6:	4620      	mov	r0, r4
 23fc0e8:	a903      	add	r1, sp, #12
 23fc0ea:	f7ff ff66 	bl	23fbfba <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 23fc0ee:	2800      	cmp	r0, #0
 23fc0f0:	d0d6      	beq.n	23fc0a0 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x32>
  if ((featureset & 0xF0) != SGP30_FEATURESET)
 23fc0f2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 23fc0f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 23fc0fa:	2b20      	cmp	r3, #32
 23fc0fc:	d1d0      	bne.n	23fc0a0 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x32>
  if (initSensor) {
 23fc0fe:	2e00      	cmp	r6, #0
 23fc100:	d0cf      	beq.n	23fc0a2 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x34>
    if (!IAQinit())
 23fc102:	4620      	mov	r0, r4
 23fc104:	f7ff ffa1 	bl	23fc04a <_ZN14Adafruit_SGP307IAQinitEv>
 23fc108:	e7cb      	b.n	23fc0a2 <_ZN14Adafruit_SGP305beginEP7TwoWireb+0x34>

023fc10a <_ZN14Adafruit_SGP3010IAQmeasureEv>:
boolean Adafruit_SGP30::IAQmeasure(void) {
 23fc10a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  command[0] = 0x20;
 23fc10c:	2320      	movs	r3, #32
 23fc10e:	f88d 3008 	strb.w	r3, [sp, #8]
  command[1] = 0x08;
 23fc112:	2308      	movs	r3, #8
  if (!readWordFromCommand(command, 2, 12, reply, 2))
 23fc114:	2202      	movs	r2, #2
  command[1] = 0x08;
 23fc116:	f88d 3009 	strb.w	r3, [sp, #9]
  if (!readWordFromCommand(command, 2, 12, reply, 2))
 23fc11a:	ab03      	add	r3, sp, #12
 23fc11c:	9300      	str	r3, [sp, #0]
 23fc11e:	9201      	str	r2, [sp, #4]
 23fc120:	230c      	movs	r3, #12
 23fc122:	a902      	add	r1, sp, #8
boolean Adafruit_SGP30::IAQmeasure(void) {
 23fc124:	4604      	mov	r4, r0
  if (!readWordFromCommand(command, 2, 12, reply, 2))
 23fc126:	f7ff ff48 	bl	23fbfba <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 23fc12a:	b128      	cbz	r0, 23fc138 <_ZN14Adafruit_SGP3010IAQmeasureEv+0x2e>
  TVOC = reply[1];
 23fc12c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 23fc130:	8023      	strh	r3, [r4, #0]
  eCO2 = reply[0];
 23fc132:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fc136:	8063      	strh	r3, [r4, #2]
}
 23fc138:	b004      	add	sp, #16
 23fc13a:	bd10      	pop	{r4, pc}

023fc13c <_ZN14Adafruit_SGP3014getIAQBaselineEPtS0_>:
  command[0] = 0x20;
 23fc13c:	2320      	movs	r3, #32
                                       uint16_t *tvoc_base) {
 23fc13e:	b530      	push	{r4, r5, lr}
 23fc140:	b085      	sub	sp, #20
  command[0] = 0x20;
 23fc142:	f88d 3008 	strb.w	r3, [sp, #8]
  command[1] = 0x15;
 23fc146:	2315      	movs	r3, #21
                                       uint16_t *tvoc_base) {
 23fc148:	4614      	mov	r4, r2
  if (!readWordFromCommand(command, 2, 10, reply, 2))
 23fc14a:	2202      	movs	r2, #2
  command[1] = 0x15;
 23fc14c:	f88d 3009 	strb.w	r3, [sp, #9]
  if (!readWordFromCommand(command, 2, 10, reply, 2))
 23fc150:	ab03      	add	r3, sp, #12
                                       uint16_t *tvoc_base) {
 23fc152:	460d      	mov	r5, r1
  if (!readWordFromCommand(command, 2, 10, reply, 2))
 23fc154:	9300      	str	r3, [sp, #0]
 23fc156:	9201      	str	r2, [sp, #4]
 23fc158:	230a      	movs	r3, #10
 23fc15a:	a902      	add	r1, sp, #8
 23fc15c:	f7ff ff2d 	bl	23fbfba <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 23fc160:	b128      	cbz	r0, 23fc16e <_ZN14Adafruit_SGP3014getIAQBaselineEPtS0_+0x32>
  *eco2_base = reply[0];
 23fc162:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fc166:	802b      	strh	r3, [r5, #0]
  *tvoc_base = reply[1];
 23fc168:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 23fc16c:	8023      	strh	r3, [r4, #0]
}
 23fc16e:	b005      	add	sp, #20
 23fc170:	bd30      	pop	{r4, r5, pc}
	...

023fc174 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fc174:	b509      	push	{r0, r3, lr}
 23fc176:	4804      	ldr	r0, [pc, #16]	; (23fc188 <os_mutex_recursive_create+0x14>)
 23fc178:	6800      	ldr	r0, [r0, #0]
 23fc17a:	4b04      	ldr	r3, [pc, #16]	; (23fc18c <os_mutex_recursive_create+0x18>)
 23fc17c:	4403      	add	r3, r0
 23fc17e:	681b      	ldr	r3, [r3, #0]
 23fc180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc182:	9302      	str	r3, [sp, #8]
 23fc184:	bd09      	pop	{r0, r3, pc}
 23fc186:	0000      	.short	0x0000
 23fc188:	1007ad80 	.word	0x1007ad80
 23fc18c:	00000030 	.word	0x00000030

023fc190 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc190:	b509      	push	{r0, r3, lr}
 23fc192:	4804      	ldr	r0, [pc, #16]	; (23fc1a4 <HAL_RNG_GetRandomNumber+0x14>)
 23fc194:	6800      	ldr	r0, [r0, #0]
 23fc196:	4b04      	ldr	r3, [pc, #16]	; (23fc1a8 <HAL_RNG_GetRandomNumber+0x18>)
 23fc198:	4403      	add	r3, r0
 23fc19a:	681b      	ldr	r3, [r3, #0]
 23fc19c:	685b      	ldr	r3, [r3, #4]
 23fc19e:	9302      	str	r3, [sp, #8]
 23fc1a0:	bd09      	pop	{r0, r3, pc}
 23fc1a2:	0000      	.short	0x0000
 23fc1a4:	1007ad80 	.word	0x1007ad80
 23fc1a8:	00000000 	.word	0x00000000

023fc1ac <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fc1ac:	b509      	push	{r0, r3, lr}
 23fc1ae:	4804      	ldr	r0, [pc, #16]	; (23fc1c0 <HAL_Delay_Microseconds+0x14>)
 23fc1b0:	6800      	ldr	r0, [r0, #0]
 23fc1b2:	4b04      	ldr	r3, [pc, #16]	; (23fc1c4 <HAL_Delay_Microseconds+0x18>)
 23fc1b4:	4403      	add	r3, r0
 23fc1b6:	681b      	ldr	r3, [r3, #0]
 23fc1b8:	68db      	ldr	r3, [r3, #12]
 23fc1ba:	9302      	str	r3, [sp, #8]
 23fc1bc:	bd09      	pop	{r0, r3, pc}
 23fc1be:	0000      	.short	0x0000
 23fc1c0:	1007ad80 	.word	0x1007ad80
 23fc1c4:	00000000 	.word	0x00000000

023fc1c8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc1c8:	b509      	push	{r0, r3, lr}
 23fc1ca:	4804      	ldr	r0, [pc, #16]	; (23fc1dc <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc1cc:	6800      	ldr	r0, [r0, #0]
 23fc1ce:	4b04      	ldr	r3, [pc, #16]	; (23fc1e0 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc1d0:	4403      	add	r3, r0
 23fc1d2:	681b      	ldr	r3, [r3, #0]
 23fc1d4:	695b      	ldr	r3, [r3, #20]
 23fc1d6:	9302      	str	r3, [sp, #8]
 23fc1d8:	bd09      	pop	{r0, r3, pc}
 23fc1da:	0000      	.short	0x0000
 23fc1dc:	1007ad80 	.word	0x1007ad80
 23fc1e0:	00000000 	.word	0x00000000

023fc1e4 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fc1e4:	b509      	push	{r0, r3, lr}
 23fc1e6:	4804      	ldr	r0, [pc, #16]	; (23fc1f8 <hal_pin_validate_function+0x14>)
 23fc1e8:	6800      	ldr	r0, [r0, #0]
 23fc1ea:	4b04      	ldr	r3, [pc, #16]	; (23fc1fc <hal_pin_validate_function+0x18>)
 23fc1ec:	4403      	add	r3, r0
 23fc1ee:	681b      	ldr	r3, [r3, #0]
 23fc1f0:	685b      	ldr	r3, [r3, #4]
 23fc1f2:	9302      	str	r3, [sp, #8]
 23fc1f4:	bd09      	pop	{r0, r3, pc}
 23fc1f6:	0000      	.short	0x0000
 23fc1f8:	1007ad80 	.word	0x1007ad80
 23fc1fc:	00000014 	.word	0x00000014

023fc200 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fc200:	b509      	push	{r0, r3, lr}
 23fc202:	4804      	ldr	r0, [pc, #16]	; (23fc214 <hal_gpio_mode+0x14>)
 23fc204:	6800      	ldr	r0, [r0, #0]
 23fc206:	4b04      	ldr	r3, [pc, #16]	; (23fc218 <hal_gpio_mode+0x18>)
 23fc208:	4403      	add	r3, r0
 23fc20a:	681b      	ldr	r3, [r3, #0]
 23fc20c:	689b      	ldr	r3, [r3, #8]
 23fc20e:	9302      	str	r3, [sp, #8]
 23fc210:	bd09      	pop	{r0, r3, pc}
 23fc212:	0000      	.short	0x0000
 23fc214:	1007ad80 	.word	0x1007ad80
 23fc218:	00000014 	.word	0x00000014

023fc21c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fc21c:	b509      	push	{r0, r3, lr}
 23fc21e:	4804      	ldr	r0, [pc, #16]	; (23fc230 <hal_gpio_get_mode+0x14>)
 23fc220:	6800      	ldr	r0, [r0, #0]
 23fc222:	4b04      	ldr	r3, [pc, #16]	; (23fc234 <hal_gpio_get_mode+0x18>)
 23fc224:	4403      	add	r3, r0
 23fc226:	681b      	ldr	r3, [r3, #0]
 23fc228:	68db      	ldr	r3, [r3, #12]
 23fc22a:	9302      	str	r3, [sp, #8]
 23fc22c:	bd09      	pop	{r0, r3, pc}
 23fc22e:	0000      	.short	0x0000
 23fc230:	1007ad80 	.word	0x1007ad80
 23fc234:	00000014 	.word	0x00000014

023fc238 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fc238:	b509      	push	{r0, r3, lr}
 23fc23a:	4804      	ldr	r0, [pc, #16]	; (23fc24c <hal_gpio_write+0x14>)
 23fc23c:	6800      	ldr	r0, [r0, #0]
 23fc23e:	4b04      	ldr	r3, [pc, #16]	; (23fc250 <hal_gpio_write+0x18>)
 23fc240:	4403      	add	r3, r0
 23fc242:	681b      	ldr	r3, [r3, #0]
 23fc244:	691b      	ldr	r3, [r3, #16]
 23fc246:	9302      	str	r3, [sp, #8]
 23fc248:	bd09      	pop	{r0, r3, pc}
 23fc24a:	0000      	.short	0x0000
 23fc24c:	1007ad80 	.word	0x1007ad80
 23fc250:	00000014 	.word	0x00000014

023fc254 <HAL_DAC_Get_Resolution>:

DYNALIB_FN(22, hal_gpio, hal_pwm_write_with_frequency, void(uint16_t, uint8_t, uint16_t))
DYNALIB_FN(23, hal_gpio, HAL_DAC_Is_Enabled, uint8_t(hal_pin_t))
DYNALIB_FN(24, hal_gpio, HAL_DAC_Enable, uint8_t(hal_pin_t, uint8_t))

DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
 23fc254:	b509      	push	{r0, r3, lr}
 23fc256:	4804      	ldr	r0, [pc, #16]	; (23fc268 <HAL_DAC_Get_Resolution+0x14>)
 23fc258:	6800      	ldr	r0, [r0, #0]
 23fc25a:	4b04      	ldr	r3, [pc, #16]	; (23fc26c <HAL_DAC_Get_Resolution+0x18>)
 23fc25c:	4403      	add	r3, r0
 23fc25e:	681b      	ldr	r3, [r3, #0]
 23fc260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23fc262:	9302      	str	r3, [sp, #8]
 23fc264:	bd09      	pop	{r0, r3, pc}
 23fc266:	0000      	.short	0x0000
 23fc268:	1007ad80 	.word	0x1007ad80
 23fc26c:	00000014 	.word	0x00000014

023fc270 <HAL_DAC_Set_Resolution>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
 23fc270:	b509      	push	{r0, r3, lr}
 23fc272:	4804      	ldr	r0, [pc, #16]	; (23fc284 <HAL_DAC_Set_Resolution+0x14>)
 23fc274:	6800      	ldr	r0, [r0, #0]
 23fc276:	4b04      	ldr	r3, [pc, #16]	; (23fc288 <HAL_DAC_Set_Resolution+0x18>)
 23fc278:	4403      	add	r3, r0
 23fc27a:	681b      	ldr	r3, [r3, #0]
 23fc27c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 23fc27e:	9302      	str	r3, [sp, #8]
 23fc280:	bd09      	pop	{r0, r3, pc}
 23fc282:	0000      	.short	0x0000
 23fc284:	1007ad80 	.word	0x1007ad80
 23fc288:	00000014 	.word	0x00000014

023fc28c <hal_pwm_get_resolution>:
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
 23fc28c:	b509      	push	{r0, r3, lr}
 23fc28e:	4804      	ldr	r0, [pc, #16]	; (23fc2a0 <hal_pwm_get_resolution+0x14>)
 23fc290:	6800      	ldr	r0, [r0, #0]
 23fc292:	4b04      	ldr	r3, [pc, #16]	; (23fc2a4 <hal_pwm_get_resolution+0x18>)
 23fc294:	4403      	add	r3, r0
 23fc296:	681b      	ldr	r3, [r3, #0]
 23fc298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fc29a:	9302      	str	r3, [sp, #8]
 23fc29c:	bd09      	pop	{r0, r3, pc}
 23fc29e:	0000      	.short	0x0000
 23fc2a0:	1007ad80 	.word	0x1007ad80
 23fc2a4:	00000014 	.word	0x00000014

023fc2a8 <hal_pwm_set_resolution>:
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
 23fc2a8:	b509      	push	{r0, r3, lr}
 23fc2aa:	4804      	ldr	r0, [pc, #16]	; (23fc2bc <hal_pwm_set_resolution+0x14>)
 23fc2ac:	6800      	ldr	r0, [r0, #0]
 23fc2ae:	4b04      	ldr	r3, [pc, #16]	; (23fc2c0 <hal_pwm_set_resolution+0x18>)
 23fc2b0:	4403      	add	r3, r0
 23fc2b2:	681b      	ldr	r3, [r3, #0]
 23fc2b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 23fc2b6:	9302      	str	r3, [sp, #8]
 23fc2b8:	bd09      	pop	{r0, r3, pc}
 23fc2ba:	0000      	.short	0x0000
 23fc2bc:	1007ad80 	.word	0x1007ad80
 23fc2c0:	00000014 	.word	0x00000014

023fc2c4 <hal_pwm_write_with_frequency_ext>:
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
 23fc2c4:	b509      	push	{r0, r3, lr}
 23fc2c6:	4804      	ldr	r0, [pc, #16]	; (23fc2d8 <hal_pwm_write_with_frequency_ext+0x14>)
 23fc2c8:	6800      	ldr	r0, [r0, #0]
 23fc2ca:	4b04      	ldr	r3, [pc, #16]	; (23fc2dc <hal_pwm_write_with_frequency_ext+0x18>)
 23fc2cc:	4403      	add	r3, r0
 23fc2ce:	681b      	ldr	r3, [r3, #0]
 23fc2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 23fc2d2:	9302      	str	r3, [sp, #8]
 23fc2d4:	bd09      	pop	{r0, r3, pc}
 23fc2d6:	0000      	.short	0x0000
 23fc2d8:	1007ad80 	.word	0x1007ad80
 23fc2dc:	00000014 	.word	0x00000014

023fc2e0 <hal_pwm_get_max_frequency>:
DYNALIB_FN(32, hal_gpio, hal_pwm_get_frequency_ext, uint32_t(uint16_t))
DYNALIB_FN(33, hal_gpio, hal_pwm_get_analog_value_ext, uint32_t(uint16_t))
DYNALIB_FN(34, hal_gpio, hal_pwm_get_max_frequency, uint32_t(uint16_t))
 23fc2e0:	b509      	push	{r0, r3, lr}
 23fc2e2:	4804      	ldr	r0, [pc, #16]	; (23fc2f4 <hal_pwm_get_max_frequency+0x14>)
 23fc2e4:	6800      	ldr	r0, [r0, #0]
 23fc2e6:	4b04      	ldr	r3, [pc, #16]	; (23fc2f8 <hal_pwm_get_max_frequency+0x18>)
 23fc2e8:	4403      	add	r3, r0
 23fc2ea:	681b      	ldr	r3, [r3, #0]
 23fc2ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fc2f0:	9302      	str	r3, [sp, #8]
 23fc2f2:	bd09      	pop	{r0, r3, pc}
 23fc2f4:	1007ad80 	.word	0x1007ad80
 23fc2f8:	00000014 	.word	0x00000014

023fc2fc <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fc2fc:	b509      	push	{r0, r3, lr}
 23fc2fe:	4804      	ldr	r0, [pc, #16]	; (23fc310 <hal_i2c_begin+0x14>)
 23fc300:	6800      	ldr	r0, [r0, #0]
 23fc302:	4b04      	ldr	r3, [pc, #16]	; (23fc314 <hal_i2c_begin+0x18>)
 23fc304:	4403      	add	r3, r0
 23fc306:	681b      	ldr	r3, [r3, #0]
 23fc308:	68db      	ldr	r3, [r3, #12]
 23fc30a:	9302      	str	r3, [sp, #8]
 23fc30c:	bd09      	pop	{r0, r3, pc}
 23fc30e:	0000      	.short	0x0000
 23fc310:	1007ad80 	.word	0x1007ad80
 23fc314:	00000010 	.word	0x00000010

023fc318 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fc318:	b509      	push	{r0, r3, lr}
 23fc31a:	4804      	ldr	r0, [pc, #16]	; (23fc32c <hal_i2c_begin_transmission+0x14>)
 23fc31c:	6800      	ldr	r0, [r0, #0]
 23fc31e:	4b04      	ldr	r3, [pc, #16]	; (23fc330 <hal_i2c_begin_transmission+0x18>)
 23fc320:	4403      	add	r3, r0
 23fc322:	681b      	ldr	r3, [r3, #0]
 23fc324:	699b      	ldr	r3, [r3, #24]
 23fc326:	9302      	str	r3, [sp, #8]
 23fc328:	bd09      	pop	{r0, r3, pc}
 23fc32a:	0000      	.short	0x0000
 23fc32c:	1007ad80 	.word	0x1007ad80
 23fc330:	00000010 	.word	0x00000010

023fc334 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fc334:	b509      	push	{r0, r3, lr}
 23fc336:	4804      	ldr	r0, [pc, #16]	; (23fc348 <hal_i2c_end_transmission+0x14>)
 23fc338:	6800      	ldr	r0, [r0, #0]
 23fc33a:	4b04      	ldr	r3, [pc, #16]	; (23fc34c <hal_i2c_end_transmission+0x18>)
 23fc33c:	4403      	add	r3, r0
 23fc33e:	681b      	ldr	r3, [r3, #0]
 23fc340:	69db      	ldr	r3, [r3, #28]
 23fc342:	9302      	str	r3, [sp, #8]
 23fc344:	bd09      	pop	{r0, r3, pc}
 23fc346:	0000      	.short	0x0000
 23fc348:	1007ad80 	.word	0x1007ad80
 23fc34c:	00000010 	.word	0x00000010

023fc350 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fc350:	b509      	push	{r0, r3, lr}
 23fc352:	4804      	ldr	r0, [pc, #16]	; (23fc364 <hal_i2c_write+0x14>)
 23fc354:	6800      	ldr	r0, [r0, #0]
 23fc356:	4b04      	ldr	r3, [pc, #16]	; (23fc368 <hal_i2c_write+0x18>)
 23fc358:	4403      	add	r3, r0
 23fc35a:	681b      	ldr	r3, [r3, #0]
 23fc35c:	6a1b      	ldr	r3, [r3, #32]
 23fc35e:	9302      	str	r3, [sp, #8]
 23fc360:	bd09      	pop	{r0, r3, pc}
 23fc362:	0000      	.short	0x0000
 23fc364:	1007ad80 	.word	0x1007ad80
 23fc368:	00000010 	.word	0x00000010

023fc36c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fc36c:	b509      	push	{r0, r3, lr}
 23fc36e:	4804      	ldr	r0, [pc, #16]	; (23fc380 <hal_i2c_available+0x14>)
 23fc370:	6800      	ldr	r0, [r0, #0]
 23fc372:	4b04      	ldr	r3, [pc, #16]	; (23fc384 <hal_i2c_available+0x18>)
 23fc374:	4403      	add	r3, r0
 23fc376:	681b      	ldr	r3, [r3, #0]
 23fc378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc37a:	9302      	str	r3, [sp, #8]
 23fc37c:	bd09      	pop	{r0, r3, pc}
 23fc37e:	0000      	.short	0x0000
 23fc380:	1007ad80 	.word	0x1007ad80
 23fc384:	00000010 	.word	0x00000010

023fc388 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fc388:	b509      	push	{r0, r3, lr}
 23fc38a:	4804      	ldr	r0, [pc, #16]	; (23fc39c <hal_i2c_read+0x14>)
 23fc38c:	6800      	ldr	r0, [r0, #0]
 23fc38e:	4b04      	ldr	r3, [pc, #16]	; (23fc3a0 <hal_i2c_read+0x18>)
 23fc390:	4403      	add	r3, r0
 23fc392:	681b      	ldr	r3, [r3, #0]
 23fc394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc396:	9302      	str	r3, [sp, #8]
 23fc398:	bd09      	pop	{r0, r3, pc}
 23fc39a:	0000      	.short	0x0000
 23fc39c:	1007ad80 	.word	0x1007ad80
 23fc3a0:	00000010 	.word	0x00000010

023fc3a4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fc3a4:	b509      	push	{r0, r3, lr}
 23fc3a6:	4804      	ldr	r0, [pc, #16]	; (23fc3b8 <hal_i2c_peek+0x14>)
 23fc3a8:	6800      	ldr	r0, [r0, #0]
 23fc3aa:	4b04      	ldr	r3, [pc, #16]	; (23fc3bc <hal_i2c_peek+0x18>)
 23fc3ac:	4403      	add	r3, r0
 23fc3ae:	681b      	ldr	r3, [r3, #0]
 23fc3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc3b2:	9302      	str	r3, [sp, #8]
 23fc3b4:	bd09      	pop	{r0, r3, pc}
 23fc3b6:	0000      	.short	0x0000
 23fc3b8:	1007ad80 	.word	0x1007ad80
 23fc3bc:	00000010 	.word	0x00000010

023fc3c0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fc3c0:	b509      	push	{r0, r3, lr}
 23fc3c2:	4804      	ldr	r0, [pc, #16]	; (23fc3d4 <hal_i2c_flush+0x14>)
 23fc3c4:	6800      	ldr	r0, [r0, #0]
 23fc3c6:	4b04      	ldr	r3, [pc, #16]	; (23fc3d8 <hal_i2c_flush+0x18>)
 23fc3c8:	4403      	add	r3, r0
 23fc3ca:	681b      	ldr	r3, [r3, #0]
 23fc3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc3ce:	9302      	str	r3, [sp, #8]
 23fc3d0:	bd09      	pop	{r0, r3, pc}
 23fc3d2:	0000      	.short	0x0000
 23fc3d4:	1007ad80 	.word	0x1007ad80
 23fc3d8:	00000010 	.word	0x00000010

023fc3dc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fc3dc:	b509      	push	{r0, r3, lr}
 23fc3de:	4804      	ldr	r0, [pc, #16]	; (23fc3f0 <hal_i2c_is_enabled+0x14>)
 23fc3e0:	6800      	ldr	r0, [r0, #0]
 23fc3e2:	4b04      	ldr	r3, [pc, #16]	; (23fc3f4 <hal_i2c_is_enabled+0x18>)
 23fc3e4:	4403      	add	r3, r0
 23fc3e6:	681b      	ldr	r3, [r3, #0]
 23fc3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc3ea:	9302      	str	r3, [sp, #8]
 23fc3ec:	bd09      	pop	{r0, r3, pc}
 23fc3ee:	0000      	.short	0x0000
 23fc3f0:	1007ad80 	.word	0x1007ad80
 23fc3f4:	00000010 	.word	0x00000010

023fc3f8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fc3f8:	b509      	push	{r0, r3, lr}
 23fc3fa:	4804      	ldr	r0, [pc, #16]	; (23fc40c <hal_i2c_init+0x14>)
 23fc3fc:	6800      	ldr	r0, [r0, #0]
 23fc3fe:	4b04      	ldr	r3, [pc, #16]	; (23fc410 <hal_i2c_init+0x18>)
 23fc400:	4403      	add	r3, r0
 23fc402:	681b      	ldr	r3, [r3, #0]
 23fc404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc406:	9302      	str	r3, [sp, #8]
 23fc408:	bd09      	pop	{r0, r3, pc}
 23fc40a:	0000      	.short	0x0000
 23fc40c:	1007ad80 	.word	0x1007ad80
 23fc410:	00000010 	.word	0x00000010

023fc414 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fc414:	b509      	push	{r0, r3, lr}
 23fc416:	4804      	ldr	r0, [pc, #16]	; (23fc428 <hal_i2c_request_ex+0x14>)
 23fc418:	6800      	ldr	r0, [r0, #0]
 23fc41a:	4b04      	ldr	r3, [pc, #16]	; (23fc42c <hal_i2c_request_ex+0x18>)
 23fc41c:	4403      	add	r3, r0
 23fc41e:	681b      	ldr	r3, [r3, #0]
 23fc420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fc422:	9302      	str	r3, [sp, #8]
 23fc424:	bd09      	pop	{r0, r3, pc}
 23fc426:	0000      	.short	0x0000
 23fc428:	1007ad80 	.word	0x1007ad80
 23fc42c:	00000010 	.word	0x00000010

023fc430 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fc430:	b509      	push	{r0, r3, lr}
 23fc432:	4804      	ldr	r0, [pc, #16]	; (23fc444 <inet_inet_ntop+0x14>)
 23fc434:	6800      	ldr	r0, [r0, #0]
 23fc436:	4b04      	ldr	r3, [pc, #16]	; (23fc448 <inet_inet_ntop+0x18>)
 23fc438:	4403      	add	r3, r0
 23fc43a:	681b      	ldr	r3, [r3, #0]
 23fc43c:	695b      	ldr	r3, [r3, #20]
 23fc43e:	9302      	str	r3, [sp, #8]
 23fc440:	bd09      	pop	{r0, r3, pc}
 23fc442:	0000      	.short	0x0000
 23fc444:	1007ad80 	.word	0x1007ad80
 23fc448:	0000004c 	.word	0x0000004c

023fc44c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc44c:	b509      	push	{r0, r3, lr}
 23fc44e:	4804      	ldr	r0, [pc, #16]	; (23fc460 <netdb_freeaddrinfo+0x14>)
 23fc450:	6800      	ldr	r0, [r0, #0]
 23fc452:	4b04      	ldr	r3, [pc, #16]	; (23fc464 <netdb_freeaddrinfo+0x18>)
 23fc454:	4403      	add	r3, r0
 23fc456:	681b      	ldr	r3, [r3, #0]
 23fc458:	689b      	ldr	r3, [r3, #8]
 23fc45a:	9302      	str	r3, [sp, #8]
 23fc45c:	bd09      	pop	{r0, r3, pc}
 23fc45e:	0000      	.short	0x0000
 23fc460:	1007ad80 	.word	0x1007ad80
 23fc464:	00000050 	.word	0x00000050

023fc468 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc468:	b509      	push	{r0, r3, lr}
 23fc46a:	4804      	ldr	r0, [pc, #16]	; (23fc47c <netdb_getaddrinfo+0x14>)
 23fc46c:	6800      	ldr	r0, [r0, #0]
 23fc46e:	4b04      	ldr	r3, [pc, #16]	; (23fc480 <netdb_getaddrinfo+0x18>)
 23fc470:	4403      	add	r3, r0
 23fc472:	681b      	ldr	r3, [r3, #0]
 23fc474:	68db      	ldr	r3, [r3, #12]
 23fc476:	9302      	str	r3, [sp, #8]
 23fc478:	bd09      	pop	{r0, r3, pc}
 23fc47a:	0000      	.short	0x0000
 23fc47c:	1007ad80 	.word	0x1007ad80
 23fc480:	00000050 	.word	0x00000050

023fc484 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fc484:	b509      	push	{r0, r3, lr}
 23fc486:	4804      	ldr	r0, [pc, #16]	; (23fc498 <hal_spi_begin+0x14>)
 23fc488:	6800      	ldr	r0, [r0, #0]
 23fc48a:	4b04      	ldr	r3, [pc, #16]	; (23fc49c <hal_spi_begin+0x18>)
 23fc48c:	4403      	add	r3, r0
 23fc48e:	681b      	ldr	r3, [r3, #0]
 23fc490:	681b      	ldr	r3, [r3, #0]
 23fc492:	9302      	str	r3, [sp, #8]
 23fc494:	bd09      	pop	{r0, r3, pc}
 23fc496:	0000      	.short	0x0000
 23fc498:	1007ad80 	.word	0x1007ad80
 23fc49c:	00000018 	.word	0x00000018

023fc4a0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fc4a0:	b509      	push	{r0, r3, lr}
 23fc4a2:	4804      	ldr	r0, [pc, #16]	; (23fc4b4 <hal_spi_transfer+0x14>)
 23fc4a4:	6800      	ldr	r0, [r0, #0]
 23fc4a6:	4b04      	ldr	r3, [pc, #16]	; (23fc4b8 <hal_spi_transfer+0x18>)
 23fc4a8:	4403      	add	r3, r0
 23fc4aa:	681b      	ldr	r3, [r3, #0]
 23fc4ac:	695b      	ldr	r3, [r3, #20]
 23fc4ae:	9302      	str	r3, [sp, #8]
 23fc4b0:	bd09      	pop	{r0, r3, pc}
 23fc4b2:	0000      	.short	0x0000
 23fc4b4:	1007ad80 	.word	0x1007ad80
 23fc4b8:	00000018 	.word	0x00000018

023fc4bc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fc4bc:	b509      	push	{r0, r3, lr}
 23fc4be:	4804      	ldr	r0, [pc, #16]	; (23fc4d0 <hal_spi_init+0x14>)
 23fc4c0:	6800      	ldr	r0, [r0, #0]
 23fc4c2:	4b04      	ldr	r3, [pc, #16]	; (23fc4d4 <hal_spi_init+0x18>)
 23fc4c4:	4403      	add	r3, r0
 23fc4c6:	681b      	ldr	r3, [r3, #0]
 23fc4c8:	69db      	ldr	r3, [r3, #28]
 23fc4ca:	9302      	str	r3, [sp, #8]
 23fc4cc:	bd09      	pop	{r0, r3, pc}
 23fc4ce:	0000      	.short	0x0000
 23fc4d0:	1007ad80 	.word	0x1007ad80
 23fc4d4:	00000018 	.word	0x00000018

023fc4d8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fc4d8:	b509      	push	{r0, r3, lr}
 23fc4da:	4804      	ldr	r0, [pc, #16]	; (23fc4ec <hal_spi_is_enabled+0x14>)
 23fc4dc:	6800      	ldr	r0, [r0, #0]
 23fc4de:	4b04      	ldr	r3, [pc, #16]	; (23fc4f0 <hal_spi_is_enabled+0x18>)
 23fc4e0:	4403      	add	r3, r0
 23fc4e2:	681b      	ldr	r3, [r3, #0]
 23fc4e4:	6a1b      	ldr	r3, [r3, #32]
 23fc4e6:	9302      	str	r3, [sp, #8]
 23fc4e8:	bd09      	pop	{r0, r3, pc}
 23fc4ea:	0000      	.short	0x0000
 23fc4ec:	1007ad80 	.word	0x1007ad80
 23fc4f0:	00000018 	.word	0x00000018

023fc4f4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fc4f4:	b509      	push	{r0, r3, lr}
 23fc4f6:	4804      	ldr	r0, [pc, #16]	; (23fc508 <hal_spi_info+0x14>)
 23fc4f8:	6800      	ldr	r0, [r0, #0]
 23fc4fa:	4b04      	ldr	r3, [pc, #16]	; (23fc50c <hal_spi_info+0x18>)
 23fc4fc:	4403      	add	r3, r0
 23fc4fe:	681b      	ldr	r3, [r3, #0]
 23fc500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc502:	9302      	str	r3, [sp, #8]
 23fc504:	bd09      	pop	{r0, r3, pc}
 23fc506:	0000      	.short	0x0000
 23fc508:	1007ad80 	.word	0x1007ad80
 23fc50c:	00000018 	.word	0x00000018

023fc510 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fc510:	b509      	push	{r0, r3, lr}
 23fc512:	4804      	ldr	r0, [pc, #16]	; (23fc524 <hal_spi_set_settings+0x14>)
 23fc514:	6800      	ldr	r0, [r0, #0]
 23fc516:	4b04      	ldr	r3, [pc, #16]	; (23fc528 <hal_spi_set_settings+0x18>)
 23fc518:	4403      	add	r3, r0
 23fc51a:	681b      	ldr	r3, [r3, #0]
 23fc51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc51e:	9302      	str	r3, [sp, #8]
 23fc520:	bd09      	pop	{r0, r3, pc}
 23fc522:	0000      	.short	0x0000
 23fc524:	1007ad80 	.word	0x1007ad80
 23fc528:	00000018 	.word	0x00000018

023fc52c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fc52c:	b509      	push	{r0, r3, lr}
 23fc52e:	4804      	ldr	r0, [pc, #16]	; (23fc540 <hal_spi_acquire+0x14>)
 23fc530:	6800      	ldr	r0, [r0, #0]
 23fc532:	4b04      	ldr	r3, [pc, #16]	; (23fc544 <hal_spi_acquire+0x18>)
 23fc534:	4403      	add	r3, r0
 23fc536:	681b      	ldr	r3, [r3, #0]
 23fc538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc53a:	9302      	str	r3, [sp, #8]
 23fc53c:	bd09      	pop	{r0, r3, pc}
 23fc53e:	0000      	.short	0x0000
 23fc540:	1007ad80 	.word	0x1007ad80
 23fc544:	00000018 	.word	0x00000018

023fc548 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fc548:	b509      	push	{r0, r3, lr}
 23fc54a:	4804      	ldr	r0, [pc, #16]	; (23fc55c <hal_spi_release+0x14>)
 23fc54c:	6800      	ldr	r0, [r0, #0]
 23fc54e:	4b04      	ldr	r3, [pc, #16]	; (23fc560 <hal_spi_release+0x18>)
 23fc550:	4403      	add	r3, r0
 23fc552:	681b      	ldr	r3, [r3, #0]
 23fc554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc556:	9302      	str	r3, [sp, #8]
 23fc558:	bd09      	pop	{r0, r3, pc}
 23fc55a:	0000      	.short	0x0000
 23fc55c:	1007ad80 	.word	0x1007ad80
 23fc560:	00000018 	.word	0x00000018

023fc564 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fc564:	b509      	push	{r0, r3, lr}
 23fc566:	4804      	ldr	r0, [pc, #16]	; (23fc578 <hal_usart_write+0x14>)
 23fc568:	6800      	ldr	r0, [r0, #0]
 23fc56a:	4b04      	ldr	r3, [pc, #16]	; (23fc57c <hal_usart_write+0x18>)
 23fc56c:	4403      	add	r3, r0
 23fc56e:	681b      	ldr	r3, [r3, #0]
 23fc570:	68db      	ldr	r3, [r3, #12]
 23fc572:	9302      	str	r3, [sp, #8]
 23fc574:	bd09      	pop	{r0, r3, pc}
 23fc576:	0000      	.short	0x0000
 23fc578:	1007ad80 	.word	0x1007ad80
 23fc57c:	00000024 	.word	0x00000024

023fc580 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fc580:	b509      	push	{r0, r3, lr}
 23fc582:	4804      	ldr	r0, [pc, #16]	; (23fc594 <hal_usart_available+0x14>)
 23fc584:	6800      	ldr	r0, [r0, #0]
 23fc586:	4b04      	ldr	r3, [pc, #16]	; (23fc598 <hal_usart_available+0x18>)
 23fc588:	4403      	add	r3, r0
 23fc58a:	681b      	ldr	r3, [r3, #0]
 23fc58c:	691b      	ldr	r3, [r3, #16]
 23fc58e:	9302      	str	r3, [sp, #8]
 23fc590:	bd09      	pop	{r0, r3, pc}
 23fc592:	0000      	.short	0x0000
 23fc594:	1007ad80 	.word	0x1007ad80
 23fc598:	00000024 	.word	0x00000024

023fc59c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fc59c:	b509      	push	{r0, r3, lr}
 23fc59e:	4804      	ldr	r0, [pc, #16]	; (23fc5b0 <hal_usart_read+0x14>)
 23fc5a0:	6800      	ldr	r0, [r0, #0]
 23fc5a2:	4b04      	ldr	r3, [pc, #16]	; (23fc5b4 <hal_usart_read+0x18>)
 23fc5a4:	4403      	add	r3, r0
 23fc5a6:	681b      	ldr	r3, [r3, #0]
 23fc5a8:	695b      	ldr	r3, [r3, #20]
 23fc5aa:	9302      	str	r3, [sp, #8]
 23fc5ac:	bd09      	pop	{r0, r3, pc}
 23fc5ae:	0000      	.short	0x0000
 23fc5b0:	1007ad80 	.word	0x1007ad80
 23fc5b4:	00000024 	.word	0x00000024

023fc5b8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fc5b8:	b509      	push	{r0, r3, lr}
 23fc5ba:	4804      	ldr	r0, [pc, #16]	; (23fc5cc <hal_usart_peek+0x14>)
 23fc5bc:	6800      	ldr	r0, [r0, #0]
 23fc5be:	4b04      	ldr	r3, [pc, #16]	; (23fc5d0 <hal_usart_peek+0x18>)
 23fc5c0:	4403      	add	r3, r0
 23fc5c2:	681b      	ldr	r3, [r3, #0]
 23fc5c4:	699b      	ldr	r3, [r3, #24]
 23fc5c6:	9302      	str	r3, [sp, #8]
 23fc5c8:	bd09      	pop	{r0, r3, pc}
 23fc5ca:	0000      	.short	0x0000
 23fc5cc:	1007ad80 	.word	0x1007ad80
 23fc5d0:	00000024 	.word	0x00000024

023fc5d4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fc5d4:	b509      	push	{r0, r3, lr}
 23fc5d6:	4804      	ldr	r0, [pc, #16]	; (23fc5e8 <hal_usart_flush+0x14>)
 23fc5d8:	6800      	ldr	r0, [r0, #0]
 23fc5da:	4b04      	ldr	r3, [pc, #16]	; (23fc5ec <hal_usart_flush+0x18>)
 23fc5dc:	4403      	add	r3, r0
 23fc5de:	681b      	ldr	r3, [r3, #0]
 23fc5e0:	69db      	ldr	r3, [r3, #28]
 23fc5e2:	9302      	str	r3, [sp, #8]
 23fc5e4:	bd09      	pop	{r0, r3, pc}
 23fc5e6:	0000      	.short	0x0000
 23fc5e8:	1007ad80 	.word	0x1007ad80
 23fc5ec:	00000024 	.word	0x00000024

023fc5f0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fc5f0:	b509      	push	{r0, r3, lr}
 23fc5f2:	4804      	ldr	r0, [pc, #16]	; (23fc604 <hal_usart_is_enabled+0x14>)
 23fc5f4:	6800      	ldr	r0, [r0, #0]
 23fc5f6:	4b04      	ldr	r3, [pc, #16]	; (23fc608 <hal_usart_is_enabled+0x18>)
 23fc5f8:	4403      	add	r3, r0
 23fc5fa:	681b      	ldr	r3, [r3, #0]
 23fc5fc:	6a1b      	ldr	r3, [r3, #32]
 23fc5fe:	9302      	str	r3, [sp, #8]
 23fc600:	bd09      	pop	{r0, r3, pc}
 23fc602:	0000      	.short	0x0000
 23fc604:	1007ad80 	.word	0x1007ad80
 23fc608:	00000024 	.word	0x00000024

023fc60c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fc60c:	b509      	push	{r0, r3, lr}
 23fc60e:	4804      	ldr	r0, [pc, #16]	; (23fc620 <hal_usart_available_data_for_write+0x14>)
 23fc610:	6800      	ldr	r0, [r0, #0]
 23fc612:	4b04      	ldr	r3, [pc, #16]	; (23fc624 <hal_usart_available_data_for_write+0x18>)
 23fc614:	4403      	add	r3, r0
 23fc616:	681b      	ldr	r3, [r3, #0]
 23fc618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc61a:	9302      	str	r3, [sp, #8]
 23fc61c:	bd09      	pop	{r0, r3, pc}
 23fc61e:	0000      	.short	0x0000
 23fc620:	1007ad80 	.word	0x1007ad80
 23fc624:	00000024 	.word	0x00000024

023fc628 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fc628:	b509      	push	{r0, r3, lr}
 23fc62a:	4804      	ldr	r0, [pc, #16]	; (23fc63c <hal_usart_init_ex+0x14>)
 23fc62c:	6800      	ldr	r0, [r0, #0]
 23fc62e:	4b04      	ldr	r3, [pc, #16]	; (23fc640 <hal_usart_init_ex+0x18>)
 23fc630:	4403      	add	r3, r0
 23fc632:	681b      	ldr	r3, [r3, #0]
 23fc634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc636:	9302      	str	r3, [sp, #8]
 23fc638:	bd09      	pop	{r0, r3, pc}
 23fc63a:	0000      	.short	0x0000
 23fc63c:	1007ad80 	.word	0x1007ad80
 23fc640:	00000024 	.word	0x00000024

023fc644 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fc644:	b509      	push	{r0, r3, lr}
 23fc646:	4804      	ldr	r0, [pc, #16]	; (23fc658 <HAL_USB_USART_Init+0x14>)
 23fc648:	6800      	ldr	r0, [r0, #0]
 23fc64a:	4b04      	ldr	r3, [pc, #16]	; (23fc65c <HAL_USB_USART_Init+0x18>)
 23fc64c:	4403      	add	r3, r0
 23fc64e:	681b      	ldr	r3, [r3, #0]
 23fc650:	681b      	ldr	r3, [r3, #0]
 23fc652:	9302      	str	r3, [sp, #8]
 23fc654:	bd09      	pop	{r0, r3, pc}
 23fc656:	0000      	.short	0x0000
 23fc658:	1007ad80 	.word	0x1007ad80
 23fc65c:	00000034 	.word	0x00000034

023fc660 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fc660:	b509      	push	{r0, r3, lr}
 23fc662:	4804      	ldr	r0, [pc, #16]	; (23fc674 <HAL_USB_USART_Begin+0x14>)
 23fc664:	6800      	ldr	r0, [r0, #0]
 23fc666:	4b04      	ldr	r3, [pc, #16]	; (23fc678 <HAL_USB_USART_Begin+0x18>)
 23fc668:	4403      	add	r3, r0
 23fc66a:	681b      	ldr	r3, [r3, #0]
 23fc66c:	685b      	ldr	r3, [r3, #4]
 23fc66e:	9302      	str	r3, [sp, #8]
 23fc670:	bd09      	pop	{r0, r3, pc}
 23fc672:	0000      	.short	0x0000
 23fc674:	1007ad80 	.word	0x1007ad80
 23fc678:	00000034 	.word	0x00000034

023fc67c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fc67c:	b509      	push	{r0, r3, lr}
 23fc67e:	4804      	ldr	r0, [pc, #16]	; (23fc690 <HAL_USB_USART_Available_Data+0x14>)
 23fc680:	6800      	ldr	r0, [r0, #0]
 23fc682:	4b04      	ldr	r3, [pc, #16]	; (23fc694 <HAL_USB_USART_Available_Data+0x18>)
 23fc684:	4403      	add	r3, r0
 23fc686:	681b      	ldr	r3, [r3, #0]
 23fc688:	691b      	ldr	r3, [r3, #16]
 23fc68a:	9302      	str	r3, [sp, #8]
 23fc68c:	bd09      	pop	{r0, r3, pc}
 23fc68e:	0000      	.short	0x0000
 23fc690:	1007ad80 	.word	0x1007ad80
 23fc694:	00000034 	.word	0x00000034

023fc698 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fc698:	b509      	push	{r0, r3, lr}
 23fc69a:	4804      	ldr	r0, [pc, #16]	; (23fc6ac <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fc69c:	6800      	ldr	r0, [r0, #0]
 23fc69e:	4b04      	ldr	r3, [pc, #16]	; (23fc6b0 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fc6a0:	4403      	add	r3, r0
 23fc6a2:	681b      	ldr	r3, [r3, #0]
 23fc6a4:	695b      	ldr	r3, [r3, #20]
 23fc6a6:	9302      	str	r3, [sp, #8]
 23fc6a8:	bd09      	pop	{r0, r3, pc}
 23fc6aa:	0000      	.short	0x0000
 23fc6ac:	1007ad80 	.word	0x1007ad80
 23fc6b0:	00000034 	.word	0x00000034

023fc6b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc6b4:	b509      	push	{r0, r3, lr}
 23fc6b6:	4804      	ldr	r0, [pc, #16]	; (23fc6c8 <HAL_USB_USART_Receive_Data+0x14>)
 23fc6b8:	6800      	ldr	r0, [r0, #0]
 23fc6ba:	4b04      	ldr	r3, [pc, #16]	; (23fc6cc <HAL_USB_USART_Receive_Data+0x18>)
 23fc6bc:	4403      	add	r3, r0
 23fc6be:	681b      	ldr	r3, [r3, #0]
 23fc6c0:	699b      	ldr	r3, [r3, #24]
 23fc6c2:	9302      	str	r3, [sp, #8]
 23fc6c4:	bd09      	pop	{r0, r3, pc}
 23fc6c6:	0000      	.short	0x0000
 23fc6c8:	1007ad80 	.word	0x1007ad80
 23fc6cc:	00000034 	.word	0x00000034

023fc6d0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc6d0:	b509      	push	{r0, r3, lr}
 23fc6d2:	4804      	ldr	r0, [pc, #16]	; (23fc6e4 <HAL_USB_USART_Send_Data+0x14>)
 23fc6d4:	6800      	ldr	r0, [r0, #0]
 23fc6d6:	4b04      	ldr	r3, [pc, #16]	; (23fc6e8 <HAL_USB_USART_Send_Data+0x18>)
 23fc6d8:	4403      	add	r3, r0
 23fc6da:	681b      	ldr	r3, [r3, #0]
 23fc6dc:	69db      	ldr	r3, [r3, #28]
 23fc6de:	9302      	str	r3, [sp, #8]
 23fc6e0:	bd09      	pop	{r0, r3, pc}
 23fc6e2:	0000      	.short	0x0000
 23fc6e4:	1007ad80 	.word	0x1007ad80
 23fc6e8:	00000034 	.word	0x00000034

023fc6ec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fc6ec:	b509      	push	{r0, r3, lr}
 23fc6ee:	4804      	ldr	r0, [pc, #16]	; (23fc700 <HAL_USB_USART_Flush_Data+0x14>)
 23fc6f0:	6800      	ldr	r0, [r0, #0]
 23fc6f2:	4b04      	ldr	r3, [pc, #16]	; (23fc704 <HAL_USB_USART_Flush_Data+0x18>)
 23fc6f4:	4403      	add	r3, r0
 23fc6f6:	681b      	ldr	r3, [r3, #0]
 23fc6f8:	6a1b      	ldr	r3, [r3, #32]
 23fc6fa:	9302      	str	r3, [sp, #8]
 23fc6fc:	bd09      	pop	{r0, r3, pc}
 23fc6fe:	0000      	.short	0x0000
 23fc700:	1007ad80 	.word	0x1007ad80
 23fc704:	00000034 	.word	0x00000034

023fc708 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 23fc708:	b509      	push	{r0, r3, lr}
 23fc70a:	4804      	ldr	r0, [pc, #16]	; (23fc71c <HAL_USB_USART_Is_Enabled+0x14>)
 23fc70c:	6800      	ldr	r0, [r0, #0]
 23fc70e:	4b04      	ldr	r3, [pc, #16]	; (23fc720 <HAL_USB_USART_Is_Enabled+0x18>)
 23fc710:	4403      	add	r3, r0
 23fc712:	681b      	ldr	r3, [r3, #0]
 23fc714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc716:	9302      	str	r3, [sp, #8]
 23fc718:	bd09      	pop	{r0, r3, pc}
 23fc71a:	0000      	.short	0x0000
 23fc71c:	1007ad80 	.word	0x1007ad80
 23fc720:	00000034 	.word	0x00000034

023fc724 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fc724:	b509      	push	{r0, r3, lr}
 23fc726:	4804      	ldr	r0, [pc, #16]	; (23fc738 <panic_+0x14>)
 23fc728:	6800      	ldr	r0, [r0, #0]
 23fc72a:	4b04      	ldr	r3, [pc, #16]	; (23fc73c <panic_+0x18>)
 23fc72c:	4403      	add	r3, r0
 23fc72e:	681b      	ldr	r3, [r3, #0]
 23fc730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc732:	9302      	str	r3, [sp, #8]
 23fc734:	bd09      	pop	{r0, r3, pc}
 23fc736:	0000      	.short	0x0000
 23fc738:	1007ad80 	.word	0x1007ad80
 23fc73c:	00000048 	.word	0x00000048

023fc740 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fc740:	b509      	push	{r0, r3, lr}
 23fc742:	4804      	ldr	r0, [pc, #16]	; (23fc754 <set_system_mode+0x14>)
 23fc744:	6800      	ldr	r0, [r0, #0]
 23fc746:	4b04      	ldr	r3, [pc, #16]	; (23fc758 <set_system_mode+0x18>)
 23fc748:	4403      	add	r3, r0
 23fc74a:	681b      	ldr	r3, [r3, #0]
 23fc74c:	685b      	ldr	r3, [r3, #4]
 23fc74e:	9302      	str	r3, [sp, #8]
 23fc750:	bd09      	pop	{r0, r3, pc}
 23fc752:	0000      	.short	0x0000
 23fc754:	1007ad80 	.word	0x1007ad80
 23fc758:	00000008 	.word	0x00000008

023fc75c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fc75c:	b509      	push	{r0, r3, lr}
 23fc75e:	4804      	ldr	r0, [pc, #16]	; (23fc770 <system_delay_ms+0x14>)
 23fc760:	6800      	ldr	r0, [r0, #0]
 23fc762:	4b04      	ldr	r3, [pc, #16]	; (23fc774 <system_delay_ms+0x18>)
 23fc764:	4403      	add	r3, r0
 23fc766:	681b      	ldr	r3, [r3, #0]
 23fc768:	695b      	ldr	r3, [r3, #20]
 23fc76a:	9302      	str	r3, [sp, #8]
 23fc76c:	bd09      	pop	{r0, r3, pc}
 23fc76e:	0000      	.short	0x0000
 23fc770:	1007ad80 	.word	0x1007ad80
 23fc774:	00000008 	.word	0x00000008

023fc778 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fc778:	b509      	push	{r0, r3, lr}
 23fc77a:	4804      	ldr	r0, [pc, #16]	; (23fc78c <application_thread_current+0x14>)
 23fc77c:	6800      	ldr	r0, [r0, #0]
 23fc77e:	4b04      	ldr	r3, [pc, #16]	; (23fc790 <application_thread_current+0x18>)
 23fc780:	4403      	add	r3, r0
 23fc782:	681b      	ldr	r3, [r3, #0]
 23fc784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc786:	9302      	str	r3, [sp, #8]
 23fc788:	bd09      	pop	{r0, r3, pc}
 23fc78a:	0000      	.short	0x0000
 23fc78c:	1007ad80 	.word	0x1007ad80
 23fc790:	00000008 	.word	0x00000008

023fc794 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fc794:	b509      	push	{r0, r3, lr}
 23fc796:	4804      	ldr	r0, [pc, #16]	; (23fc7a8 <application_thread_invoke+0x14>)
 23fc798:	6800      	ldr	r0, [r0, #0]
 23fc79a:	4b04      	ldr	r3, [pc, #16]	; (23fc7ac <application_thread_invoke+0x18>)
 23fc79c:	4403      	add	r3, r0
 23fc79e:	681b      	ldr	r3, [r3, #0]
 23fc7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc7a2:	9302      	str	r3, [sp, #8]
 23fc7a4:	bd09      	pop	{r0, r3, pc}
 23fc7a6:	0000      	.short	0x0000
 23fc7a8:	1007ad80 	.word	0x1007ad80
 23fc7ac:	00000008 	.word	0x00000008

023fc7b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fc7b0:	b509      	push	{r0, r3, lr}
 23fc7b2:	4804      	ldr	r0, [pc, #16]	; (23fc7c4 <system_ctrl_set_app_request_handler+0x14>)
 23fc7b4:	6800      	ldr	r0, [r0, #0]
 23fc7b6:	4b04      	ldr	r3, [pc, #16]	; (23fc7c8 <system_ctrl_set_app_request_handler+0x18>)
 23fc7b8:	4403      	add	r3, r0
 23fc7ba:	681b      	ldr	r3, [r3, #0]
 23fc7bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fc7c0:	9302      	str	r3, [sp, #8]
 23fc7c2:	bd09      	pop	{r0, r3, pc}
 23fc7c4:	1007ad80 	.word	0x1007ad80
 23fc7c8:	00000008 	.word	0x00000008

023fc7cc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fc7cc:	b509      	push	{r0, r3, lr}
 23fc7ce:	4804      	ldr	r0, [pc, #16]	; (23fc7e0 <system_ctrl_set_result+0x14>)
 23fc7d0:	6800      	ldr	r0, [r0, #0]
 23fc7d2:	4b04      	ldr	r3, [pc, #16]	; (23fc7e4 <system_ctrl_set_result+0x18>)
 23fc7d4:	4403      	add	r3, r0
 23fc7d6:	681b      	ldr	r3, [r3, #0]
 23fc7d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fc7dc:	9302      	str	r3, [sp, #8]
 23fc7de:	bd09      	pop	{r0, r3, pc}
 23fc7e0:	1007ad80 	.word	0x1007ad80
 23fc7e4:	00000008 	.word	0x00000008

023fc7e8 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fc7e8:	b509      	push	{r0, r3, lr}
 23fc7ea:	4804      	ldr	r0, [pc, #16]	; (23fc7fc <spark_cloud_flag_connected+0x14>)
 23fc7ec:	6800      	ldr	r0, [r0, #0]
 23fc7ee:	4b04      	ldr	r3, [pc, #16]	; (23fc800 <spark_cloud_flag_connected+0x18>)
 23fc7f0:	4403      	add	r3, r0
 23fc7f2:	681b      	ldr	r3, [r3, #0]
 23fc7f4:	695b      	ldr	r3, [r3, #20]
 23fc7f6:	9302      	str	r3, [sp, #8]
 23fc7f8:	bd09      	pop	{r0, r3, pc}
 23fc7fa:	0000      	.short	0x0000
 23fc7fc:	1007ad80 	.word	0x1007ad80
 23fc800:	0000002c 	.word	0x0000002c

023fc804 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fc804:	b509      	push	{r0, r3, lr}
 23fc806:	4804      	ldr	r0, [pc, #16]	; (23fc818 <spark_send_event+0x14>)
 23fc808:	6800      	ldr	r0, [r0, #0]
 23fc80a:	4b04      	ldr	r3, [pc, #16]	; (23fc81c <spark_send_event+0x18>)
 23fc80c:	4403      	add	r3, r0
 23fc80e:	681b      	ldr	r3, [r3, #0]
 23fc810:	6a1b      	ldr	r3, [r3, #32]
 23fc812:	9302      	str	r3, [sp, #8]
 23fc814:	bd09      	pop	{r0, r3, pc}
 23fc816:	0000      	.short	0x0000
 23fc818:	1007ad80 	.word	0x1007ad80
 23fc81c:	0000002c 	.word	0x0000002c

023fc820 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fc820:	b509      	push	{r0, r3, lr}
 23fc822:	4804      	ldr	r0, [pc, #16]	; (23fc834 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fc824:	6800      	ldr	r0, [r0, #0]
 23fc826:	4b04      	ldr	r3, [pc, #16]	; (23fc838 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fc828:	4403      	add	r3, r0
 23fc82a:	681b      	ldr	r3, [r3, #0]
 23fc82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc82e:	9302      	str	r3, [sp, #8]
 23fc830:	bd09      	pop	{r0, r3, pc}
 23fc832:	0000      	.short	0x0000
 23fc834:	1007ad80 	.word	0x1007ad80
 23fc838:	0000002c 	.word	0x0000002c

023fc83c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc83c:	b509      	push	{r0, r3, lr}
 23fc83e:	4804      	ldr	r0, [pc, #16]	; (23fc850 <network_connect+0x14>)
 23fc840:	6800      	ldr	r0, [r0, #0]
 23fc842:	4b04      	ldr	r3, [pc, #16]	; (23fc854 <network_connect+0x18>)
 23fc844:	4403      	add	r3, r0
 23fc846:	681b      	ldr	r3, [r3, #0]
 23fc848:	685b      	ldr	r3, [r3, #4]
 23fc84a:	9302      	str	r3, [sp, #8]
 23fc84c:	bd09      	pop	{r0, r3, pc}
 23fc84e:	0000      	.short	0x0000
 23fc850:	1007ad80 	.word	0x1007ad80
 23fc854:	00000028 	.word	0x00000028

023fc858 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fc858:	b509      	push	{r0, r3, lr}
 23fc85a:	4804      	ldr	r0, [pc, #16]	; (23fc86c <network_connecting+0x14>)
 23fc85c:	6800      	ldr	r0, [r0, #0]
 23fc85e:	4b04      	ldr	r3, [pc, #16]	; (23fc870 <network_connecting+0x18>)
 23fc860:	4403      	add	r3, r0
 23fc862:	681b      	ldr	r3, [r3, #0]
 23fc864:	689b      	ldr	r3, [r3, #8]
 23fc866:	9302      	str	r3, [sp, #8]
 23fc868:	bd09      	pop	{r0, r3, pc}
 23fc86a:	0000      	.short	0x0000
 23fc86c:	1007ad80 	.word	0x1007ad80
 23fc870:	00000028 	.word	0x00000028

023fc874 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fc874:	b509      	push	{r0, r3, lr}
 23fc876:	4804      	ldr	r0, [pc, #16]	; (23fc888 <network_disconnect+0x14>)
 23fc878:	6800      	ldr	r0, [r0, #0]
 23fc87a:	4b04      	ldr	r3, [pc, #16]	; (23fc88c <network_disconnect+0x18>)
 23fc87c:	4403      	add	r3, r0
 23fc87e:	681b      	ldr	r3, [r3, #0]
 23fc880:	68db      	ldr	r3, [r3, #12]
 23fc882:	9302      	str	r3, [sp, #8]
 23fc884:	bd09      	pop	{r0, r3, pc}
 23fc886:	0000      	.short	0x0000
 23fc888:	1007ad80 	.word	0x1007ad80
 23fc88c:	00000028 	.word	0x00000028

023fc890 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fc890:	b509      	push	{r0, r3, lr}
 23fc892:	4804      	ldr	r0, [pc, #16]	; (23fc8a4 <network_ready+0x14>)
 23fc894:	6800      	ldr	r0, [r0, #0]
 23fc896:	4b04      	ldr	r3, [pc, #16]	; (23fc8a8 <network_ready+0x18>)
 23fc898:	4403      	add	r3, r0
 23fc89a:	681b      	ldr	r3, [r3, #0]
 23fc89c:	691b      	ldr	r3, [r3, #16]
 23fc89e:	9302      	str	r3, [sp, #8]
 23fc8a0:	bd09      	pop	{r0, r3, pc}
 23fc8a2:	0000      	.short	0x0000
 23fc8a4:	1007ad80 	.word	0x1007ad80
 23fc8a8:	00000028 	.word	0x00000028

023fc8ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc8ac:	b509      	push	{r0, r3, lr}
 23fc8ae:	4804      	ldr	r0, [pc, #16]	; (23fc8c0 <network_on+0x14>)
 23fc8b0:	6800      	ldr	r0, [r0, #0]
 23fc8b2:	4b04      	ldr	r3, [pc, #16]	; (23fc8c4 <network_on+0x18>)
 23fc8b4:	4403      	add	r3, r0
 23fc8b6:	681b      	ldr	r3, [r3, #0]
 23fc8b8:	695b      	ldr	r3, [r3, #20]
 23fc8ba:	9302      	str	r3, [sp, #8]
 23fc8bc:	bd09      	pop	{r0, r3, pc}
 23fc8be:	0000      	.short	0x0000
 23fc8c0:	1007ad80 	.word	0x1007ad80
 23fc8c4:	00000028 	.word	0x00000028

023fc8c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc8c8:	b509      	push	{r0, r3, lr}
 23fc8ca:	4804      	ldr	r0, [pc, #16]	; (23fc8dc <network_off+0x14>)
 23fc8cc:	6800      	ldr	r0, [r0, #0]
 23fc8ce:	4b04      	ldr	r3, [pc, #16]	; (23fc8e0 <network_off+0x18>)
 23fc8d0:	4403      	add	r3, r0
 23fc8d2:	681b      	ldr	r3, [r3, #0]
 23fc8d4:	699b      	ldr	r3, [r3, #24]
 23fc8d6:	9302      	str	r3, [sp, #8]
 23fc8d8:	bd09      	pop	{r0, r3, pc}
 23fc8da:	0000      	.short	0x0000
 23fc8dc:	1007ad80 	.word	0x1007ad80
 23fc8e0:	00000028 	.word	0x00000028

023fc8e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fc8e4:	b509      	push	{r0, r3, lr}
 23fc8e6:	4804      	ldr	r0, [pc, #16]	; (23fc8f8 <network_listen+0x14>)
 23fc8e8:	6800      	ldr	r0, [r0, #0]
 23fc8ea:	4b04      	ldr	r3, [pc, #16]	; (23fc8fc <network_listen+0x18>)
 23fc8ec:	4403      	add	r3, r0
 23fc8ee:	681b      	ldr	r3, [r3, #0]
 23fc8f0:	69db      	ldr	r3, [r3, #28]
 23fc8f2:	9302      	str	r3, [sp, #8]
 23fc8f4:	bd09      	pop	{r0, r3, pc}
 23fc8f6:	0000      	.short	0x0000
 23fc8f8:	1007ad80 	.word	0x1007ad80
 23fc8fc:	00000028 	.word	0x00000028

023fc900 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fc900:	b509      	push	{r0, r3, lr}
 23fc902:	4804      	ldr	r0, [pc, #16]	; (23fc914 <network_listening+0x14>)
 23fc904:	6800      	ldr	r0, [r0, #0]
 23fc906:	4b04      	ldr	r3, [pc, #16]	; (23fc918 <network_listening+0x18>)
 23fc908:	4403      	add	r3, r0
 23fc90a:	681b      	ldr	r3, [r3, #0]
 23fc90c:	6a1b      	ldr	r3, [r3, #32]
 23fc90e:	9302      	str	r3, [sp, #8]
 23fc910:	bd09      	pop	{r0, r3, pc}
 23fc912:	0000      	.short	0x0000
 23fc914:	1007ad80 	.word	0x1007ad80
 23fc918:	00000028 	.word	0x00000028

023fc91c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fc91c:	b509      	push	{r0, r3, lr}
 23fc91e:	4804      	ldr	r0, [pc, #16]	; (23fc930 <network_set_listen_timeout+0x14>)
 23fc920:	6800      	ldr	r0, [r0, #0]
 23fc922:	4b04      	ldr	r3, [pc, #16]	; (23fc934 <network_set_listen_timeout+0x18>)
 23fc924:	4403      	add	r3, r0
 23fc926:	681b      	ldr	r3, [r3, #0]
 23fc928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc92a:	9302      	str	r3, [sp, #8]
 23fc92c:	bd09      	pop	{r0, r3, pc}
 23fc92e:	0000      	.short	0x0000
 23fc930:	1007ad80 	.word	0x1007ad80
 23fc934:	00000028 	.word	0x00000028

023fc938 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fc938:	b509      	push	{r0, r3, lr}
 23fc93a:	4804      	ldr	r0, [pc, #16]	; (23fc94c <network_get_listen_timeout+0x14>)
 23fc93c:	6800      	ldr	r0, [r0, #0]
 23fc93e:	4b04      	ldr	r3, [pc, #16]	; (23fc950 <network_get_listen_timeout+0x18>)
 23fc940:	4403      	add	r3, r0
 23fc942:	681b      	ldr	r3, [r3, #0]
 23fc944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc946:	9302      	str	r3, [sp, #8]
 23fc948:	bd09      	pop	{r0, r3, pc}
 23fc94a:	0000      	.short	0x0000
 23fc94c:	1007ad80 	.word	0x1007ad80
 23fc950:	00000028 	.word	0x00000028

023fc954 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fc954:	b509      	push	{r0, r3, lr}
 23fc956:	4804      	ldr	r0, [pc, #16]	; (23fc968 <network_is_on+0x14>)
 23fc958:	6800      	ldr	r0, [r0, #0]
 23fc95a:	4b04      	ldr	r3, [pc, #16]	; (23fc96c <network_is_on+0x18>)
 23fc95c:	4403      	add	r3, r0
 23fc95e:	681b      	ldr	r3, [r3, #0]
 23fc960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc962:	9302      	str	r3, [sp, #8]
 23fc964:	bd09      	pop	{r0, r3, pc}
 23fc966:	0000      	.short	0x0000
 23fc968:	1007ad80 	.word	0x1007ad80
 23fc96c:	00000028 	.word	0x00000028

023fc970 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fc970:	b509      	push	{r0, r3, lr}
 23fc972:	4804      	ldr	r0, [pc, #16]	; (23fc984 <network_is_off+0x14>)
 23fc974:	6800      	ldr	r0, [r0, #0]
 23fc976:	4b04      	ldr	r3, [pc, #16]	; (23fc988 <network_is_off+0x18>)
 23fc978:	4403      	add	r3, r0
 23fc97a:	681b      	ldr	r3, [r3, #0]
 23fc97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc97e:	9302      	str	r3, [sp, #8]
 23fc980:	bd09      	pop	{r0, r3, pc}
 23fc982:	0000      	.short	0x0000
 23fc984:	1007ad80 	.word	0x1007ad80
 23fc988:	00000028 	.word	0x00000028

023fc98c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fc98c:	b509      	push	{r0, r3, lr}
 23fc98e:	4804      	ldr	r0, [pc, #16]	; (23fc9a0 <malloc+0x14>)
 23fc990:	6800      	ldr	r0, [r0, #0]
 23fc992:	4b04      	ldr	r3, [pc, #16]	; (23fc9a4 <malloc+0x18>)
 23fc994:	4403      	add	r3, r0
 23fc996:	681b      	ldr	r3, [r3, #0]
 23fc998:	681b      	ldr	r3, [r3, #0]
 23fc99a:	9302      	str	r3, [sp, #8]
 23fc99c:	bd09      	pop	{r0, r3, pc}
 23fc99e:	0000      	.short	0x0000
 23fc9a0:	1007ad80 	.word	0x1007ad80
 23fc9a4:	00000004 	.word	0x00000004

023fc9a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fc9a8:	b509      	push	{r0, r3, lr}
 23fc9aa:	4804      	ldr	r0, [pc, #16]	; (23fc9bc <free+0x14>)
 23fc9ac:	6800      	ldr	r0, [r0, #0]
 23fc9ae:	4b04      	ldr	r3, [pc, #16]	; (23fc9c0 <free+0x18>)
 23fc9b0:	4403      	add	r3, r0
 23fc9b2:	681b      	ldr	r3, [r3, #0]
 23fc9b4:	685b      	ldr	r3, [r3, #4]
 23fc9b6:	9302      	str	r3, [sp, #8]
 23fc9b8:	bd09      	pop	{r0, r3, pc}
 23fc9ba:	0000      	.short	0x0000
 23fc9bc:	1007ad80 	.word	0x1007ad80
 23fc9c0:	00000004 	.word	0x00000004

023fc9c4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fc9c4:	b509      	push	{r0, r3, lr}
 23fc9c6:	4804      	ldr	r0, [pc, #16]	; (23fc9d8 <abort+0x14>)
 23fc9c8:	6800      	ldr	r0, [r0, #0]
 23fc9ca:	4b04      	ldr	r3, [pc, #16]	; (23fc9dc <abort+0x18>)
 23fc9cc:	4403      	add	r3, r0
 23fc9ce:	681b      	ldr	r3, [r3, #0]
 23fc9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc9d2:	9302      	str	r3, [sp, #8]
 23fc9d4:	bd09      	pop	{r0, r3, pc}
 23fc9d6:	0000      	.short	0x0000
 23fc9d8:	1007ad80 	.word	0x1007ad80
 23fc9dc:	00000004 	.word	0x00000004

023fc9e0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fc9e0:	b509      	push	{r0, r3, lr}
 23fc9e2:	4804      	ldr	r0, [pc, #16]	; (23fc9f4 <_malloc_r+0x14>)
 23fc9e4:	6800      	ldr	r0, [r0, #0]
 23fc9e6:	4b04      	ldr	r3, [pc, #16]	; (23fc9f8 <_malloc_r+0x18>)
 23fc9e8:	4403      	add	r3, r0
 23fc9ea:	681b      	ldr	r3, [r3, #0]
 23fc9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc9ee:	9302      	str	r3, [sp, #8]
 23fc9f0:	bd09      	pop	{r0, r3, pc}
 23fc9f2:	0000      	.short	0x0000
 23fc9f4:	1007ad80 	.word	0x1007ad80
 23fc9f8:	00000004 	.word	0x00000004

023fc9fc <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fc9fc:	b509      	push	{r0, r3, lr}
 23fc9fe:	4804      	ldr	r0, [pc, #16]	; (23fca10 <__assert_func+0x14>)
 23fca00:	6800      	ldr	r0, [r0, #0]
 23fca02:	4b04      	ldr	r3, [pc, #16]	; (23fca14 <__assert_func+0x18>)
 23fca04:	4403      	add	r3, r0
 23fca06:	681b      	ldr	r3, [r3, #0]
 23fca08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fca0a:	9302      	str	r3, [sp, #8]
 23fca0c:	bd09      	pop	{r0, r3, pc}
 23fca0e:	0000      	.short	0x0000
 23fca10:	1007ad80 	.word	0x1007ad80
 23fca14:	00000004 	.word	0x00000004

023fca18 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fca18:	b509      	push	{r0, r3, lr}
 23fca1a:	4804      	ldr	r0, [pc, #16]	; (23fca2c <newlib_impure_ptr_callback+0x14>)
 23fca1c:	6800      	ldr	r0, [r0, #0]
 23fca1e:	4b04      	ldr	r3, [pc, #16]	; (23fca30 <newlib_impure_ptr_callback+0x18>)
 23fca20:	4403      	add	r3, r0
 23fca22:	681b      	ldr	r3, [r3, #0]
 23fca24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fca26:	9302      	str	r3, [sp, #8]
 23fca28:	bd09      	pop	{r0, r3, pc}
 23fca2a:	0000      	.short	0x0000
 23fca2c:	1007ad80 	.word	0x1007ad80
 23fca30:	00000004 	.word	0x00000004

023fca34 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fca34:	2100      	movs	r1, #0
 23fca36:	f7ff be91 	b.w	23fc75c <system_delay_ms>

023fca3a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fca3a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fca3c:	6883      	ldr	r3, [r0, #8]
 23fca3e:	4604      	mov	r4, r0
 23fca40:	b90b      	cbnz	r3, 23fca46 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fca42:	f001 f96d 	bl	23fdd20 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fca46:	68c3      	ldr	r3, [r0, #12]
 23fca48:	4798      	blx	r3
      if (_M_manager)
 23fca4a:	68a3      	ldr	r3, [r4, #8]
 23fca4c:	b11b      	cbz	r3, 23fca56 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fca4e:	2203      	movs	r2, #3
 23fca50:	4621      	mov	r1, r4
 23fca52:	4620      	mov	r0, r4
 23fca54:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fca56:	4620      	mov	r0, r4
}
 23fca58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fca5c:	2110      	movs	r1, #16
 23fca5e:	f7fd bdf4 	b.w	23fa64a <_ZdlPvj>

023fca62 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fca62:	b510      	push	{r4, lr}
      if (_M_manager)
 23fca64:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fca66:	4604      	mov	r4, r0
      if (_M_manager)
 23fca68:	b113      	cbz	r3, 23fca70 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fca6a:	2203      	movs	r2, #3
 23fca6c:	4601      	mov	r1, r0
 23fca6e:	4798      	blx	r3
    }
 23fca70:	4620      	mov	r0, r4
 23fca72:	bd10      	pop	{r4, pc}

023fca74 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fca74:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fca76:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fca78:	460b      	mov	r3, r1
 23fca7a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fca7c:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fca80:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fca84:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fca88:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fca8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fca90:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fca94:	b002      	add	sp, #8
 23fca96:	bd10      	pop	{r4, pc}

023fca98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fca98:	2300      	movs	r3, #0
 23fca9a:	4802      	ldr	r0, [pc, #8]	; (23fcaa4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fca9c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fca9e:	f7ff bb69 	b.w	23fc174 <os_mutex_recursive_create>
 23fcaa2:	bf00      	nop
 23fcaa4:	1007ae8c 	.word	0x1007ae8c

023fcaa8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fcaa8:	4770      	bx	lr

023fcaaa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fcaaa:	2000      	movs	r0, #0
 23fcaac:	4770      	bx	lr

023fcaae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fcaae:	b510      	push	{r4, lr}
 23fcab0:	4604      	mov	r4, r0
 23fcab2:	2110      	movs	r1, #16
 23fcab4:	f7fd fdc9 	bl	23fa64a <_ZdlPvj>
 23fcab8:	4620      	mov	r0, r4
 23fcaba:	bd10      	pop	{r4, pc}

023fcabc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fcabc:	b508      	push	{r3, lr}
      { delete this; }
 23fcabe:	f7ff fff6 	bl	23fcaae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fcac2:	bd08      	pop	{r3, pc}

023fcac4 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fcac4:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fcac6:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fcac8:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fcacc:	6002      	str	r2, [r0, #0]
 23fcace:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcad0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcad2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcad4:	680c      	ldr	r4, [r1, #0]
 23fcad6:	8085      	strh	r5, [r0, #4]
 23fcad8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcada:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fcadc:	bd30      	pop	{r4, r5, pc}

023fcade <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fcade:	b510      	push	{r4, lr}
 23fcae0:	4604      	mov	r4, r0
    free((void*)msg_);
 23fcae2:	6800      	ldr	r0, [r0, #0]
 23fcae4:	f7ff ff60 	bl	23fc9a8 <free>
}
 23fcae8:	4620      	mov	r0, r4
 23fcaea:	bd10      	pop	{r4, pc}

023fcaec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fcaec:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fcaee:	68c4      	ldr	r4, [r0, #12]
 23fcaf0:	b314      	cbz	r4, 23fcb38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fcaf2:	7823      	ldrb	r3, [r4, #0]
 23fcaf4:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fcaf6:	2b02      	cmp	r3, #2
 23fcaf8:	d103      	bne.n	23fcb02 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fcafa:	f104 000c 	add.w	r0, r4, #12
 23fcafe:	f7ff ffee 	bl	23fcade <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fcb02:	1d23      	adds	r3, r4, #4
 23fcb04:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fcb06:	b135      	cbz	r5, 23fcb16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fcb08:	4628      	mov	r0, r5
 23fcb0a:	f7ff ffaa 	bl	23fca62 <_ZNSt14_Function_baseD1Ev>
 23fcb0e:	2110      	movs	r1, #16
 23fcb10:	4628      	mov	r0, r5
 23fcb12:	f7fd fd9a 	bl	23fa64a <_ZdlPvj>
 23fcb16:	f104 0308 	add.w	r3, r4, #8
 23fcb1a:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fcb1c:	b135      	cbz	r5, 23fcb2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fcb1e:	4628      	mov	r0, r5
 23fcb20:	f7ff ff9f 	bl	23fca62 <_ZNSt14_Function_baseD1Ev>
 23fcb24:	2110      	movs	r1, #16
 23fcb26:	4628      	mov	r0, r5
 23fcb28:	f7fd fd8f 	bl	23fa64a <_ZdlPvj>
 23fcb2c:	4620      	mov	r0, r4
 23fcb2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fcb32:	2114      	movs	r1, #20
 23fcb34:	f7fd bd89 	b.w	23fa64a <_ZdlPvj>
 23fcb38:	bd38      	pop	{r3, r4, r5, pc}

023fcb3a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcb3a:	680b      	ldr	r3, [r1, #0]
 23fcb3c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fcb3e:	684b      	ldr	r3, [r1, #4]
 23fcb40:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fcb42:	b113      	cbz	r3, 23fcb4a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fcb44:	685a      	ldr	r2, [r3, #4]
 23fcb46:	3201      	adds	r2, #1
 23fcb48:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcb4a:	4770      	bx	lr

023fcb4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fcb4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcb4e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fcb50:	4668      	mov	r0, sp
 23fcb52:	460d      	mov	r5, r1
 23fcb54:	f7ff fff1 	bl	23fcb3a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fcb58:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fcb5a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fcb5c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fcb5e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fcb60:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fcb62:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fcb64:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23fcb66:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fcb68:	f7fd fe50 	bl	23fa80c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fcb6c:	b135      	cbz	r5, 23fcb7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fcb6e:	1d28      	adds	r0, r5, #4
 23fcb70:	f7fd fe4c 	bl	23fa80c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcb74:	2108      	movs	r1, #8
 23fcb76:	4628      	mov	r0, r5
 23fcb78:	f7fd fd67 	bl	23fa64a <_ZdlPvj>
        return p;
    }
 23fcb7c:	4620      	mov	r0, r4
 23fcb7e:	b003      	add	sp, #12
 23fcb80:	bd30      	pop	{r4, r5, pc}

023fcb82 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23fcb82:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fcb84:	b510      	push	{r4, lr}
      if (_M_empty())
 23fcb86:	b90a      	cbnz	r2, 23fcb8c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fcb88:	f001 f8ca 	bl	23fdd20 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fcb8c:	68c3      	ldr	r3, [r0, #12]
    }
 23fcb8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fcb92:	4718      	bx	r3

023fcb94 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fcb94:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fcb96:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fcb98:	f100 0110 	add.w	r1, r0, #16
 23fcb9c:	f7ff fff1 	bl	23fcb82 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fcba0:	bd08      	pop	{r3, pc}

023fcba2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fcba2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fcba4:	b510      	push	{r4, lr}
      if (_M_empty())
 23fcba6:	b90a      	cbnz	r2, 23fcbac <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fcba8:	f001 f8ba 	bl	23fdd20 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fcbac:	68c3      	ldr	r3, [r0, #12]
    }
 23fcbae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fcbb2:	4718      	bx	r3

023fcbb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fcbb4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fcbb6:	6800      	ldr	r0, [r0, #0]
 23fcbb8:	f100 0110 	add.w	r1, r0, #16
 23fcbbc:	f7ff fff1 	bl	23fcba2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fcbc0:	bd08      	pop	{r3, pc}
	...

023fcbc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fcbc4:	b538      	push	{r3, r4, r5, lr}
 23fcbc6:	2300      	movs	r3, #0
 23fcbc8:	4604      	mov	r4, r0
 23fcbca:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fcbcc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fcbce:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fcbd0:	f7fd fd37 	bl	23fa642 <_Znwj>
 23fcbd4:	b128      	cbz	r0, 23fcbe2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fcbd6:	2301      	movs	r3, #1
 23fcbd8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23fcbdc:	4b02      	ldr	r3, [pc, #8]	; (23fcbe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23fcbde:	60c5      	str	r5, [r0, #12]
 23fcbe0:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fcbe2:	6020      	str	r0, [r4, #0]
	}
 23fcbe4:	4620      	mov	r0, r4
 23fcbe6:	bd38      	pop	{r3, r4, r5, pc}
 23fcbe8:	023ffdd4 	.word	0x023ffdd4

023fcbec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23fcbec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fcbee:	2300      	movs	r3, #0
 23fcbf0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fcbf2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fcbf4:	4604      	mov	r4, r0
 23fcbf6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fcbf8:	b12b      	cbz	r3, 23fcc06 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fcbfa:	2202      	movs	r2, #2
 23fcbfc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fcbfe:	68eb      	ldr	r3, [r5, #12]
 23fcc00:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fcc02:	68ab      	ldr	r3, [r5, #8]
 23fcc04:	60a3      	str	r3, [r4, #8]
    }
 23fcc06:	4620      	mov	r0, r4
 23fcc08:	bd38      	pop	{r3, r4, r5, pc}
	...

023fcc0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fcc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcc0e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fcc10:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23fcc12:	4668      	mov	r0, sp
 23fcc14:	f7ff ff56 	bl	23fcac4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fcc18:	f04f 0302 	mov.w	r3, #2
 23fcc1c:	e8d4 2f4f 	ldrexb	r2, [r4]
 23fcc20:	2a00      	cmp	r2, #0
 23fcc22:	d103      	bne.n	23fcc2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23fcc24:	e8c4 3f41 	strexb	r1, r3, [r4]
 23fcc28:	2900      	cmp	r1, #0
 23fcc2a:	d1f7      	bne.n	23fcc1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23fcc2c:	d121      	bne.n	23fcc72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23fcc2e:	f104 050c 	add.w	r5, r4, #12
 23fcc32:	4669      	mov	r1, sp
 23fcc34:	4628      	mov	r0, r5
 23fcc36:	f7ff ff45 	bl	23fcac4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23fcc3a:	2201      	movs	r2, #1
 23fcc3c:	1c63      	adds	r3, r4, #1
 23fcc3e:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fcc42:	2000      	movs	r0, #0
 23fcc44:	f104 0308 	add.w	r3, r4, #8
 23fcc48:	e8d3 6fef 	ldaex	r6, [r3]
 23fcc4c:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23fcc50:	2a00      	cmp	r2, #0
 23fcc52:	d1f9      	bne.n	23fcc48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23fcc54:	b16e      	cbz	r6, 23fcc72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23fcc56:	f7ff fd8f 	bl	23fc778 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fcc5a:	b178      	cbz	r0, 23fcc7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fcc5c:	4629      	mov	r1, r5
 23fcc5e:	4630      	mov	r0, r6
 23fcc60:	f7ff ff8f 	bl	23fcb82 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23fcc64:	4630      	mov	r0, r6
 23fcc66:	f7ff fefc 	bl	23fca62 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fcc6a:	2110      	movs	r1, #16
 23fcc6c:	4630      	mov	r0, r6
 23fcc6e:	f7fd fcec 	bl	23fa64a <_ZdlPvj>
        p_->setError(std::move(error));
 23fcc72:	4668      	mov	r0, sp
 23fcc74:	f7ff ff33 	bl	23fcade <_ZN8particle5ErrorD1Ev>
    }
 23fcc78:	b009      	add	sp, #36	; 0x24
 23fcc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fcc7c:	4631      	mov	r1, r6
 23fcc7e:	a802      	add	r0, sp, #8
 23fcc80:	f7ff ffb4 	bl	23fcbec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fcc84:	68e0      	ldr	r0, [r4, #12]
 23fcc86:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fcc8a:	b108      	cbz	r0, 23fcc90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23fcc8c:	f001 f894 	bl	23fddb8 <strdup>
        type_(type) {
 23fcc90:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fcc92:	2010      	movs	r0, #16
 23fcc94:	f8ad 501c 	strh.w	r5, [sp, #28]
 23fcc98:	f7fd fcd3 	bl	23fa642 <_Znwj>
 23fcc9c:	4605      	mov	r5, r0
 23fcc9e:	b1e8      	cbz	r0, 23fccdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23fcca0:	2700      	movs	r7, #0
 23fcca2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fcca4:	2018      	movs	r0, #24
 23fcca6:	f7fd fccc 	bl	23fa642 <_Znwj>
 23fccaa:	4604      	mov	r4, r0
 23fccac:	b188      	cbz	r0, 23fccd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23fccae:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fccb0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fccb2:	a802      	add	r0, sp, #8
 23fccb4:	f7ff fede 	bl	23fca74 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fccb8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fccba:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fccbc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fccbe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fccc0:	9204      	str	r2, [sp, #16]
 23fccc2:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fccc4:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23fccc6:	60e3      	str	r3, [r4, #12]
 23fccc8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23fcccc:	9205      	str	r2, [sp, #20]
 23fccce:	f7ff fef9 	bl	23fcac4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23fccd2:	4b08      	ldr	r3, [pc, #32]	; (23fccf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fccd4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fccd6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fccd8:	4b07      	ldr	r3, [pc, #28]	; (23fccf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fccda:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fccdc:	a806      	add	r0, sp, #24
 23fccde:	f7ff fefe 	bl	23fcade <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fcce2:	a802      	add	r0, sp, #8
 23fcce4:	f7ff febd 	bl	23fca62 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fcce8:	2200      	movs	r2, #0
 23fccea:	4629      	mov	r1, r5
 23fccec:	4803      	ldr	r0, [pc, #12]	; (23fccfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fccee:	f7ff fd51 	bl	23fc794 <application_thread_invoke>
 23fccf2:	e7b7      	b.n	23fcc64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fccf4:	023fcb95 	.word	0x023fcb95
 23fccf8:	023fce11 	.word	0x023fce11
 23fccfc:	023fca3b 	.word	0x023fca3b

023fcd00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fcd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcd04:	b08b      	sub	sp, #44	; 0x2c
 23fcd06:	4605      	mov	r5, r0
 23fcd08:	460f      	mov	r7, r1
 23fcd0a:	4690      	mov	r8, r2
 23fcd0c:	4699      	mov	r9, r3
 23fcd0e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fcd12:	f7ff fd69 	bl	23fc7e8 <spark_cloud_flag_connected>
 23fcd16:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fcd18:	4683      	mov	fp, r0
 23fcd1a:	bb38      	cbnz	r0, 23fcd6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fcd1c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fcd20:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fcd22:	a905      	add	r1, sp, #20
 23fcd24:	4630      	mov	r0, r6
 23fcd26:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fcd2a:	f7ff fecb 	bl	23fcac4 <_ZN8particle5ErrorC1EOS0_>
 23fcd2e:	2014      	movs	r0, #20
 23fcd30:	f7fd fc87 	bl	23fa642 <_Znwj>
 23fcd34:	4604      	mov	r4, r0
 23fcd36:	b148      	cbz	r0, 23fcd4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fcd38:	2302      	movs	r3, #2
 23fcd3a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fcd3c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fcd3e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fcd42:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fcd44:	4631      	mov	r1, r6
 23fcd46:	300c      	adds	r0, #12
 23fcd48:	f7ff febc 	bl	23fcac4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fcd4c:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fcd4e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fcd50:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fcd54:	f7ff ff36 	bl	23fcbc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fcd58:	4630      	mov	r0, r6
 23fcd5a:	f7ff fec0 	bl	23fcade <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fcd5e:	a805      	add	r0, sp, #20
 23fcd60:	f7ff febd 	bl	23fcade <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fcd64:	4628      	mov	r0, r5
 23fcd66:	b00b      	add	sp, #44	; 0x2c
 23fcd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fcd6c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fcd6e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fcd70:	2014      	movs	r0, #20
 23fcd72:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fcd76:	9307      	str	r3, [sp, #28]
 23fcd78:	f7fd fc63 	bl	23fa642 <_Znwj>
 23fcd7c:	4601      	mov	r1, r0
 23fcd7e:	b118      	cbz	r0, 23fcd88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fcd80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fcd84:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fcd86:	7044      	strb	r4, [r0, #1]
 23fcd88:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fcd8a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fcd8c:	f7ff ff1a 	bl	23fcbc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fcd90:	4b1e      	ldr	r3, [pc, #120]	; (23fce0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fcd92:	2008      	movs	r0, #8
 23fcd94:	9308      	str	r3, [sp, #32]
 23fcd96:	f7fd fc54 	bl	23fa642 <_Znwj>
 23fcd9a:	4604      	mov	r4, r0
 23fcd9c:	b110      	cbz	r0, 23fcda4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fcd9e:	a903      	add	r1, sp, #12
 23fcda0:	f7ff fecb 	bl	23fcb3a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fcda4:	464a      	mov	r2, r9
 23fcda6:	4641      	mov	r1, r8
 23fcda8:	4638      	mov	r0, r7
 23fcdaa:	9600      	str	r6, [sp, #0]
 23fcdac:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fcdb0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fcdb2:	f7ff fd27 	bl	23fc804 <spark_send_event>
 23fcdb6:	b9b8      	cbnz	r0, 23fcde8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fcdb8:	9b03      	ldr	r3, [sp, #12]
 23fcdba:	3301      	adds	r3, #1
 23fcdbc:	781b      	ldrb	r3, [r3, #0]
 23fcdbe:	b2db      	uxtb	r3, r3
 23fcdc0:	b993      	cbnz	r3, 23fcde8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fcdc2:	9305      	str	r3, [sp, #20]
 23fcdc4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fcdc8:	a905      	add	r1, sp, #20
 23fcdca:	a803      	add	r0, sp, #12
 23fcdcc:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fcdd0:	f7ff ff1c 	bl	23fcc0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fcdd4:	a805      	add	r0, sp, #20
 23fcdd6:	f7ff fe82 	bl	23fcade <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fcdda:	a805      	add	r0, sp, #20
 23fcddc:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fcdde:	f7ff feb5 	bl	23fcb4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fcde2:	a806      	add	r0, sp, #24
 23fcde4:	f7fd fd12 	bl	23fa80c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcde8:	a903      	add	r1, sp, #12
 23fcdea:	a805      	add	r0, sp, #20
 23fcdec:	f7ff fea5 	bl	23fcb3a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fcdf0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fcdf2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fcdf4:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fcdf6:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fcdf8:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fcdfa:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fcdfc:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fcdfe:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fce00:	f7fd fd04 	bl	23fa80c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fce04:	a804      	add	r0, sp, #16
 23fce06:	f7fd fd01 	bl	23fa80c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fce0a:	e7ab      	b.n	23fcd64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fce0c:	023fce8d 	.word	0x023fce8d

023fce10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fce10:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fce12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fce14:	4605      	mov	r5, r0
	switch (__op)
 23fce16:	d103      	bne.n	23fce20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fce18:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fce1a:	6003      	str	r3, [r0, #0]
      }
 23fce1c:	2000      	movs	r0, #0
 23fce1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fce20:	2a02      	cmp	r2, #2
 23fce22:	d010      	beq.n	23fce46 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fce24:	2a03      	cmp	r2, #3
 23fce26:	d1f9      	bne.n	23fce1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fce28:	6804      	ldr	r4, [r0, #0]
 23fce2a:	2c00      	cmp	r4, #0
 23fce2c:	d0f6      	beq.n	23fce1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fce2e:	f104 0010 	add.w	r0, r4, #16
 23fce32:	f7ff fe54 	bl	23fcade <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fce36:	4620      	mov	r0, r4
 23fce38:	f7ff fe13 	bl	23fca62 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fce3c:	2118      	movs	r1, #24
 23fce3e:	4620      	mov	r0, r4
 23fce40:	f7fd fc03 	bl	23fa64a <_ZdlPvj>
 23fce44:	e7ea      	b.n	23fce1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fce46:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fce48:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fce4a:	f7fd fbfa 	bl	23fa642 <_Znwj>
 23fce4e:	4604      	mov	r4, r0
 23fce50:	b150      	cbz	r0, 23fce68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23fce52:	4631      	mov	r1, r6
 23fce54:	f7ff feca 	bl	23fcbec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fce58:	6930      	ldr	r0, [r6, #16]
 23fce5a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fce5e:	b108      	cbz	r0, 23fce64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fce60:	f000 ffaa 	bl	23fddb8 <strdup>
        type_(type) {
 23fce64:	6120      	str	r0, [r4, #16]
 23fce66:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fce68:	602c      	str	r4, [r5, #0]
	}
 23fce6a:	e7d7      	b.n	23fce1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fce6c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fce6c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fce6e:	2300      	movs	r3, #0
 23fce70:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fce72:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fce74:	4604      	mov	r4, r0
 23fce76:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fce78:	b12b      	cbz	r3, 23fce86 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fce7a:	2202      	movs	r2, #2
 23fce7c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fce7e:	68eb      	ldr	r3, [r5, #12]
 23fce80:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fce82:	68ab      	ldr	r3, [r5, #8]
 23fce84:	60a3      	str	r3, [r4, #8]
    }
 23fce86:	4620      	mov	r0, r4
 23fce88:	bd38      	pop	{r3, r4, r5, pc}
	...

023fce8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fce8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fce8e:	4604      	mov	r4, r0
 23fce90:	b089      	sub	sp, #36	; 0x24
 23fce92:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fce94:	a801      	add	r0, sp, #4
 23fce96:	4611      	mov	r1, r2
 23fce98:	f7ff fe58 	bl	23fcb4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fce9c:	b1a4      	cbz	r4, 23fcec8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fce9e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fcea0:	b11d      	cbz	r5, 23fceaa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fcea2:	4628      	mov	r0, r5
 23fcea4:	f000 ff88 	bl	23fddb8 <strdup>
 23fcea8:	4605      	mov	r5, r0
 23fceaa:	a801      	add	r0, sp, #4
 23fceac:	a903      	add	r1, sp, #12
        type_(type) {
 23fceae:	9503      	str	r5, [sp, #12]
 23fceb0:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fceb4:	f7ff feaa 	bl	23fcc0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fceb8:	a803      	add	r0, sp, #12
 23fceba:	f7ff fe10 	bl	23fcade <_ZN8particle5ErrorD1Ev>
 23fcebe:	a802      	add	r0, sp, #8
 23fcec0:	f7fd fca4 	bl	23fa80c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcec4:	b009      	add	sp, #36	; 0x24
 23fcec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fcec8:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fceca:	9d01      	ldr	r5, [sp, #4]
 23fcecc:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fced0:	2a00      	cmp	r2, #0
 23fced2:	d103      	bne.n	23fcedc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fced4:	e8c5 3f41 	strexb	r1, r3, [r5]
 23fced8:	2900      	cmp	r1, #0
 23fceda:	d1f7      	bne.n	23fcecc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23fcedc:	d1ef      	bne.n	23fcebe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23fcede:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23fcee0:	2201      	movs	r2, #1
 23fcee2:	18eb      	adds	r3, r5, r3
 23fcee4:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fcee8:	1d2b      	adds	r3, r5, #4
 23fceea:	e8d3 6fef 	ldaex	r6, [r3]
 23fceee:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fcef2:	2a00      	cmp	r2, #0
 23fcef4:	d1f9      	bne.n	23fceea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fcef6:	2e00      	cmp	r6, #0
 23fcef8:	d0e1      	beq.n	23fcebe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fcefa:	4620      	mov	r0, r4
 23fcefc:	f7ff fc3c 	bl	23fc778 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fcf00:	4607      	mov	r7, r0
 23fcf02:	b160      	cbz	r0, 23fcf1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fcf04:	4630      	mov	r0, r6
 23fcf06:	f105 010c 	add.w	r1, r5, #12
 23fcf0a:	f7ff fe4a 	bl	23fcba2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fcf0e:	4630      	mov	r0, r6
 23fcf10:	f7ff fda7 	bl	23fca62 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fcf14:	2110      	movs	r1, #16
 23fcf16:	4630      	mov	r0, r6
 23fcf18:	f7fd fb97 	bl	23fa64a <_ZdlPvj>
 23fcf1c:	e7cf      	b.n	23fcebe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fcf1e:	4631      	mov	r1, r6
 23fcf20:	a803      	add	r0, sp, #12
 23fcf22:	f7ff ffa3 	bl	23fce6c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fcf26:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fcf28:	2010      	movs	r0, #16
 23fcf2a:	f88d 301c 	strb.w	r3, [sp, #28]
 23fcf2e:	f7fd fb88 	bl	23fa642 <_Znwj>
 23fcf32:	4605      	mov	r5, r0
 23fcf34:	b1d0      	cbz	r0, 23fcf6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fcf36:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fcf38:	2014      	movs	r0, #20
 23fcf3a:	f7fd fb82 	bl	23fa642 <_Znwj>
 23fcf3e:	4604      	mov	r4, r0
 23fcf40:	b178      	cbz	r0, 23fcf62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fcf42:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fcf44:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fcf46:	a803      	add	r0, sp, #12
 23fcf48:	f7ff fd94 	bl	23fca74 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcf4c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fcf4e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcf50:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcf52:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fcf54:	9205      	str	r2, [sp, #20]
 23fcf56:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcf58:	60e3      	str	r3, [r4, #12]
 23fcf5a:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fcf5e:	9206      	str	r2, [sp, #24]
 23fcf60:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fcf62:	4b07      	ldr	r3, [pc, #28]	; (23fcf80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fcf64:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fcf66:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fcf68:	4b06      	ldr	r3, [pc, #24]	; (23fcf84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fcf6a:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fcf6c:	a803      	add	r0, sp, #12
 23fcf6e:	f7ff fd78 	bl	23fca62 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fcf72:	2200      	movs	r2, #0
 23fcf74:	4629      	mov	r1, r5
 23fcf76:	4804      	ldr	r0, [pc, #16]	; (23fcf88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fcf78:	f7ff fc0c 	bl	23fc794 <application_thread_invoke>
 23fcf7c:	e7c7      	b.n	23fcf0e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fcf7e:	bf00      	nop
 23fcf80:	023fcbb5 	.word	0x023fcbb5
 23fcf84:	023fcf8d 	.word	0x023fcf8d
 23fcf88:	023fca3b 	.word	0x023fca3b

023fcf8c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23fcf8c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fcf8e:	b570      	push	{r4, r5, r6, lr}
 23fcf90:	4604      	mov	r4, r0
	switch (__op)
 23fcf92:	d103      	bne.n	23fcf9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fcf94:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fcf96:	6003      	str	r3, [r0, #0]
      }
 23fcf98:	2000      	movs	r0, #0
 23fcf9a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fcf9c:	2a02      	cmp	r2, #2
 23fcf9e:	d00c      	beq.n	23fcfba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fcfa0:	2a03      	cmp	r2, #3
 23fcfa2:	d1f9      	bne.n	23fcf98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fcfa4:	6804      	ldr	r4, [r0, #0]
 23fcfa6:	2c00      	cmp	r4, #0
 23fcfa8:	d0f6      	beq.n	23fcf98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fcfaa:	4620      	mov	r0, r4
 23fcfac:	f7ff fd59 	bl	23fca62 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fcfb0:	2114      	movs	r1, #20
 23fcfb2:	4620      	mov	r0, r4
 23fcfb4:	f7fd fb49 	bl	23fa64a <_ZdlPvj>
 23fcfb8:	e7ee      	b.n	23fcf98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fcfba:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fcfbc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fcfbe:	f7fd fb40 	bl	23fa642 <_Znwj>
 23fcfc2:	4605      	mov	r5, r0
 23fcfc4:	b120      	cbz	r0, 23fcfd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23fcfc6:	4631      	mov	r1, r6
 23fcfc8:	f7ff ff50 	bl	23fce6c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fcfcc:	7c33      	ldrb	r3, [r6, #16]
 23fcfce:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fcfd0:	6025      	str	r5, [r4, #0]
	}
 23fcfd2:	e7e1      	b.n	23fcf98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fcfd4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fcfd4:	2200      	movs	r2, #0
 23fcfd6:	6840      	ldr	r0, [r0, #4]
 23fcfd8:	4611      	mov	r1, r2
 23fcfda:	f7ff bc91 	b.w	23fc900 <network_listening>

023fcfde <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fcfde:	2200      	movs	r2, #0
 23fcfe0:	6840      	ldr	r0, [r0, #4]
 23fcfe2:	4611      	mov	r1, r2
 23fcfe4:	f7ff bca8 	b.w	23fc938 <network_get_listen_timeout>

023fcfe8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fcfe8:	2200      	movs	r2, #0
 23fcfea:	6840      	ldr	r0, [r0, #4]
 23fcfec:	f7ff bc96 	b.w	23fc91c <network_set_listen_timeout>

023fcff0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fcff0:	2200      	movs	r2, #0
 23fcff2:	6840      	ldr	r0, [r0, #4]
 23fcff4:	f081 0101 	eor.w	r1, r1, #1
 23fcff8:	f7ff bc74 	b.w	23fc8e4 <network_listen>

023fcffc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fcffc:	2300      	movs	r3, #0
 23fcffe:	6840      	ldr	r0, [r0, #4]
 23fd000:	461a      	mov	r2, r3
 23fd002:	4619      	mov	r1, r3
 23fd004:	f7ff bc60 	b.w	23fc8c8 <network_off>

023fd008 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd008:	2300      	movs	r3, #0
 23fd00a:	6840      	ldr	r0, [r0, #4]
 23fd00c:	461a      	mov	r2, r3
 23fd00e:	4619      	mov	r1, r3
 23fd010:	f7ff bc4c 	b.w	23fc8ac <network_on>

023fd014 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd014:	2200      	movs	r2, #0
 23fd016:	6840      	ldr	r0, [r0, #4]
 23fd018:	4611      	mov	r1, r2
 23fd01a:	f7ff bc39 	b.w	23fc890 <network_ready>

023fd01e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd01e:	2200      	movs	r2, #0
 23fd020:	6840      	ldr	r0, [r0, #4]
 23fd022:	4611      	mov	r1, r2
 23fd024:	f7ff bc18 	b.w	23fc858 <network_connecting>

023fd028 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd028:	2200      	movs	r2, #0
 23fd02a:	2102      	movs	r1, #2
 23fd02c:	6840      	ldr	r0, [r0, #4]
 23fd02e:	f7ff bc21 	b.w	23fc874 <network_disconnect>

023fd032 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd032:	2300      	movs	r3, #0
 23fd034:	6840      	ldr	r0, [r0, #4]
 23fd036:	461a      	mov	r2, r3
 23fd038:	f7ff bc00 	b.w	23fc83c <network_connect>

023fd03c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd03c:	2203      	movs	r2, #3
 23fd03e:	4b02      	ldr	r3, [pc, #8]	; (23fd048 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd040:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd042:	4a02      	ldr	r2, [pc, #8]	; (23fd04c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd044:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd046:	4770      	bx	lr
 23fd048:	1007ae90 	.word	0x1007ae90
 23fd04c:	023ffdf0 	.word	0x023ffdf0

023fd050 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fd050:	4770      	bx	lr

023fd052 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fd052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd054:	4606      	mov	r6, r0
 23fd056:	4615      	mov	r5, r2
 23fd058:	460c      	mov	r4, r1
 23fd05a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fd05c:	42bc      	cmp	r4, r7
 23fd05e:	d006      	beq.n	23fd06e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fd060:	6833      	ldr	r3, [r6, #0]
 23fd062:	4630      	mov	r0, r6
 23fd064:	689b      	ldr	r3, [r3, #8]
 23fd066:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fd06a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fd06c:	e7f6      	b.n	23fd05c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fd06e:	4628      	mov	r0, r5
 23fd070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd072 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fd072:	2200      	movs	r2, #0
 23fd074:	7c00      	ldrb	r0, [r0, #16]
 23fd076:	f7ff b96b 	b.w	23fc350 <hal_i2c_write>

023fd07a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fd07a:	2100      	movs	r1, #0
 23fd07c:	7c00      	ldrb	r0, [r0, #16]
 23fd07e:	f7ff b975 	b.w	23fc36c <hal_i2c_available>

023fd082 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fd082:	2100      	movs	r1, #0
 23fd084:	7c00      	ldrb	r0, [r0, #16]
 23fd086:	f7ff b97f 	b.w	23fc388 <hal_i2c_read>

023fd08a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fd08a:	2100      	movs	r1, #0
 23fd08c:	7c00      	ldrb	r0, [r0, #16]
 23fd08e:	f7ff b989 	b.w	23fc3a4 <hal_i2c_peek>

023fd092 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fd092:	2100      	movs	r1, #0
 23fd094:	7c00      	ldrb	r0, [r0, #16]
 23fd096:	f7ff b993 	b.w	23fc3c0 <hal_i2c_flush>

023fd09a <_ZN7TwoWireD0Ev>:
 23fd09a:	b510      	push	{r4, lr}
 23fd09c:	4604      	mov	r4, r0
 23fd09e:	2114      	movs	r1, #20
 23fd0a0:	f7fd fad3 	bl	23fa64a <_ZdlPvj>
 23fd0a4:	4620      	mov	r0, r4
 23fd0a6:	bd10      	pop	{r4, pc}

023fd0a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd0a8:	b538      	push	{r3, r4, r5, lr}
 23fd0aa:	4604      	mov	r4, r0
 23fd0ac:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fd0ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd0b2:	2200      	movs	r2, #0
 23fd0b4:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd0b8:	4b09      	ldr	r3, [pc, #36]	; (23fd0e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fd0ba:	4608      	mov	r0, r1
  _i2c = i2c;
 23fd0bc:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd0be:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fd0c0:	4629      	mov	r1, r5
 23fd0c2:	f7ff f999 	bl	23fc3f8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd0c6:	30bf      	adds	r0, #191	; 0xbf
 23fd0c8:	d108      	bne.n	23fd0dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fd0ca:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd0cc:	07db      	lsls	r3, r3, #31
 23fd0ce:	d505      	bpl.n	23fd0dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fd0d0:	6868      	ldr	r0, [r5, #4]
 23fd0d2:	f7ff fc69 	bl	23fc9a8 <free>
    free(conf.tx_buffer);
 23fd0d6:	68e8      	ldr	r0, [r5, #12]
 23fd0d8:	f7ff fc66 	bl	23fc9a8 <free>
}
 23fd0dc:	4620      	mov	r0, r4
 23fd0de:	bd38      	pop	{r3, r4, r5, pc}
 23fd0e0:	023ffe2c 	.word	0x023ffe2c

023fd0e4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fd0e4:	2300      	movs	r3, #0
 23fd0e6:	7c00      	ldrb	r0, [r0, #16]
 23fd0e8:	461a      	mov	r2, r3
 23fd0ea:	4619      	mov	r1, r3
 23fd0ec:	f7ff b906 	b.w	23fc2fc <hal_i2c_begin>

023fd0f0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fd0f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fd0f2:	2200      	movs	r2, #0
 23fd0f4:	2314      	movs	r3, #20
 23fd0f6:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fd0fa:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fd0fe:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fd100:	7c00      	ldrb	r0, [r0, #16]
 23fd102:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd106:	684b      	ldr	r3, [r1, #4]
 23fd108:	9303      	str	r3, [sp, #12]
 23fd10a:	68cb      	ldr	r3, [r1, #12]
 23fd10c:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fd10e:	7a0b      	ldrb	r3, [r1, #8]
 23fd110:	a901      	add	r1, sp, #4
 23fd112:	9305      	str	r3, [sp, #20]
 23fd114:	f7ff f97e 	bl	23fc414 <hal_i2c_request_ex>
}
 23fd118:	b007      	add	sp, #28
 23fd11a:	f85d fb04 	ldr.w	pc, [sp], #4

023fd11e <_ZN7TwoWire11requestFromEhjh>:
{
 23fd11e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fd120:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fd122:	f88d 1000 	strb.w	r1, [sp]
 23fd126:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fd12a:	bf18      	it	ne
 23fd12c:	2301      	movne	r3, #1
 23fd12e:	9103      	str	r1, [sp, #12]
 23fd130:	4669      	mov	r1, sp
    size_ = size;
 23fd132:	9201      	str	r2, [sp, #4]
 23fd134:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd138:	f7ff ffda 	bl	23fd0f0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fd13c:	b005      	add	sp, #20
 23fd13e:	f85d fb04 	ldr.w	pc, [sp], #4

023fd142 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fd142:	2200      	movs	r2, #0
 23fd144:	7c00      	ldrb	r0, [r0, #16]
 23fd146:	f7ff b8e7 	b.w	23fc318 <hal_i2c_begin_transmission>

023fd14a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fd14a:	2200      	movs	r2, #0
 23fd14c:	7c00      	ldrb	r0, [r0, #16]
 23fd14e:	f7ff b8f1 	b.w	23fc334 <hal_i2c_end_transmission>

023fd152 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fd152:	2101      	movs	r1, #1
 23fd154:	f7ff bff9 	b.w	23fd14a <_ZN7TwoWire15endTransmissionEh>

023fd158 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd158:	4770      	bx	lr

023fd15a <_ZN9IPAddressD0Ev>:
 23fd15a:	b510      	push	{r4, lr}
 23fd15c:	4604      	mov	r4, r0
 23fd15e:	2118      	movs	r1, #24
 23fd160:	f7fd fa73 	bl	23fa64a <_ZdlPvj>
 23fd164:	4620      	mov	r0, r4
 23fd166:	bd10      	pop	{r4, pc}

023fd168 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd168:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd16a:	7d03      	ldrb	r3, [r0, #20]
{
 23fd16c:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd16e:	2b06      	cmp	r3, #6
 23fd170:	f04f 0400 	mov.w	r4, #0
{
 23fd174:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd176:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd17a:	d012      	beq.n	23fd1a2 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd17c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd180:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd184:	220a      	movs	r2, #10
 23fd186:	4630      	mov	r0, r6
 23fd188:	f000 f95d 	bl	23fd446 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd18c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd18e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd190:	d019      	beq.n	23fd1c6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd192:	2c00      	cmp	r4, #0
 23fd194:	d0f4      	beq.n	23fd180 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd196:	212e      	movs	r1, #46	; 0x2e
 23fd198:	4630      	mov	r0, r6
 23fd19a:	f000 f93b 	bl	23fd414 <_ZN5Print5printEc>
 23fd19e:	4404      	add	r4, r0
 23fd1a0:	e7ee      	b.n	23fd180 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd1a2:	232f      	movs	r3, #47	; 0x2f
 23fd1a4:	466a      	mov	r2, sp
 23fd1a6:	4639      	mov	r1, r7
 23fd1a8:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd1aa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd1ae:	f7ff f93f 	bl	23fc430 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd1b2:	4668      	mov	r0, sp
 23fd1b4:	f7fd fa20 	bl	23fa5f8 <strlen>
 23fd1b8:	6833      	ldr	r3, [r6, #0]
 23fd1ba:	4602      	mov	r2, r0
 23fd1bc:	4669      	mov	r1, sp
 23fd1be:	4630      	mov	r0, r6
 23fd1c0:	68db      	ldr	r3, [r3, #12]
 23fd1c2:	4798      	blx	r3
 23fd1c4:	4604      	mov	r4, r0
    }
    return n;
}
 23fd1c6:	4620      	mov	r0, r4
 23fd1c8:	b00d      	add	sp, #52	; 0x34
 23fd1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd1cc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd1cc:	b510      	push	{r4, lr}
 23fd1ce:	4604      	mov	r4, r0
 23fd1d0:	4b04      	ldr	r3, [pc, #16]	; (23fd1e4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd1d2:	2211      	movs	r2, #17
 23fd1d4:	2100      	movs	r1, #0
 23fd1d6:	f840 3b04 	str.w	r3, [r0], #4
 23fd1da:	f000 fdb7 	bl	23fdd4c <memset>
}
 23fd1de:	4620      	mov	r0, r4
 23fd1e0:	bd10      	pop	{r4, pc}
 23fd1e2:	bf00      	nop
 23fd1e4:	023ffe54 	.word	0x023ffe54

023fd1e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd1e8:	4603      	mov	r3, r0
 23fd1ea:	4a07      	ldr	r2, [pc, #28]	; (23fd208 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd1ec:	b510      	push	{r4, lr}
 23fd1ee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd1f2:	f101 0210 	add.w	r2, r1, #16
 23fd1f6:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd1fa:	4291      	cmp	r1, r2
 23fd1fc:	f843 4b04 	str.w	r4, [r3], #4
 23fd200:	d1f9      	bne.n	23fd1f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd202:	780a      	ldrb	r2, [r1, #0]
 23fd204:	701a      	strb	r2, [r3, #0]
}
 23fd206:	bd10      	pop	{r4, pc}
 23fd208:	023ffe54 	.word	0x023ffe54

023fd20c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd20c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd20e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd212:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd216:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd21a:	2304      	movs	r3, #4
 23fd21c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd220:	6041      	str	r1, [r0, #4]
 23fd222:	7503      	strb	r3, [r0, #20]
}
 23fd224:	bd10      	pop	{r4, pc}
	...

023fd228 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd228:	b507      	push	{r0, r1, r2, lr}
 23fd22a:	4b06      	ldr	r3, [pc, #24]	; (23fd244 <_ZN9IPAddressC1EPKh+0x1c>)
 23fd22c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd22e:	78cb      	ldrb	r3, [r1, #3]
 23fd230:	9300      	str	r3, [sp, #0]
 23fd232:	788b      	ldrb	r3, [r1, #2]
 23fd234:	784a      	ldrb	r2, [r1, #1]
 23fd236:	7809      	ldrb	r1, [r1, #0]
 23fd238:	f7ff ffe8 	bl	23fd20c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd23c:	b003      	add	sp, #12
 23fd23e:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd242:	bf00      	nop
 23fd244:	023ffe54 	.word	0x023ffe54

023fd248 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fd248:	4b01      	ldr	r3, [pc, #4]	; (23fd250 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fd24a:	4a02      	ldr	r2, [pc, #8]	; (23fd254 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fd24c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fd24e:	4770      	bx	lr
 23fd250:	1007ae98 	.word	0x1007ae98
 23fd254:	023ffe60 	.word	0x023ffe60

023fd258 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fd258:	2300      	movs	r3, #0
 23fd25a:	6840      	ldr	r0, [r0, #4]
 23fd25c:	461a      	mov	r2, r3
 23fd25e:	f7ff baed 	b.w	23fc83c <network_connect>

023fd262 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fd262:	2200      	movs	r2, #0
 23fd264:	2102      	movs	r1, #2
 23fd266:	6840      	ldr	r0, [r0, #4]
 23fd268:	f7ff bb04 	b.w	23fc874 <network_disconnect>

023fd26c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fd26c:	2200      	movs	r2, #0
 23fd26e:	6840      	ldr	r0, [r0, #4]
 23fd270:	4611      	mov	r1, r2
 23fd272:	f7ff baf1 	b.w	23fc858 <network_connecting>

023fd276 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fd276:	2200      	movs	r2, #0
 23fd278:	6840      	ldr	r0, [r0, #4]
 23fd27a:	4611      	mov	r1, r2
 23fd27c:	f7ff bb08 	b.w	23fc890 <network_ready>

023fd280 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fd280:	2300      	movs	r3, #0
 23fd282:	6840      	ldr	r0, [r0, #4]
 23fd284:	461a      	mov	r2, r3
 23fd286:	4619      	mov	r1, r3
 23fd288:	f7ff bb10 	b.w	23fc8ac <network_on>

023fd28c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fd28c:	2300      	movs	r3, #0
 23fd28e:	6840      	ldr	r0, [r0, #4]
 23fd290:	461a      	mov	r2, r3
 23fd292:	4619      	mov	r1, r3
 23fd294:	f7ff bb18 	b.w	23fc8c8 <network_off>

023fd298 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fd298:	2100      	movs	r1, #0
 23fd29a:	6840      	ldr	r0, [r0, #4]
 23fd29c:	f7ff bb5a 	b.w	23fc954 <network_is_on>

023fd2a0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fd2a0:	2100      	movs	r1, #0
 23fd2a2:	6840      	ldr	r0, [r0, #4]
 23fd2a4:	f7ff bb64 	b.w	23fc970 <network_is_off>

023fd2a8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fd2a8:	2200      	movs	r2, #0
 23fd2aa:	6840      	ldr	r0, [r0, #4]
 23fd2ac:	f081 0101 	eor.w	r1, r1, #1
 23fd2b0:	f7ff bb18 	b.w	23fc8e4 <network_listen>

023fd2b4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fd2b4:	2200      	movs	r2, #0
 23fd2b6:	6840      	ldr	r0, [r0, #4]
 23fd2b8:	f7ff bb30 	b.w	23fc91c <network_set_listen_timeout>

023fd2bc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fd2bc:	2200      	movs	r2, #0
 23fd2be:	6840      	ldr	r0, [r0, #4]
 23fd2c0:	4611      	mov	r1, r2
 23fd2c2:	f7ff bb39 	b.w	23fc938 <network_get_listen_timeout>

023fd2c6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fd2c6:	2200      	movs	r2, #0
 23fd2c8:	6840      	ldr	r0, [r0, #4]
 23fd2ca:	4611      	mov	r1, r2
 23fd2cc:	f7ff bb18 	b.w	23fc900 <network_listening>

023fd2d0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fd2d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd2d4:	b095      	sub	sp, #84	; 0x54
 23fd2d6:	4614      	mov	r4, r2
 23fd2d8:	460d      	mov	r5, r1
 23fd2da:	4607      	mov	r7, r0
    IPAddress addr;
 23fd2dc:	f7ff ff76 	bl	23fd1cc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fd2e0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fd2e2:	221c      	movs	r2, #28
 23fd2e4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fd2e6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fd2e8:	f000 fd30 	bl	23fdd4c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fd2ec:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd2ee:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fd2f0:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd2f2:	2100      	movs	r1, #0
 23fd2f4:	466b      	mov	r3, sp
 23fd2f6:	aa0c      	add	r2, sp, #48	; 0x30
 23fd2f8:	f7ff f8b6 	bl	23fc468 <netdb_getaddrinfo>
    if (!r) {
 23fd2fc:	4604      	mov	r4, r0
 23fd2fe:	2800      	cmp	r0, #0
 23fd300:	d14b      	bne.n	23fd39a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd302:	4602      	mov	r2, r0
 23fd304:	2101      	movs	r1, #1
 23fd306:	6868      	ldr	r0, [r5, #4]
 23fd308:	f7ff fac2 	bl	23fc890 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd30c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd30e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd310:	4622      	mov	r2, r4
 23fd312:	6868      	ldr	r0, [r5, #4]
 23fd314:	f7ff fabc 	bl	23fc890 <network_ready>
        bool ok = false;
 23fd318:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd31a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd31c:	9e00      	ldr	r6, [sp, #0]
 23fd31e:	2e00      	cmp	r6, #0
 23fd320:	d03b      	beq.n	23fd39a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fd322:	2900      	cmp	r1, #0
 23fd324:	d139      	bne.n	23fd39a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fd326:	6873      	ldr	r3, [r6, #4]
 23fd328:	2b02      	cmp	r3, #2
 23fd32a:	d003      	beq.n	23fd334 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fd32c:	2b0a      	cmp	r3, #10
 23fd32e:	d011      	beq.n	23fd354 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd330:	69f6      	ldr	r6, [r6, #28]
 23fd332:	e7f4      	b.n	23fd31e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fd334:	f1b8 0f00 	cmp.w	r8, #0
 23fd338:	d0fa      	beq.n	23fd330 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fd33a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fd33c:	a806      	add	r0, sp, #24
 23fd33e:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fd340:	1d3c      	adds	r4, r7, #4
 23fd342:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fd344:	f7ff ff70 	bl	23fd228 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fd348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd34a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd34c:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd34e:	4641      	mov	r1, r8
 23fd350:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fd352:	e7ed      	b.n	23fd330 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fd354:	f1b9 0f00 	cmp.w	r9, #0
 23fd358:	d0ea      	beq.n	23fd330 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fd35a:	2210      	movs	r2, #16
 23fd35c:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fd35e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fd360:	f000 fcf4 	bl	23fdd4c <memset>
                    a.v = 6;
 23fd364:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd366:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fd368:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd36c:	f104 0308 	add.w	r3, r4, #8
 23fd370:	3418      	adds	r4, #24
 23fd372:	462a      	mov	r2, r5
 23fd374:	6818      	ldr	r0, [r3, #0]
 23fd376:	6859      	ldr	r1, [r3, #4]
 23fd378:	3308      	adds	r3, #8
 23fd37a:	c203      	stmia	r2!, {r0, r1}
 23fd37c:	42a3      	cmp	r3, r4
 23fd37e:	4615      	mov	r5, r2
 23fd380:	d1f7      	bne.n	23fd372 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fd382:	a901      	add	r1, sp, #4
 23fd384:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fd386:	1d3c      	adds	r4, r7, #4
 23fd388:	ad07      	add	r5, sp, #28
 23fd38a:	f7ff ff2d 	bl	23fd1e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fd38e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd392:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd394:	4649      	mov	r1, r9
 23fd396:	7023      	strb	r3, [r4, #0]
                    break;
 23fd398:	e7ca      	b.n	23fd330 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fd39a:	9800      	ldr	r0, [sp, #0]
 23fd39c:	f7ff f856 	bl	23fc44c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fd3a0:	4638      	mov	r0, r7
 23fd3a2:	b015      	add	sp, #84	; 0x54
 23fd3a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fd3a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fd3a8:	4b02      	ldr	r3, [pc, #8]	; (23fd3b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fd3aa:	4a03      	ldr	r2, [pc, #12]	; (23fd3b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fd3ac:	601a      	str	r2, [r3, #0]
 23fd3ae:	2200      	movs	r2, #0
 23fd3b0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fd3b2:	4770      	bx	lr
 23fd3b4:	1007ae9c 	.word	0x1007ae9c
 23fd3b8:	023ffe6c 	.word	0x023ffe6c

023fd3bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd3be:	4606      	mov	r6, r0
 23fd3c0:	460d      	mov	r5, r1
  size_t n = 0;
 23fd3c2:	2400      	movs	r4, #0
 23fd3c4:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd3c6:	42bd      	cmp	r5, r7
 23fd3c8:	d00c      	beq.n	23fd3e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd3ca:	6833      	ldr	r3, [r6, #0]
 23fd3cc:	4630      	mov	r0, r6
 23fd3ce:	689b      	ldr	r3, [r3, #8]
 23fd3d0:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd3d4:	4798      	blx	r3
     if (chunk>=0)
 23fd3d6:	1e03      	subs	r3, r0, #0
 23fd3d8:	db01      	blt.n	23fd3de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd3da:	441c      	add	r4, r3
  while (size--) {
 23fd3dc:	e7f3      	b.n	23fd3c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd3de:	2c00      	cmp	r4, #0
 23fd3e0:	bf08      	it	eq
 23fd3e2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd3e4:	4620      	mov	r0, r4
 23fd3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd3e8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fd3e8:	b513      	push	{r0, r1, r4, lr}
 23fd3ea:	4604      	mov	r4, r0
    }
 23fd3ec:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd3ee:	b159      	cbz	r1, 23fd408 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd3f0:	9101      	str	r1, [sp, #4]
 23fd3f2:	f7fd f901 	bl	23fa5f8 <strlen>
 23fd3f6:	4602      	mov	r2, r0
 23fd3f8:	4620      	mov	r0, r4
 23fd3fa:	6823      	ldr	r3, [r4, #0]
 23fd3fc:	9901      	ldr	r1, [sp, #4]
 23fd3fe:	68db      	ldr	r3, [r3, #12]
    }
 23fd400:	b002      	add	sp, #8
 23fd402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd406:	4718      	bx	r3
    }
 23fd408:	b002      	add	sp, #8
 23fd40a:	bd10      	pop	{r4, pc}

023fd40c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23fd40c:	b508      	push	{r3, lr}
  return write(str);
 23fd40e:	f7ff ffeb 	bl	23fd3e8 <_ZN5Print5writeEPKc>
}
 23fd412:	bd08      	pop	{r3, pc}

023fd414 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23fd414:	6803      	ldr	r3, [r0, #0]
 23fd416:	689b      	ldr	r3, [r3, #8]
 23fd418:	4718      	bx	r3

023fd41a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fd41a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fd41c:	210d      	movs	r1, #13
{
 23fd41e:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fd420:	f7ff fff8 	bl	23fd414 <_ZN5Print5printEc>
  n += print('\n');
 23fd424:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fd426:	4604      	mov	r4, r0
  n += print('\n');
 23fd428:	4628      	mov	r0, r5
 23fd42a:	f7ff fff3 	bl	23fd414 <_ZN5Print5printEc>
  return n;
}
 23fd42e:	4420      	add	r0, r4
 23fd430:	bd38      	pop	{r3, r4, r5, pc}

023fd432 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fd432:	b538      	push	{r3, r4, r5, lr}
 23fd434:	4605      	mov	r5, r0
  return write(str);
 23fd436:	f7ff ffd7 	bl	23fd3e8 <_ZN5Print5writeEPKc>
 23fd43a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fd43c:	4628      	mov	r0, r5
 23fd43e:	f7ff ffec 	bl	23fd41a <_ZN5Print7printlnEv>
  return n;
}
 23fd442:	4420      	add	r0, r4
 23fd444:	bd38      	pop	{r3, r4, r5, pc}

023fd446 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd446:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd448:	2a01      	cmp	r2, #1
 23fd44a:	bf98      	it	ls
 23fd44c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd44e:	b530      	push	{r4, r5, lr}
 23fd450:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd452:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd456:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd458:	460d      	mov	r5, r1
 23fd45a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd45e:	fb01 5312 	mls	r3, r1, r2, r5
 23fd462:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd466:	2b09      	cmp	r3, #9
 23fd468:	bf94      	ite	ls
 23fd46a:	3330      	addls	r3, #48	; 0x30
 23fd46c:	3337      	addhi	r3, #55	; 0x37
 23fd46e:	b2db      	uxtb	r3, r3
  } while(n);
 23fd470:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd472:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd476:	d9ef      	bls.n	23fd458 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd478:	4621      	mov	r1, r4
 23fd47a:	f7ff ffb5 	bl	23fd3e8 <_ZN5Print5writeEPKc>
}
 23fd47e:	b00b      	add	sp, #44	; 0x2c
 23fd480:	bd30      	pop	{r4, r5, pc}
	...

023fd484 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fd484:	2200      	movs	r2, #0
 23fd486:	4b01      	ldr	r3, [pc, #4]	; (23fd48c <_GLOBAL__sub_I_RGB+0x8>)
 23fd488:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fd48a:	4770      	bx	lr
 23fd48c:	1007aea4 	.word	0x1007aea4

023fd490 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fd490:	2100      	movs	r1, #0
 23fd492:	f7ff b859 	b.w	23fc548 <hal_spi_release>

023fd496 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fd496:	2100      	movs	r1, #0
 23fd498:	f7ff b848 	b.w	23fc52c <hal_spi_acquire>

023fd49c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fd49c:	b510      	push	{r4, lr}
 23fd49e:	4604      	mov	r4, r0
 23fd4a0:	4608      	mov	r0, r1
{
    _spi = spi;
 23fd4a2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fd4a4:	f7ff f80a 	bl	23fc4bc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd4a8:	2300      	movs	r3, #0
}
 23fd4aa:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd4ac:	6063      	str	r3, [r4, #4]
}
 23fd4ae:	bd10      	pop	{r4, pc}

023fd4b0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fd4b0:	b513      	push	{r0, r1, r4, lr}
 23fd4b2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fd4b4:	7800      	ldrb	r0, [r0, #0]
 23fd4b6:	f7ff ffee 	bl	23fd496 <_ZN8SPIClass4lockEv.isra.0>
 23fd4ba:	b958      	cbnz	r0, 23fd4d4 <_ZN8SPIClass5beginEv+0x24>
 23fd4bc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fd4be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fd4c2:	9001      	str	r0, [sp, #4]
 23fd4c4:	f7fe ffde 	bl	23fc484 <hal_spi_begin>
        unlock();
 23fd4c8:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd4ca:	b002      	add	sp, #8
 23fd4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd4d0:	f7ff bfde 	b.w	23fd490 <_ZN8SPIClass6unlockEv.isra.0>
 23fd4d4:	b002      	add	sp, #8
 23fd4d6:	bd10      	pop	{r4, pc}

023fd4d8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fd4d8:	7800      	ldrb	r0, [r0, #0]
 23fd4da:	f7ff bfd9 	b.w	23fd490 <_ZN8SPIClass6unlockEv.isra.0>
	...

023fd4e0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fd4e0:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fd4e2:	2400      	movs	r4, #0
 23fd4e4:	0840      	lsrs	r0, r0, #1
 23fd4e6:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fd4e8:	6818      	ldr	r0, [r3, #0]
 23fd4ea:	b2e5      	uxtb	r5, r4
 23fd4ec:	4288      	cmp	r0, r1
 23fd4ee:	d906      	bls.n	23fd4fe <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fd4f0:	3401      	adds	r4, #1
 23fd4f2:	2c08      	cmp	r4, #8
 23fd4f4:	d002      	beq.n	23fd4fc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fd4f6:	0840      	lsrs	r0, r0, #1
 23fd4f8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fd4fa:	e7f5      	b.n	23fd4e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fd4fc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fd4fe:	4b02      	ldr	r3, [pc, #8]	; (23fd508 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fd500:	5d5b      	ldrb	r3, [r3, r5]
 23fd502:	7013      	strb	r3, [r2, #0]
}
 23fd504:	bd30      	pop	{r4, r5, pc}
 23fd506:	bf00      	nop
 23fd508:	023ffea0 	.word	0x023ffea0

023fd50c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fd50c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd510:	4606      	mov	r6, r0
 23fd512:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fd514:	7800      	ldrb	r0, [r0, #0]
{
 23fd516:	460c      	mov	r4, r1
    CHECK(lock());
 23fd518:	f7ff ffbd 	bl	23fd496 <_ZN8SPIClass4lockEv.isra.0>
 23fd51c:	2800      	cmp	r0, #0
 23fd51e:	db1b      	blt.n	23fd558 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd520:	2214      	movs	r2, #20
 23fd522:	2100      	movs	r1, #0
 23fd524:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fd526:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd528:	f000 fc10 	bl	23fdd4c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd52c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fd52e:	2200      	movs	r2, #0
 23fd530:	4628      	mov	r0, r5
 23fd532:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd534:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fd538:	f7fe ffdc 	bl	23fc4f4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fd53c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fd540:	b113      	cbz	r3, 23fd548 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fd542:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fd546:	b155      	cbz	r5, 23fd55e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fd548:	2700      	movs	r7, #0
 23fd54a:	2501      	movs	r5, #1
 23fd54c:	46b9      	mov	r9, r7
 23fd54e:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fd550:	7923      	ldrb	r3, [r4, #4]
 23fd552:	b15d      	cbz	r5, 23fd56c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fd554:	b1c3      	cbz	r3, 23fd588 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fd556:	2000      	movs	r0, #0
}
 23fd558:	b00f      	add	sp, #60	; 0x3c
 23fd55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fd55e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fd562:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fd566:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fd56a:	e7f1      	b.n	23fd550 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fd56c:	2b00      	cmp	r3, #0
 23fd56e:	d135      	bne.n	23fd5dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fd570:	68a3      	ldr	r3, [r4, #8]
 23fd572:	4543      	cmp	r3, r8
 23fd574:	d108      	bne.n	23fd588 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fd576:	f88d 9020 	strb.w	r9, [sp, #32]
 23fd57a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fd57e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fd582:	89a3      	ldrh	r3, [r4, #12]
 23fd584:	429a      	cmp	r2, r3
 23fd586:	d0e6      	beq.n	23fd556 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fd588:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fd58a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fd58c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fd590:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fd592:	ab04      	add	r3, sp, #16
 23fd594:	f10d 020f 	add.w	r2, sp, #15
 23fd598:	f7ff ffa2 	bl	23fd4e0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fd59c:	7921      	ldrb	r1, [r4, #4]
 23fd59e:	b985      	cbnz	r5, 23fd5c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fd5a0:	b989      	cbnz	r1, 23fd5c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fd5a2:	68a3      	ldr	r3, [r4, #8]
 23fd5a4:	4543      	cmp	r3, r8
 23fd5a6:	d30e      	bcc.n	23fd5c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fd5a8:	f88d 9020 	strb.w	r9, [sp, #32]
 23fd5ac:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fd5b0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fd5b4:	89a3      	ldrh	r3, [r4, #12]
 23fd5b6:	429a      	cmp	r2, r3
 23fd5b8:	d105      	bne.n	23fd5c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fd5ba:	9b04      	ldr	r3, [sp, #16]
 23fd5bc:	4543      	cmp	r3, r8
 23fd5be:	d102      	bne.n	23fd5c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fd5c0:	e7c9      	b.n	23fd556 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23fd5c2:	2900      	cmp	r1, #0
 23fd5c4:	d1f9      	bne.n	23fd5ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23fd5c6:	2300      	movs	r3, #0
 23fd5c8:	9301      	str	r3, [sp, #4]
 23fd5ca:	7b63      	ldrb	r3, [r4, #13]
 23fd5cc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23fd5d0:	9300      	str	r3, [sp, #0]
 23fd5d2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23fd5d4:	7830      	ldrb	r0, [r6, #0]
 23fd5d6:	f7fe ff9b 	bl	23fc510 <hal_spi_set_settings>
 23fd5da:	e7bc      	b.n	23fd556 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23fd5dc:	462b      	mov	r3, r5
 23fd5de:	462a      	mov	r2, r5
 23fd5e0:	2101      	movs	r1, #1
 23fd5e2:	e9cd 5500 	strd	r5, r5, [sp]
 23fd5e6:	e7f5      	b.n	23fd5d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023fd5e8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23fd5e8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fd5ea:	7800      	ldrb	r0, [r0, #0]
 23fd5ec:	f7fe ff58 	bl	23fc4a0 <hal_spi_transfer>
}
 23fd5f0:	b2c0      	uxtb	r0, r0
 23fd5f2:	bd08      	pop	{r3, pc}

023fd5f4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fd5f4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd5f6:	2000      	movs	r0, #0
 23fd5f8:	4b04      	ldr	r3, [pc, #16]	; (23fd60c <_GLOBAL__sub_I_System+0x18>)
 23fd5fa:	601a      	str	r2, [r3, #0]
 23fd5fc:	4b04      	ldr	r3, [pc, #16]	; (23fd610 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fd5fe:	4a05      	ldr	r2, [pc, #20]	; (23fd614 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fd600:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fd604:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd606:	f7ff b89b 	b.w	23fc740 <set_system_mode>
 23fd60a:	bf00      	nop
 23fd60c:	1007aec0 	.word	0x1007aec0
 23fd610:	1007aeb4 	.word	0x1007aeb4
 23fd614:	ffff0000 	.word	0xffff0000

023fd618 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fd618:	4b02      	ldr	r3, [pc, #8]	; (23fd624 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fd61a:	681a      	ldr	r2, [r3, #0]
 23fd61c:	4b02      	ldr	r3, [pc, #8]	; (23fd628 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fd61e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fd620:	4770      	bx	lr
 23fd622:	bf00      	nop
 23fd624:	1007ad84 	.word	0x1007ad84
 23fd628:	1007aec4 	.word	0x1007aec4

023fd62c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fd62c:	4770      	bx	lr

023fd62e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fd62e:	7441      	strb	r1, [r0, #17]
}
 23fd630:	4770      	bx	lr

023fd632 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fd632:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fd634:	7c00      	ldrb	r0, [r0, #16]
 23fd636:	f7fe ffe9 	bl	23fc60c <hal_usart_available_data_for_write>
}
 23fd63a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd63e:	bd08      	pop	{r3, pc}

023fd640 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fd640:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fd642:	7c00      	ldrb	r0, [r0, #16]
 23fd644:	f7fe ff9c 	bl	23fc580 <hal_usart_available>
}
 23fd648:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd64c:	bd08      	pop	{r3, pc}

023fd64e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fd64e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fd650:	7c00      	ldrb	r0, [r0, #16]
 23fd652:	f7fe ffb1 	bl	23fc5b8 <hal_usart_peek>
}
 23fd656:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd65a:	bd08      	pop	{r3, pc}

023fd65c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fd65c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fd65e:	7c00      	ldrb	r0, [r0, #16]
 23fd660:	f7fe ff9c 	bl	23fc59c <hal_usart_read>
}
 23fd664:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd668:	bd08      	pop	{r3, pc}

023fd66a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fd66a:	7c00      	ldrb	r0, [r0, #16]
 23fd66c:	f7fe bfb2 	b.w	23fc5d4 <hal_usart_flush>

023fd670 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fd670:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fd672:	7c45      	ldrb	r5, [r0, #17]
{
 23fd674:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fd676:	b12d      	cbz	r5, 23fd684 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fd678:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fd67a:	b003      	add	sp, #12
 23fd67c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fd680:	f7fe bf70 	b.w	23fc564 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fd684:	7c00      	ldrb	r0, [r0, #16]
 23fd686:	9101      	str	r1, [sp, #4]
 23fd688:	f7fe ffc0 	bl	23fc60c <hal_usart_available_data_for_write>
 23fd68c:	2800      	cmp	r0, #0
 23fd68e:	9901      	ldr	r1, [sp, #4]
 23fd690:	dcf2      	bgt.n	23fd678 <_ZN11USARTSerial5writeEh+0x8>
}
 23fd692:	4628      	mov	r0, r5
 23fd694:	b003      	add	sp, #12
 23fd696:	bd30      	pop	{r4, r5, pc}

023fd698 <_ZN11USARTSerialD0Ev>:
 23fd698:	b510      	push	{r4, lr}
 23fd69a:	4604      	mov	r4, r0
 23fd69c:	2114      	movs	r1, #20
 23fd69e:	f7fc ffd4 	bl	23fa64a <_ZdlPvj>
 23fd6a2:	4620      	mov	r0, r4
 23fd6a4:	bd10      	pop	{r4, pc}
	...

023fd6a8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fd6a8:	b510      	push	{r4, lr}
 23fd6aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd6ae:	4604      	mov	r4, r0
 23fd6b0:	4608      	mov	r0, r1
 23fd6b2:	4611      	mov	r1, r2
 23fd6b4:	2200      	movs	r2, #0
 23fd6b6:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd6ba:	4b04      	ldr	r3, [pc, #16]	; (23fd6cc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fd6bc:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fd6be:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fd6c0:	2301      	movs	r3, #1
 23fd6c2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fd6c4:	f7fe ffb0 	bl	23fc628 <hal_usart_init_ex>
}
 23fd6c8:	4620      	mov	r0, r4
 23fd6ca:	bd10      	pop	{r4, pc}
 23fd6cc:	023ffecc 	.word	0x023ffecc

023fd6d0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fd6d0:	7c00      	ldrb	r0, [r0, #16]
 23fd6d2:	f7fe bf8d 	b.w	23fc5f0 <hal_usart_is_enabled>

023fd6d6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fd6d6:	7441      	strb	r1, [r0, #17]
}
 23fd6d8:	4770      	bx	lr

023fd6da <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fd6da:	4770      	bx	lr

023fd6dc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fd6dc:	4770      	bx	lr

023fd6de <_ZN9USBSerial4readEv>:
{
 23fd6de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fd6e0:	2100      	movs	r1, #0
 23fd6e2:	7c00      	ldrb	r0, [r0, #16]
 23fd6e4:	f7fe ffe6 	bl	23fc6b4 <HAL_USB_USART_Receive_Data>
}
 23fd6e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd6ec:	bd08      	pop	{r3, pc}

023fd6ee <_ZN9USBSerial4peekEv>:
{
 23fd6ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fd6f0:	2101      	movs	r1, #1
 23fd6f2:	7c00      	ldrb	r0, [r0, #16]
 23fd6f4:	f7fe ffde 	bl	23fc6b4 <HAL_USB_USART_Receive_Data>
}
 23fd6f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd6fc:	bd08      	pop	{r3, pc}

023fd6fe <_ZN9USBSerial17availableForWriteEv>:
{
 23fd6fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fd700:	7c00      	ldrb	r0, [r0, #16]
 23fd702:	f7fe ffc9 	bl	23fc698 <HAL_USB_USART_Available_Data_For_Write>
}
 23fd706:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd70a:	bd08      	pop	{r3, pc}

023fd70c <_ZN9USBSerial9availableEv>:
{
 23fd70c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fd70e:	7c00      	ldrb	r0, [r0, #16]
 23fd710:	f7fe ffb4 	bl	23fc67c <HAL_USB_USART_Available_Data>
}
 23fd714:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd718:	bd08      	pop	{r3, pc}

023fd71a <_ZN9USBSerial5writeEh>:
{
 23fd71a:	b513      	push	{r0, r1, r4, lr}
 23fd71c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fd71e:	7c00      	ldrb	r0, [r0, #16]
{
 23fd720:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fd722:	f7fe ffb9 	bl	23fc698 <HAL_USB_USART_Available_Data_For_Write>
 23fd726:	2800      	cmp	r0, #0
 23fd728:	9901      	ldr	r1, [sp, #4]
 23fd72a:	dc01      	bgt.n	23fd730 <_ZN9USBSerial5writeEh+0x16>
 23fd72c:	7c60      	ldrb	r0, [r4, #17]
 23fd72e:	b120      	cbz	r0, 23fd73a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fd730:	7c20      	ldrb	r0, [r4, #16]
 23fd732:	f7fe ffcd 	bl	23fc6d0 <HAL_USB_USART_Send_Data>
 23fd736:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fd73a:	b002      	add	sp, #8
 23fd73c:	bd10      	pop	{r4, pc}

023fd73e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fd73e:	7c00      	ldrb	r0, [r0, #16]
 23fd740:	f7fe bfd4 	b.w	23fc6ec <HAL_USB_USART_Flush_Data>

023fd744 <_ZN9USBSerialD0Ev>:
 23fd744:	b510      	push	{r4, lr}
 23fd746:	4604      	mov	r4, r0
 23fd748:	2114      	movs	r1, #20
 23fd74a:	f7fc ff7e 	bl	23fa64a <_ZdlPvj>
 23fd74e:	4620      	mov	r0, r4
 23fd750:	bd10      	pop	{r4, pc}
	...

023fd754 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fd754:	b510      	push	{r4, lr}
 23fd756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd75a:	4604      	mov	r4, r0
 23fd75c:	4608      	mov	r0, r1
 23fd75e:	2100      	movs	r1, #0
 23fd760:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fd764:	4b04      	ldr	r3, [pc, #16]	; (23fd778 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fd766:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fd768:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fd76a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fd76c:	4611      	mov	r1, r2
  _blocking = true;
 23fd76e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fd770:	f7fe ff68 	bl	23fc644 <HAL_USB_USART_Init>
}
 23fd774:	4620      	mov	r0, r4
 23fd776:	bd10      	pop	{r4, pc}
 23fd778:	023ffefc 	.word	0x023ffefc

023fd77c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fd77c:	2200      	movs	r2, #0
 23fd77e:	7c00      	ldrb	r0, [r0, #16]
 23fd780:	f7fe bf6e 	b.w	23fc660 <HAL_USB_USART_Begin>

023fd784 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
 23fd784:	7c00      	ldrb	r0, [r0, #16]
 23fd786:	f7fe bfbf 	b.w	23fc708 <HAL_USB_USART_Is_Enabled>

023fd78a <_ZN9USBSerialcvbEv>:
  return isEnabled();
 23fd78a:	f7ff bffb 	b.w	23fd784 <_ZN9USBSerial9isEnabledEv>

023fd78e <_Z19acquireSerialBufferv>:
{
 23fd78e:	b510      	push	{r4, lr}
 23fd790:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fd792:	2214      	movs	r2, #20
 23fd794:	2100      	movs	r1, #0
 23fd796:	f000 fad9 	bl	23fdd4c <memset>
}
 23fd79a:	4620      	mov	r0, r4
 23fd79c:	bd10      	pop	{r4, pc}
	...

023fd7a0 <_Z16_fetch_usbserialv>:
{
 23fd7a0:	b510      	push	{r4, lr}
 23fd7a2:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fd7a4:	a803      	add	r0, sp, #12
 23fd7a6:	f7ff fff2 	bl	23fd78e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fd7aa:	4c0c      	ldr	r4, [pc, #48]	; (23fd7dc <_Z16_fetch_usbserialv+0x3c>)
 23fd7ac:	e8d4 1f8f 	ldab	r1, [r4]
 23fd7b0:	f011 0101 	ands.w	r1, r1, #1
 23fd7b4:	d10f      	bne.n	23fd7d6 <_Z16_fetch_usbserialv+0x36>
 23fd7b6:	4620      	mov	r0, r4
 23fd7b8:	9101      	str	r1, [sp, #4]
 23fd7ba:	f7fc ff55 	bl	23fa668 <__cxa_guard_acquire>
 23fd7be:	9901      	ldr	r1, [sp, #4]
 23fd7c0:	b148      	cbz	r0, 23fd7d6 <_Z16_fetch_usbserialv+0x36>
 23fd7c2:	aa03      	add	r2, sp, #12
 23fd7c4:	4806      	ldr	r0, [pc, #24]	; (23fd7e0 <_Z16_fetch_usbserialv+0x40>)
 23fd7c6:	f7ff ffc5 	bl	23fd754 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fd7ca:	4620      	mov	r0, r4
 23fd7cc:	f7fc ff51 	bl	23fa672 <__cxa_guard_release>
 23fd7d0:	4804      	ldr	r0, [pc, #16]	; (23fd7e4 <_Z16_fetch_usbserialv+0x44>)
 23fd7d2:	f000 faa8 	bl	23fdd26 <atexit>
	return _usbserial;
}
 23fd7d6:	4802      	ldr	r0, [pc, #8]	; (23fd7e0 <_Z16_fetch_usbserialv+0x40>)
 23fd7d8:	b008      	add	sp, #32
 23fd7da:	bd10      	pop	{r4, pc}
 23fd7dc:	1007aec8 	.word	0x1007aec8
 23fd7e0:	1007aecc 	.word	0x1007aecc
 23fd7e4:	023fd6db 	.word	0x023fd6db

023fd7e8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fd7e8:	2200      	movs	r2, #0
 23fd7ea:	6840      	ldr	r0, [r0, #4]
 23fd7ec:	4611      	mov	r1, r2
 23fd7ee:	f7ff b84f 	b.w	23fc890 <network_ready>

023fd7f2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd7f2:	2200      	movs	r2, #0
 23fd7f4:	6840      	ldr	r0, [r0, #4]
 23fd7f6:	4611      	mov	r1, r2
 23fd7f8:	f7ff b882 	b.w	23fc900 <network_listening>

023fd7fc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd7fc:	2200      	movs	r2, #0
 23fd7fe:	6840      	ldr	r0, [r0, #4]
 23fd800:	4611      	mov	r1, r2
 23fd802:	f7ff b899 	b.w	23fc938 <network_get_listen_timeout>

023fd806 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd806:	2200      	movs	r2, #0
 23fd808:	6840      	ldr	r0, [r0, #4]
 23fd80a:	f7ff b887 	b.w	23fc91c <network_set_listen_timeout>

023fd80e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd80e:	2200      	movs	r2, #0
 23fd810:	6840      	ldr	r0, [r0, #4]
 23fd812:	f081 0101 	eor.w	r1, r1, #1
 23fd816:	f7ff b865 	b.w	23fc8e4 <network_listen>

023fd81a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd81a:	2300      	movs	r3, #0
 23fd81c:	6840      	ldr	r0, [r0, #4]
 23fd81e:	461a      	mov	r2, r3
 23fd820:	4619      	mov	r1, r3
 23fd822:	f7ff b851 	b.w	23fc8c8 <network_off>

023fd826 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd826:	2300      	movs	r3, #0
 23fd828:	6840      	ldr	r0, [r0, #4]
 23fd82a:	461a      	mov	r2, r3
 23fd82c:	4619      	mov	r1, r3
 23fd82e:	f7ff b83d 	b.w	23fc8ac <network_on>

023fd832 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd832:	2200      	movs	r2, #0
 23fd834:	6840      	ldr	r0, [r0, #4]
 23fd836:	4611      	mov	r1, r2
 23fd838:	f7ff b80e 	b.w	23fc858 <network_connecting>

023fd83c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd83c:	2200      	movs	r2, #0
 23fd83e:	2102      	movs	r1, #2
 23fd840:	6840      	ldr	r0, [r0, #4]
 23fd842:	f7ff b817 	b.w	23fc874 <network_disconnect>

023fd846 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd846:	2300      	movs	r3, #0
 23fd848:	6840      	ldr	r0, [r0, #4]
 23fd84a:	461a      	mov	r2, r3
 23fd84c:	f7fe bff6 	b.w	23fc83c <network_connect>

023fd850 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fd850:	2204      	movs	r2, #4
 23fd852:	4b02      	ldr	r3, [pc, #8]	; (23fd85c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fd854:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fd856:	4a02      	ldr	r2, [pc, #8]	; (23fd860 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fd858:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fd85a:	4770      	bx	lr
 23fd85c:	1007aee0 	.word	0x1007aee0
 23fd860:	023fff2c 	.word	0x023fff2c

023fd864 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fd864:	4b01      	ldr	r3, [pc, #4]	; (23fd86c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fd866:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fd868:	4770      	bx	lr
 23fd86a:	bf00      	nop
 23fd86c:	1007ad88 	.word	0x1007ad88

023fd870 <serialEventRun>:
{
 23fd870:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fd872:	4b0f      	ldr	r3, [pc, #60]	; (23fd8b0 <serialEventRun+0x40>)
 23fd874:	b143      	cbz	r3, 23fd888 <serialEventRun+0x18>
 23fd876:	f7ff ff93 	bl	23fd7a0 <_Z16_fetch_usbserialv>
 23fd87a:	6803      	ldr	r3, [r0, #0]
 23fd87c:	691b      	ldr	r3, [r3, #16]
 23fd87e:	4798      	blx	r3
 23fd880:	2800      	cmp	r0, #0
 23fd882:	dd01      	ble.n	23fd888 <serialEventRun+0x18>
        serialEvent();
 23fd884:	e000      	b.n	23fd888 <serialEventRun+0x18>
 23fd886:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fd888:	4b0a      	ldr	r3, [pc, #40]	; (23fd8b4 <serialEventRun+0x44>)
 23fd88a:	b143      	cbz	r3, 23fd89e <serialEventRun+0x2e>
 23fd88c:	f000 f9b6 	bl	23fdbfc <_Z22__fetch_global_Serial1v>
 23fd890:	6803      	ldr	r3, [r0, #0]
 23fd892:	691b      	ldr	r3, [r3, #16]
 23fd894:	4798      	blx	r3
 23fd896:	2800      	cmp	r0, #0
 23fd898:	dd01      	ble.n	23fd89e <serialEventRun+0x2e>
        serialEvent1();
 23fd89a:	e000      	b.n	23fd89e <serialEventRun+0x2e>
 23fd89c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fd89e:	4b06      	ldr	r3, [pc, #24]	; (23fd8b8 <serialEventRun+0x48>)
 23fd8a0:	b10b      	cbz	r3, 23fd8a6 <serialEventRun+0x36>
 23fd8a2:	f000 f9f1 	bl	23fdc88 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fd8a6:	4b05      	ldr	r3, [pc, #20]	; (23fd8bc <serialEventRun+0x4c>)
 23fd8a8:	b10b      	cbz	r3, 23fd8ae <serialEventRun+0x3e>
 23fd8aa:	f000 fa23 	bl	23fdcf4 <_Z15serialEventRun3v>
}
 23fd8ae:	bd08      	pop	{r3, pc}
	...

023fd8c0 <_post_loop>:
{
 23fd8c0:	b508      	push	{r3, lr}
	serialEventRun();
 23fd8c2:	f7ff ffd5 	bl	23fd870 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fd8c6:	f7fe fc7f 	bl	23fc1c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fd8ca:	4b01      	ldr	r3, [pc, #4]	; (23fd8d0 <_post_loop+0x10>)
 23fd8cc:	6018      	str	r0, [r3, #0]
}
 23fd8ce:	bd08      	pop	{r3, pc}
 23fd8d0:	1007aef0 	.word	0x1007aef0

023fd8d4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fd8d4:	4805      	ldr	r0, [pc, #20]	; (23fd8ec <_Z33system_initialize_user_backup_ramv+0x18>)
 23fd8d6:	4a06      	ldr	r2, [pc, #24]	; (23fd8f0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fd8d8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fd8da:	1a12      	subs	r2, r2, r0
 23fd8dc:	4905      	ldr	r1, [pc, #20]	; (23fd8f4 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fd8de:	f000 fa28 	bl	23fdd32 <memcpy>
    __backup_sram_signature = signature;
 23fd8e2:	4b05      	ldr	r3, [pc, #20]	; (23fd8f8 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fd8e4:	4a05      	ldr	r2, [pc, #20]	; (23fd8fc <_Z33system_initialize_user_backup_ramv+0x28>)
 23fd8e6:	601a      	str	r2, [r3, #0]
}
 23fd8e8:	bd08      	pop	{r3, pc}
 23fd8ea:	bf00      	nop
 23fd8ec:	1007b400 	.word	0x1007b400
 23fd8f0:	1007b404 	.word	0x1007b404
 23fd8f4:	085ffb00 	.word	0x085ffb00
 23fd8f8:	1007b400 	.word	0x1007b400
 23fd8fc:	9a271c1e 	.word	0x9a271c1e

023fd900 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd900:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fd902:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd904:	461a      	mov	r2, r3
 23fd906:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fd90a:	9300      	str	r3, [sp, #0]
 23fd90c:	f7fe ff5e 	bl	23fc7cc <system_ctrl_set_result>
}
 23fd910:	b003      	add	sp, #12
 23fd912:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fd918 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fd918:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fd91a:	8843      	ldrh	r3, [r0, #2]
 23fd91c:	2b0a      	cmp	r3, #10
 23fd91e:	d008      	beq.n	23fd932 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fd920:	2b50      	cmp	r3, #80	; 0x50
 23fd922:	d10b      	bne.n	23fd93c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fd924:	4b09      	ldr	r3, [pc, #36]	; (23fd94c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fd926:	681b      	ldr	r3, [r3, #0]
 23fd928:	b14b      	cbz	r3, 23fd93e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fd92a:	b003      	add	sp, #12
 23fd92c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fd930:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fd932:	f7ff ffe5 	bl	23fd900 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fd936:	b003      	add	sp, #12
 23fd938:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd93c:	2300      	movs	r3, #0
 23fd93e:	461a      	mov	r2, r3
 23fd940:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fd944:	9300      	str	r3, [sp, #0]
 23fd946:	f7fe ff41 	bl	23fc7cc <system_ctrl_set_result>
}
 23fd94a:	e7f4      	b.n	23fd936 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fd94c:	1007aeec 	.word	0x1007aeec

023fd950 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fd950:	2100      	movs	r1, #0
{
 23fd952:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fd954:	4811      	ldr	r0, [pc, #68]	; (23fd99c <module_user_init_hook+0x4c>)
 23fd956:	f7ff f85f 	bl	23fca18 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fd95a:	4b11      	ldr	r3, [pc, #68]	; (23fd9a0 <module_user_init_hook+0x50>)
 23fd95c:	681a      	ldr	r2, [r3, #0]
 23fd95e:	4b11      	ldr	r3, [pc, #68]	; (23fd9a4 <module_user_init_hook+0x54>)
 23fd960:	429a      	cmp	r2, r3
 23fd962:	bf0c      	ite	eq
 23fd964:	2201      	moveq	r2, #1
 23fd966:	2200      	movne	r2, #0
 23fd968:	4b0f      	ldr	r3, [pc, #60]	; (23fd9a8 <module_user_init_hook+0x58>)
 23fd96a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fd96c:	d001      	beq.n	23fd972 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fd96e:	f7ff ffb1 	bl	23fd8d4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fd972:	f7fe fc0d 	bl	23fc190 <HAL_RNG_GetRandomNumber>
 23fd976:	4604      	mov	r4, r0
    srand(seed);
 23fd978:	f000 f9f0 	bl	23fdd5c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fd97c:	4b0b      	ldr	r3, [pc, #44]	; (23fd9ac <module_user_init_hook+0x5c>)
 23fd97e:	b113      	cbz	r3, 23fd986 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fd980:	4620      	mov	r0, r4
 23fd982:	e000      	b.n	23fd986 <module_user_init_hook+0x36>
 23fd984:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fd986:	2100      	movs	r1, #0
 23fd988:	4808      	ldr	r0, [pc, #32]	; (23fd9ac <module_user_init_hook+0x5c>)
 23fd98a:	f7fe ff49 	bl	23fc820 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fd98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fd992:	2100      	movs	r1, #0
 23fd994:	4806      	ldr	r0, [pc, #24]	; (23fd9b0 <module_user_init_hook+0x60>)
 23fd996:	f7fe bf0b 	b.w	23fc7b0 <system_ctrl_set_app_request_handler>
 23fd99a:	bf00      	nop
 23fd99c:	023fd865 	.word	0x023fd865
 23fd9a0:	1007b400 	.word	0x1007b400
 23fd9a4:	9a271c1e 	.word	0x9a271c1e
 23fd9a8:	1007aee8 	.word	0x1007aee8
 23fd9ac:	00000000 	.word	0x00000000
 23fd9b0:	023fd919 	.word	0x023fd919

023fd9b4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fd9b4:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fd9b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd9b8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fd9ba:	d902      	bls.n	23fd9c2 <pinAvailable+0xe>
    return false;
 23fd9bc:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fd9be:	b003      	add	sp, #12
 23fd9c0:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fd9c2:	f1a0 030f 	sub.w	r3, r0, #15
 23fd9c6:	2b02      	cmp	r3, #2
 23fd9c8:	d90b      	bls.n	23fd9e2 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fd9ca:	2801      	cmp	r0, #1
 23fd9cc:	d821      	bhi.n	23fda12 <pinAvailable+0x5e>
 23fd9ce:	f000 f8c1 	bl	23fdb54 <_Z19__fetch_global_Wirev>
 23fd9d2:	2100      	movs	r1, #0
 23fd9d4:	7c00      	ldrb	r0, [r0, #16]
 23fd9d6:	f7fe fd01 	bl	23fc3dc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fd9da:	f080 0001 	eor.w	r0, r0, #1
 23fd9de:	b2c0      	uxtb	r0, r0
 23fd9e0:	e7ed      	b.n	23fd9be <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fd9e2:	4d11      	ldr	r5, [pc, #68]	; (23fda28 <pinAvailable+0x74>)
 23fd9e4:	e8d5 1f8f 	ldab	r1, [r5]
 23fd9e8:	f011 0101 	ands.w	r1, r1, #1
 23fd9ec:	d10b      	bne.n	23fda06 <pinAvailable+0x52>
 23fd9ee:	4628      	mov	r0, r5
 23fd9f0:	9101      	str	r1, [sp, #4]
 23fd9f2:	f7fc fe39 	bl	23fa668 <__cxa_guard_acquire>
 23fd9f6:	9901      	ldr	r1, [sp, #4]
 23fd9f8:	b128      	cbz	r0, 23fda06 <pinAvailable+0x52>
 23fd9fa:	480c      	ldr	r0, [pc, #48]	; (23fda2c <pinAvailable+0x78>)
 23fd9fc:	f7ff fd4e 	bl	23fd49c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fda00:	4628      	mov	r0, r5
 23fda02:	f7fc fe36 	bl	23fa672 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fda06:	4b09      	ldr	r3, [pc, #36]	; (23fda2c <pinAvailable+0x78>)
 23fda08:	7818      	ldrb	r0, [r3, #0]
 23fda0a:	f7fe fd65 	bl	23fc4d8 <hal_spi_is_enabled>
 23fda0e:	2800      	cmp	r0, #0
 23fda10:	d1d4      	bne.n	23fd9bc <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fda12:	3c08      	subs	r4, #8
 23fda14:	2c01      	cmp	r4, #1
 23fda16:	d805      	bhi.n	23fda24 <pinAvailable+0x70>
 23fda18:	f000 f8f0 	bl	23fdbfc <_Z22__fetch_global_Serial1v>
 23fda1c:	7c00      	ldrb	r0, [r0, #16]
 23fda1e:	f7fe fde7 	bl	23fc5f0 <hal_usart_is_enabled>
 23fda22:	e7da      	b.n	23fd9da <pinAvailable+0x26>
  return true; // 'pin' is available
 23fda24:	2001      	movs	r0, #1
 23fda26:	e7ca      	b.n	23fd9be <pinAvailable+0xa>
 23fda28:	1007ae80 	.word	0x1007ae80
 23fda2c:	1007ae84 	.word	0x1007ae84

023fda30 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fda30:	281b      	cmp	r0, #27
{
 23fda32:	b538      	push	{r3, r4, r5, lr}
 23fda34:	4604      	mov	r4, r0
 23fda36:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fda38:	d80a      	bhi.n	23fda50 <pinMode+0x20>
 23fda3a:	29ff      	cmp	r1, #255	; 0xff
 23fda3c:	d008      	beq.n	23fda50 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fda3e:	f7ff ffb9 	bl	23fd9b4 <pinAvailable>
 23fda42:	b128      	cbz	r0, 23fda50 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fda44:	4629      	mov	r1, r5
 23fda46:	4620      	mov	r0, r4
}
 23fda48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fda4c:	f7fe bbd8 	b.w	23fc200 <hal_gpio_mode>
}
 23fda50:	bd38      	pop	{r3, r4, r5, pc}

023fda52 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fda52:	b538      	push	{r3, r4, r5, lr}
 23fda54:	4604      	mov	r4, r0
 23fda56:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fda58:	f7fe fbe0 	bl	23fc21c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fda5c:	28ff      	cmp	r0, #255	; 0xff
 23fda5e:	d010      	beq.n	23fda82 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fda60:	2806      	cmp	r0, #6
 23fda62:	d804      	bhi.n	23fda6e <digitalWrite+0x1c>
 23fda64:	234d      	movs	r3, #77	; 0x4d
 23fda66:	fa23 f000 	lsr.w	r0, r3, r0
 23fda6a:	07c3      	lsls	r3, r0, #31
 23fda6c:	d409      	bmi.n	23fda82 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fda6e:	4620      	mov	r0, r4
 23fda70:	f7ff ffa0 	bl	23fd9b4 <pinAvailable>
 23fda74:	b128      	cbz	r0, 23fda82 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fda76:	4629      	mov	r1, r5
 23fda78:	4620      	mov	r0, r4
}
 23fda7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fda7e:	f7fe bbdb 	b.w	23fc238 <hal_gpio_write>
}
 23fda82:	bd38      	pop	{r3, r4, r5, pc}

023fda84 <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(hal_pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
 23fda84:	b570      	push	{r4, r5, r6, lr}
 23fda86:	4604      	mov	r4, r0
 23fda88:	460d      	mov	r5, r1
 23fda8a:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
 23fda8c:	f7ff ff92 	bl	23fd9b4 <pinAvailable>
 23fda90:	b198      	cbz	r0, 23fdaba <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
 23fda92:	2102      	movs	r1, #2
 23fda94:	4620      	mov	r0, r4
 23fda96:	f7fe fba5 	bl	23fc1e4 <hal_pin_validate_function>
 23fda9a:	2802      	cmp	r0, #2
 23fda9c:	d10d      	bne.n	23fdaba <_Z11analogWritetmm+0x36>
    {
        PinMode mode = hal_gpio_get_mode(pin);
 23fda9e:	4620      	mov	r0, r4
 23fdaa0:	f7fe fbbc 	bl	23fc21c <hal_gpio_get_mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 23fdaa4:	2801      	cmp	r0, #1
 23fdaa6:	d001      	beq.n	23fdaac <_Z11analogWritetmm+0x28>
 23fdaa8:	2804      	cmp	r0, #4
 23fdaaa:	d106      	bne.n	23fdaba <_Z11analogWritetmm+0x36>
        {
            return;
        }

        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
 23fdaac:	4632      	mov	r2, r6
 23fdaae:	4629      	mov	r1, r5
 23fdab0:	4620      	mov	r0, r4
    }
}
 23fdab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
 23fdab6:	f7fe bc05 	b.w	23fc2c4 <hal_pwm_write_with_frequency_ext>
}
 23fdaba:	bd70      	pop	{r4, r5, r6, pc}

023fdabc <_Z21analogWriteResolutionth>:

uint8_t analogWriteResolution(hal_pin_t pin, uint8_t value)
{
 23fdabc:	b538      	push	{r3, r4, r5, lr}
 23fdabe:	4604      	mov	r4, r0
 23fdac0:	460d      	mov	r5, r1
  // Safety check
  if (!pinAvailable(pin))
 23fdac2:	f7ff ff77 	bl	23fd9b4 <pinAvailable>
 23fdac6:	b1e8      	cbz	r0, 23fdb04 <_Z21analogWriteResolutionth+0x48>
  {
      return 0;
  }

  if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
 23fdac8:	2104      	movs	r1, #4
 23fdaca:	4620      	mov	r0, r4
 23fdacc:	f7fe fb8a 	bl	23fc1e4 <hal_pin_validate_function>
 23fdad0:	2804      	cmp	r0, #4
 23fdad2:	d108      	bne.n	23fdae6 <_Z21analogWriteResolutionth+0x2a>
  {
    HAL_DAC_Set_Resolution(pin, value);
 23fdad4:	4620      	mov	r0, r4
 23fdad6:	4629      	mov	r1, r5
 23fdad8:	f7fe fbca 	bl	23fc270 <HAL_DAC_Set_Resolution>
    return HAL_DAC_Get_Resolution(pin);
 23fdadc:	4620      	mov	r0, r4
    return hal_pwm_get_resolution(pin);
  }
  

  return 0;
}
 23fdade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return HAL_DAC_Get_Resolution(pin);
 23fdae2:	f7fe bbb7 	b.w	23fc254 <HAL_DAC_Get_Resolution>
  else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
 23fdae6:	2102      	movs	r1, #2
 23fdae8:	4620      	mov	r0, r4
 23fdaea:	f7fe fb7b 	bl	23fc1e4 <hal_pin_validate_function>
 23fdaee:	2802      	cmp	r0, #2
 23fdaf0:	d108      	bne.n	23fdb04 <_Z21analogWriteResolutionth+0x48>
    hal_pwm_set_resolution(pin, value);
 23fdaf2:	4620      	mov	r0, r4
 23fdaf4:	4629      	mov	r1, r5
 23fdaf6:	f7fe fbd7 	bl	23fc2a8 <hal_pwm_set_resolution>
    return hal_pwm_get_resolution(pin);
 23fdafa:	4620      	mov	r0, r4
}
 23fdafc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_pwm_get_resolution(pin);
 23fdb00:	f7fe bbc4 	b.w	23fc28c <hal_pwm_get_resolution>
}
 23fdb04:	2000      	movs	r0, #0
 23fdb06:	bd38      	pop	{r3, r4, r5, pc}

023fdb08 <_Z23analogWriteMaxFrequencyt>:

  return 0;
}

uint32_t analogWriteMaxFrequency(hal_pin_t pin)
{
 23fdb08:	b510      	push	{r4, lr}
 23fdb0a:	4604      	mov	r4, r0
  // Safety check
  if (!pinAvailable(pin))
 23fdb0c:	f7ff ff52 	bl	23fd9b4 <pinAvailable>
 23fdb10:	b120      	cbz	r0, 23fdb1c <_Z23analogWriteMaxFrequencyt+0x14>
  {
      return 0;
  }

  return hal_pwm_get_max_frequency(pin);
 23fdb12:	4620      	mov	r0, r4
}
 23fdb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_pwm_get_max_frequency(pin);
 23fdb18:	f7fe bbe2 	b.w	23fc2e0 <hal_pwm_get_max_frequency>
}
 23fdb1c:	bd10      	pop	{r4, pc}

023fdb1e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fdb1e:	4770      	bx	lr

023fdb20 <_Z17acquireWireBufferv>:
{
 23fdb20:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fdb22:	4b0a      	ldr	r3, [pc, #40]	; (23fdb4c <_Z17acquireWireBufferv+0x2c>)
{
 23fdb24:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fdb26:	6003      	str	r3, [r0, #0]
 23fdb28:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdb2a:	4909      	ldr	r1, [pc, #36]	; (23fdb50 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fdb2c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdb2e:	2020      	movs	r0, #32
 23fdb30:	f000 f8f4 	bl	23fdd1c <_ZnajRKSt9nothrow_t>
	};
 23fdb34:	2520      	movs	r5, #32
 23fdb36:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdb38:	4905      	ldr	r1, [pc, #20]	; (23fdb50 <_Z17acquireWireBufferv+0x30>)
 23fdb3a:	4628      	mov	r0, r5
	};
 23fdb3c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fdb3e:	f000 f8ed 	bl	23fdd1c <_ZnajRKSt9nothrow_t>
	};
 23fdb42:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fdb46:	4620      	mov	r0, r4
 23fdb48:	bd38      	pop	{r3, r4, r5, pc}
 23fdb4a:	bf00      	nop
 23fdb4c:	00010018 	.word	0x00010018
 23fdb50:	023fff60 	.word	0x023fff60

023fdb54 <_Z19__fetch_global_Wirev>:
{
 23fdb54:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fdb56:	4d0e      	ldr	r5, [pc, #56]	; (23fdb90 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fdb58:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fdb5a:	e8d5 1f8f 	ldab	r1, [r5]
 23fdb5e:	f011 0401 	ands.w	r4, r1, #1
 23fdb62:	d111      	bne.n	23fdb88 <_Z19__fetch_global_Wirev+0x34>
 23fdb64:	4628      	mov	r0, r5
 23fdb66:	f7fc fd7f 	bl	23fa668 <__cxa_guard_acquire>
 23fdb6a:	b168      	cbz	r0, 23fdb88 <_Z19__fetch_global_Wirev+0x34>
 23fdb6c:	4668      	mov	r0, sp
 23fdb6e:	f7ff ffd7 	bl	23fdb20 <_Z17acquireWireBufferv>
 23fdb72:	466a      	mov	r2, sp
 23fdb74:	4621      	mov	r1, r4
 23fdb76:	4807      	ldr	r0, [pc, #28]	; (23fdb94 <_Z19__fetch_global_Wirev+0x40>)
 23fdb78:	f7ff fa96 	bl	23fd0a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fdb7c:	4628      	mov	r0, r5
 23fdb7e:	f7fc fd78 	bl	23fa672 <__cxa_guard_release>
 23fdb82:	4805      	ldr	r0, [pc, #20]	; (23fdb98 <_Z19__fetch_global_Wirev+0x44>)
 23fdb84:	f000 f8cf 	bl	23fdd26 <atexit>
	return wire;
}
 23fdb88:	4802      	ldr	r0, [pc, #8]	; (23fdb94 <_Z19__fetch_global_Wirev+0x40>)
 23fdb8a:	b007      	add	sp, #28
 23fdb8c:	bd30      	pop	{r4, r5, pc}
 23fdb8e:	bf00      	nop
 23fdb90:	1007aef4 	.word	0x1007aef4
 23fdb94:	1007aef8 	.word	0x1007aef8
 23fdb98:	023fdb1f 	.word	0x023fdb1f

023fdb9c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fdb9c:	4770      	bx	lr
	...

023fdba0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fdba0:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fdba2:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fdba4:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fdba6:	462a      	mov	r2, r5
 23fdba8:	2100      	movs	r1, #0
 23fdbaa:	f000 f8cf 	bl	23fdd4c <memset>
 23fdbae:	8025      	strh	r5, [r4, #0]
 23fdbb0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdbb2:	4907      	ldr	r1, [pc, #28]	; (23fdbd0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fdbb4:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fdbb6:	8125      	strh	r5, [r4, #8]
 23fdbb8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdbba:	f000 f8af 	bl	23fdd1c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdbbe:	4904      	ldr	r1, [pc, #16]	; (23fdbd0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fdbc0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fdbc2:	4628      	mov	r0, r5
 23fdbc4:	f000 f8aa 	bl	23fdd1c <_ZnajRKSt9nothrow_t>
    };
 23fdbc8:	60e0      	str	r0, [r4, #12]
}
 23fdbca:	4620      	mov	r0, r4
 23fdbcc:	bd38      	pop	{r3, r4, r5, pc}
 23fdbce:	bf00      	nop
 23fdbd0:	023fff60 	.word	0x023fff60

023fdbd4 <__tcf_2>:
 23fdbd4:	4770      	bx	lr

023fdbd6 <__tcf_1>:
 23fdbd6:	4770      	bx	lr

023fdbd8 <_Z20acquireSerial1Bufferv>:
{
 23fdbd8:	b510      	push	{r4, lr}
 23fdbda:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fdbdc:	f7ff ffe0 	bl	23fdba0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fdbe0:	4620      	mov	r0, r4
 23fdbe2:	bd10      	pop	{r4, pc}

023fdbe4 <_Z20acquireSerial2Bufferv>:
 23fdbe4:	b510      	push	{r4, lr}
 23fdbe6:	4604      	mov	r4, r0
 23fdbe8:	f7ff ffda 	bl	23fdba0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fdbec:	4620      	mov	r0, r4
 23fdbee:	bd10      	pop	{r4, pc}

023fdbf0 <_Z20acquireSerial3Bufferv>:
 23fdbf0:	b510      	push	{r4, lr}
 23fdbf2:	4604      	mov	r4, r0
 23fdbf4:	f7ff ffd4 	bl	23fdba0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fdbf8:	4620      	mov	r0, r4
 23fdbfa:	bd10      	pop	{r4, pc}

023fdbfc <_Z22__fetch_global_Serial1v>:
{
 23fdbfc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fdbfe:	4d0e      	ldr	r5, [pc, #56]	; (23fdc38 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fdc00:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fdc02:	e8d5 1f8f 	ldab	r1, [r5]
 23fdc06:	f011 0401 	ands.w	r4, r1, #1
 23fdc0a:	d111      	bne.n	23fdc30 <_Z22__fetch_global_Serial1v+0x34>
 23fdc0c:	4628      	mov	r0, r5
 23fdc0e:	f7fc fd2b 	bl	23fa668 <__cxa_guard_acquire>
 23fdc12:	b168      	cbz	r0, 23fdc30 <_Z22__fetch_global_Serial1v+0x34>
 23fdc14:	a801      	add	r0, sp, #4
 23fdc16:	f7ff ffdf 	bl	23fdbd8 <_Z20acquireSerial1Bufferv>
 23fdc1a:	4621      	mov	r1, r4
 23fdc1c:	aa01      	add	r2, sp, #4
 23fdc1e:	4807      	ldr	r0, [pc, #28]	; (23fdc3c <_Z22__fetch_global_Serial1v+0x40>)
 23fdc20:	f7ff fd42 	bl	23fd6a8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fdc24:	4628      	mov	r0, r5
 23fdc26:	f7fc fd24 	bl	23fa672 <__cxa_guard_release>
 23fdc2a:	4805      	ldr	r0, [pc, #20]	; (23fdc40 <_Z22__fetch_global_Serial1v+0x44>)
 23fdc2c:	f000 f87b 	bl	23fdd26 <atexit>
    return serial1;
}
 23fdc30:	4802      	ldr	r0, [pc, #8]	; (23fdc3c <_Z22__fetch_global_Serial1v+0x40>)
 23fdc32:	b007      	add	sp, #28
 23fdc34:	bd30      	pop	{r4, r5, pc}
 23fdc36:	bf00      	nop
 23fdc38:	1007af0c 	.word	0x1007af0c
 23fdc3c:	1007af18 	.word	0x1007af18
 23fdc40:	023fdb9d 	.word	0x023fdb9d

023fdc44 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fdc44:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fdc46:	4c0d      	ldr	r4, [pc, #52]	; (23fdc7c <_Z22__fetch_global_Serial2v+0x38>)
{
 23fdc48:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fdc4a:	e8d4 3f8f 	ldab	r3, [r4]
 23fdc4e:	07db      	lsls	r3, r3, #31
 23fdc50:	d411      	bmi.n	23fdc76 <_Z22__fetch_global_Serial2v+0x32>
 23fdc52:	4620      	mov	r0, r4
 23fdc54:	f7fc fd08 	bl	23fa668 <__cxa_guard_acquire>
 23fdc58:	b168      	cbz	r0, 23fdc76 <_Z22__fetch_global_Serial2v+0x32>
 23fdc5a:	a801      	add	r0, sp, #4
 23fdc5c:	f7ff ffc2 	bl	23fdbe4 <_Z20acquireSerial2Bufferv>
 23fdc60:	2101      	movs	r1, #1
 23fdc62:	aa01      	add	r2, sp, #4
 23fdc64:	4806      	ldr	r0, [pc, #24]	; (23fdc80 <_Z22__fetch_global_Serial2v+0x3c>)
 23fdc66:	f7ff fd1f 	bl	23fd6a8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fdc6a:	4620      	mov	r0, r4
 23fdc6c:	f7fc fd01 	bl	23fa672 <__cxa_guard_release>
 23fdc70:	4804      	ldr	r0, [pc, #16]	; (23fdc84 <_Z22__fetch_global_Serial2v+0x40>)
 23fdc72:	f000 f858 	bl	23fdd26 <atexit>
	return serial2;
}
 23fdc76:	4802      	ldr	r0, [pc, #8]	; (23fdc80 <_Z22__fetch_global_Serial2v+0x3c>)
 23fdc78:	b006      	add	sp, #24
 23fdc7a:	bd10      	pop	{r4, pc}
 23fdc7c:	1007af10 	.word	0x1007af10
 23fdc80:	1007af2c 	.word	0x1007af2c
 23fdc84:	023fdbd7 	.word	0x023fdbd7

023fdc88 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fdc88:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fdc8a:	f7ff ffdb 	bl	23fdc44 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fdc8e:	4b07      	ldr	r3, [pc, #28]	; (23fdcac <_Z15serialEventRun2v+0x24>)
 23fdc90:	4604      	mov	r4, r0
 23fdc92:	b153      	cbz	r3, 23fdcaa <_Z15serialEventRun2v+0x22>
 23fdc94:	f7ff fd1c 	bl	23fd6d0 <_ZN11USARTSerial9isEnabledEv>
 23fdc98:	b138      	cbz	r0, 23fdcaa <_Z15serialEventRun2v+0x22>
 23fdc9a:	6823      	ldr	r3, [r4, #0]
 23fdc9c:	4620      	mov	r0, r4
 23fdc9e:	691b      	ldr	r3, [r3, #16]
 23fdca0:	4798      	blx	r3
 23fdca2:	2800      	cmp	r0, #0
 23fdca4:	dd01      	ble.n	23fdcaa <_Z15serialEventRun2v+0x22>
        handler();
 23fdca6:	e000      	b.n	23fdcaa <_Z15serialEventRun2v+0x22>
 23fdca8:	bf00      	nop
}
 23fdcaa:	bd10      	pop	{r4, pc}
 23fdcac:	00000000 	.word	0x00000000

023fdcb0 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fdcb0:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fdcb2:	4c0d      	ldr	r4, [pc, #52]	; (23fdce8 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fdcb4:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fdcb6:	e8d4 3f8f 	ldab	r3, [r4]
 23fdcba:	07db      	lsls	r3, r3, #31
 23fdcbc:	d411      	bmi.n	23fdce2 <_Z22__fetch_global_Serial3v+0x32>
 23fdcbe:	4620      	mov	r0, r4
 23fdcc0:	f7fc fcd2 	bl	23fa668 <__cxa_guard_acquire>
 23fdcc4:	b168      	cbz	r0, 23fdce2 <_Z22__fetch_global_Serial3v+0x32>
 23fdcc6:	a801      	add	r0, sp, #4
 23fdcc8:	f7ff ff92 	bl	23fdbf0 <_Z20acquireSerial3Bufferv>
 23fdccc:	2102      	movs	r1, #2
 23fdcce:	aa01      	add	r2, sp, #4
 23fdcd0:	4806      	ldr	r0, [pc, #24]	; (23fdcec <_Z22__fetch_global_Serial3v+0x3c>)
 23fdcd2:	f7ff fce9 	bl	23fd6a8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fdcd6:	4620      	mov	r0, r4
 23fdcd8:	f7fc fccb 	bl	23fa672 <__cxa_guard_release>
 23fdcdc:	4804      	ldr	r0, [pc, #16]	; (23fdcf0 <_Z22__fetch_global_Serial3v+0x40>)
 23fdcde:	f000 f822 	bl	23fdd26 <atexit>
	return serial3;
}
 23fdce2:	4802      	ldr	r0, [pc, #8]	; (23fdcec <_Z22__fetch_global_Serial3v+0x3c>)
 23fdce4:	b006      	add	sp, #24
 23fdce6:	bd10      	pop	{r4, pc}
 23fdce8:	1007af14 	.word	0x1007af14
 23fdcec:	1007af40 	.word	0x1007af40
 23fdcf0:	023fdbd5 	.word	0x023fdbd5

023fdcf4 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fdcf4:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fdcf6:	f7ff ffdb 	bl	23fdcb0 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fdcfa:	4b07      	ldr	r3, [pc, #28]	; (23fdd18 <_Z15serialEventRun3v+0x24>)
 23fdcfc:	4604      	mov	r4, r0
 23fdcfe:	b153      	cbz	r3, 23fdd16 <_Z15serialEventRun3v+0x22>
 23fdd00:	f7ff fce6 	bl	23fd6d0 <_ZN11USARTSerial9isEnabledEv>
 23fdd04:	b138      	cbz	r0, 23fdd16 <_Z15serialEventRun3v+0x22>
 23fdd06:	6823      	ldr	r3, [r4, #0]
 23fdd08:	4620      	mov	r0, r4
 23fdd0a:	691b      	ldr	r3, [r3, #16]
 23fdd0c:	4798      	blx	r3
 23fdd0e:	2800      	cmp	r0, #0
 23fdd10:	dd01      	ble.n	23fdd16 <_Z15serialEventRun3v+0x22>
        handler();
 23fdd12:	e000      	b.n	23fdd16 <_Z15serialEventRun3v+0x22>
 23fdd14:	bf00      	nop
}
 23fdd16:	bd10      	pop	{r4, pc}
 23fdd18:	00000000 	.word	0x00000000

023fdd1c <_ZnajRKSt9nothrow_t>:
 23fdd1c:	f7fc bc93 	b.w	23fa646 <_Znaj>

023fdd20 <_ZSt25__throw_bad_function_callv>:
 23fdd20:	b508      	push	{r3, lr}
 23fdd22:	f7fe fe4f 	bl	23fc9c4 <abort>

023fdd26 <atexit>:
 23fdd26:	2300      	movs	r3, #0
 23fdd28:	4601      	mov	r1, r0
 23fdd2a:	461a      	mov	r2, r3
 23fdd2c:	4618      	mov	r0, r3
 23fdd2e:	f000 b861 	b.w	23fddf4 <__register_exitproc>

023fdd32 <memcpy>:
 23fdd32:	440a      	add	r2, r1
 23fdd34:	1e43      	subs	r3, r0, #1
 23fdd36:	4291      	cmp	r1, r2
 23fdd38:	d100      	bne.n	23fdd3c <memcpy+0xa>
 23fdd3a:	4770      	bx	lr
 23fdd3c:	b510      	push	{r4, lr}
 23fdd3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fdd42:	4291      	cmp	r1, r2
 23fdd44:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fdd48:	d1f9      	bne.n	23fdd3e <memcpy+0xc>
 23fdd4a:	bd10      	pop	{r4, pc}

023fdd4c <memset>:
 23fdd4c:	4402      	add	r2, r0
 23fdd4e:	4603      	mov	r3, r0
 23fdd50:	4293      	cmp	r3, r2
 23fdd52:	d100      	bne.n	23fdd56 <memset+0xa>
 23fdd54:	4770      	bx	lr
 23fdd56:	f803 1b01 	strb.w	r1, [r3], #1
 23fdd5a:	e7f9      	b.n	23fdd50 <memset+0x4>

023fdd5c <srand>:
 23fdd5c:	b538      	push	{r3, r4, r5, lr}
 23fdd5e:	4b10      	ldr	r3, [pc, #64]	; (23fdda0 <srand+0x44>)
 23fdd60:	4604      	mov	r4, r0
 23fdd62:	681d      	ldr	r5, [r3, #0]
 23fdd64:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fdd66:	b9b3      	cbnz	r3, 23fdd96 <srand+0x3a>
 23fdd68:	2018      	movs	r0, #24
 23fdd6a:	f7fe fe0f 	bl	23fc98c <malloc>
 23fdd6e:	4602      	mov	r2, r0
 23fdd70:	63a8      	str	r0, [r5, #56]	; 0x38
 23fdd72:	b920      	cbnz	r0, 23fdd7e <srand+0x22>
 23fdd74:	4b0b      	ldr	r3, [pc, #44]	; (23fdda4 <srand+0x48>)
 23fdd76:	2142      	movs	r1, #66	; 0x42
 23fdd78:	480b      	ldr	r0, [pc, #44]	; (23fdda8 <srand+0x4c>)
 23fdd7a:	f7fe fe3f 	bl	23fc9fc <__assert_func>
 23fdd7e:	490b      	ldr	r1, [pc, #44]	; (23fddac <srand+0x50>)
 23fdd80:	4b0b      	ldr	r3, [pc, #44]	; (23fddb0 <srand+0x54>)
 23fdd82:	e9c0 1300 	strd	r1, r3, [r0]
 23fdd86:	4b0b      	ldr	r3, [pc, #44]	; (23fddb4 <srand+0x58>)
 23fdd88:	2100      	movs	r1, #0
 23fdd8a:	6083      	str	r3, [r0, #8]
 23fdd8c:	230b      	movs	r3, #11
 23fdd8e:	8183      	strh	r3, [r0, #12]
 23fdd90:	2001      	movs	r0, #1
 23fdd92:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fdd96:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fdd98:	2200      	movs	r2, #0
 23fdd9a:	611c      	str	r4, [r3, #16]
 23fdd9c:	615a      	str	r2, [r3, #20]
 23fdd9e:	bd38      	pop	{r3, r4, r5, pc}
 23fdda0:	1007ad88 	.word	0x1007ad88
 23fdda4:	023fff61 	.word	0x023fff61
 23fdda8:	023fff78 	.word	0x023fff78
 23fddac:	abcd330e 	.word	0xabcd330e
 23fddb0:	e66d1234 	.word	0xe66d1234
 23fddb4:	0005deec 	.word	0x0005deec

023fddb8 <strdup>:
 23fddb8:	4b02      	ldr	r3, [pc, #8]	; (23fddc4 <strdup+0xc>)
 23fddba:	4601      	mov	r1, r0
 23fddbc:	6818      	ldr	r0, [r3, #0]
 23fddbe:	f000 b803 	b.w	23fddc8 <_strdup_r>
 23fddc2:	bf00      	nop
 23fddc4:	1007ad88 	.word	0x1007ad88

023fddc8 <_strdup_r>:
 23fddc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fddca:	4604      	mov	r4, r0
 23fddcc:	4608      	mov	r0, r1
 23fddce:	460d      	mov	r5, r1
 23fddd0:	f7fc fc12 	bl	23fa5f8 <strlen>
 23fddd4:	1c42      	adds	r2, r0, #1
 23fddd6:	4620      	mov	r0, r4
 23fddd8:	4611      	mov	r1, r2
 23fddda:	9201      	str	r2, [sp, #4]
 23fdddc:	f7fe fe00 	bl	23fc9e0 <_malloc_r>
 23fdde0:	4604      	mov	r4, r0
 23fdde2:	b118      	cbz	r0, 23fddec <_strdup_r+0x24>
 23fdde4:	9a01      	ldr	r2, [sp, #4]
 23fdde6:	4629      	mov	r1, r5
 23fdde8:	f7ff ffa3 	bl	23fdd32 <memcpy>
 23fddec:	4620      	mov	r0, r4
 23fddee:	b003      	add	sp, #12
 23fddf0:	bd30      	pop	{r4, r5, pc}
	...

023fddf4 <__register_exitproc>:
 23fddf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fddf8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fdeb8 <__register_exitproc+0xc4>
 23fddfc:	4606      	mov	r6, r0
 23fddfe:	461f      	mov	r7, r3
 23fde00:	460d      	mov	r5, r1
 23fde02:	f8d8 0000 	ldr.w	r0, [r8]
 23fde06:	4691      	mov	r9, r2
 23fde08:	f000 f858 	bl	23fdebc <__retarget_lock_acquire_recursive>
 23fde0c:	4b26      	ldr	r3, [pc, #152]	; (23fdea8 <__register_exitproc+0xb4>)
 23fde0e:	681c      	ldr	r4, [r3, #0]
 23fde10:	b934      	cbnz	r4, 23fde20 <__register_exitproc+0x2c>
 23fde12:	4c26      	ldr	r4, [pc, #152]	; (23fdeac <__register_exitproc+0xb8>)
 23fde14:	601c      	str	r4, [r3, #0]
 23fde16:	4b26      	ldr	r3, [pc, #152]	; (23fdeb0 <__register_exitproc+0xbc>)
 23fde18:	b113      	cbz	r3, 23fde20 <__register_exitproc+0x2c>
 23fde1a:	681b      	ldr	r3, [r3, #0]
 23fde1c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fde20:	6863      	ldr	r3, [r4, #4]
 23fde22:	2b1f      	cmp	r3, #31
 23fde24:	dd07      	ble.n	23fde36 <__register_exitproc+0x42>
 23fde26:	f8d8 0000 	ldr.w	r0, [r8]
 23fde2a:	f000 f849 	bl	23fdec0 <__retarget_lock_release_recursive>
 23fde2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fde32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fde36:	b35e      	cbz	r6, 23fde90 <__register_exitproc+0x9c>
 23fde38:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fde3c:	b988      	cbnz	r0, 23fde62 <__register_exitproc+0x6e>
 23fde3e:	4b1d      	ldr	r3, [pc, #116]	; (23fdeb4 <__register_exitproc+0xc0>)
 23fde40:	b923      	cbnz	r3, 23fde4c <__register_exitproc+0x58>
 23fde42:	f8d8 0000 	ldr.w	r0, [r8]
 23fde46:	f000 f83a 	bl	23fdebe <__retarget_lock_release>
 23fde4a:	e7f0      	b.n	23fde2e <__register_exitproc+0x3a>
 23fde4c:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fde50:	f7fe fd9c 	bl	23fc98c <malloc>
 23fde54:	2800      	cmp	r0, #0
 23fde56:	d0f4      	beq.n	23fde42 <__register_exitproc+0x4e>
 23fde58:	2300      	movs	r3, #0
 23fde5a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fde5e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fde62:	6863      	ldr	r3, [r4, #4]
 23fde64:	2201      	movs	r2, #1
 23fde66:	2e02      	cmp	r6, #2
 23fde68:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fde6c:	fa02 f203 	lsl.w	r2, r2, r3
 23fde70:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fde74:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fde78:	ea43 0302 	orr.w	r3, r3, r2
 23fde7c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fde80:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fde84:	bf02      	ittt	eq
 23fde86:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fde8a:	4313      	orreq	r3, r2
 23fde8c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fde90:	6863      	ldr	r3, [r4, #4]
 23fde92:	f8d8 0000 	ldr.w	r0, [r8]
 23fde96:	1c5a      	adds	r2, r3, #1
 23fde98:	3302      	adds	r3, #2
 23fde9a:	6062      	str	r2, [r4, #4]
 23fde9c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fdea0:	f000 f80e 	bl	23fdec0 <__retarget_lock_release_recursive>
 23fdea4:	2000      	movs	r0, #0
 23fdea6:	e7c4      	b.n	23fde32 <__register_exitproc+0x3e>
 23fdea8:	1007afe0 	.word	0x1007afe0
 23fdeac:	1007af54 	.word	0x1007af54
 23fdeb0:	00000000 	.word	0x00000000
 23fdeb4:	023fc98d 	.word	0x023fc98d
 23fdeb8:	1007adec 	.word	0x1007adec

023fdebc <__retarget_lock_acquire_recursive>:
 23fdebc:	4770      	bx	lr

023fdebe <__retarget_lock_release>:
 23fdebe:	4770      	bx	lr

023fdec0 <__retarget_lock_release_recursive>:
 23fdec0:	4770      	bx	lr
	...

023fdec4 <dynalib_user>:
 23fdec4:	a609 023f a631 023f a635 023f 0000 0000     ..?.1.?.5.?.....
 23fded4:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23fdee4:	7574 6c61 4300 324f 5400 4f56 0043 7070     tual.CO2.TVOC.pp
 23fdef4:	5c62 0074 3248 5c20 0074 7445 6168 6f6e     b\t.H2 \t.Ethano
 23fdf04:	006c 6553 736e 726f 6e20 746f 6620 756f     l.Sensor not fou
 23fdf14:	646e 4d00 6165 7573 6572 656d 746e 6620     nd.Measurement f
 23fdf24:	6961 656c 0064 5f47 5654 434f 0020 7020     ailed.G_TVOC . p
 23fdf34:	6270 0009 5f47 4f43 2032 2000 7070 006d     pb..G_CO2 . ppm.
 23fdf44:	6146 6c69 6465 7420 206f 6567 2074 6162     Failed to get ba
 23fdf54:	6573 696c 656e 7220 6165 6964 676e 0073     seline readings.

023fdf64 <_ZL18FreeSansBold12pt7b>:
 23fdf64:	e274 023f df7c 023f 7e20 001d               t.?.|.?. ~..

023fdf70 <_ZL21FreeSansOblique12pt7b>:
 23fdf70:	edf6 023f eafe 023f 7e20 001d               ..?...?. ~..

023fdf7c <_ZL24FreeSansBold12pt7bGlyphs>:
 23fdf7c:	0000 0000 0007 0001 0000 1104 0308 00f0     ................
 23fdf8c:	0009 060a 010b 00ef 0011 100d 000d 00f1     ................
 23fdf9c:	002b 140d 000d 00ef 004c 1113 0115 00f0     +.......L.......
 23fdfac:	0075 1110 0111 00f0 0097 0604 0106 00ef     u...............
 23fdfbc:	009a 1606 0108 00ef 00ab 1606 0108 00ef     ................
 23fdfcc:	00bc 0807 0109 00ef 00c3 0b0b 020e 00f6     ................
 23fdfdc:	00d3 0704 0106 00fe 00d7 0306 0108 00f9     ................
 23fdfec:	00da 0304 0106 00fe 00dc 1106 0007 00f0     ................
 23fdffc:	00e9 110c 010d 00f0 0103 1107 030e 00f0     ................
 23fe00c:	0112 110c 010d 00f0 012c 110c 010d 00f0     ........,.......
 23fe01c:	0146 110b 010d 00f0 015e 110c 010d 00f0     F.......^.......
 23fe02c:	0178 110c 010d 00f0 0192 110b 010d 00f0     x...............
 23fe03c:	01aa 110c 010d 00f0 01c4 110c 010d 00f0     ................
 23fe04c:	01de 0c04 0106 00f5 01e4 1004 0106 00f5     ................
 23fe05c:	01ec 0c0c 010e 00f5 01fe 090c 010e 00f7     ................
 23fe06c:	020c 0c0c 010e 00f5 021e 120c 020f 00ef     ................
 23fe07c:	0239 1515 0117 00ef 0271 1210 0011 00ef     9.......q.......
 23fe08c:	0295 120e 0211 00ef 02b5 1210 0111 00ef     ................
 23fe09c:	02d9 120f 0211 00ef 02fb 120d 0210 00ef     ................
 23fe0ac:	0319 120c 020f 00ef 0334 1210 0112 00ef     ........4.......
 23fe0bc:	0358 120e 0212 00ef 0378 1204 0207 00ef     X.......x.......
 23fe0cc:	0381 120b 010e 00ef 039a 1210 0211 00ef     ................
 23fe0dc:	03be 120b 020f 00ef 03d7 1211 0215 00ef     ................
 23fe0ec:	03fe 120f 0212 00ef 0420 1211 0113 00ef     ........ .......
 23fe0fc:	0447 120e 0210 00ef 0467 1311 0113 00ef     G.......g.......
 23fe10c:	0490 1210 0211 00ef 04b4 120f 0110 00ef     ................
 23fe11c:	04d6 120c 020f 00ef 04f1 120e 0212 00ef     ................
 23fe12c:	0511 120f 0010 00ef 0533 1217 0017 00ef     ........3.......
 23fe13c:	0567 120f 0110 00ef 0589 1210 000f 00ef     g...............
 23fe14c:	05ad 120d 010f 00ef 05cb 1706 0208 00ef     ................
 23fe15c:	05dd 1107 0007 00f0 05ec 1706 0008 00ef     ................
 23fe16c:	05fe 0b0c 010e 00f0 060f 020f ff0d 0004     ................
 23fe17c:	0613 0304 0006 00ef 0615 0d0d 010e 00f4     ................
 23fe18c:	062b 120d 020f 00ef 0649 0d0c 010d 00f4     +.......I.......
 23fe19c:	065d 120d 010f 00ef 067b 0d0d 010e 00f4     ].......{.......
 23fe1ac:	0691 1207 0108 00ef 06a1 120d 010f 00f4     ................
 23fe1bc:	06bf 120c 020e 00ef 06da 1204 0207 00ef     ................
 23fe1cc:	06e3 1706 0007 00ef 06f5 120c 020e 00ef     ................
 23fe1dc:	0710 1204 0206 00ef 0719 0d13 0215 00f4     ................
 23fe1ec:	0738 0d0c 020f 00f4 074c 0d0d 010f 00f4     8.......L.......
 23fe1fc:	0762 120d 020f 00f4 0780 120d 010f 00f4     b...............
 23fe20c:	079e 0d08 0209 00f4 07ab 0d0c 010d 00f4     ................
 23fe21c:	07bf 0f06 0108 00f2 07cb 0d0c 020f 00f4     ................
 23fe22c:	07df 0d0d 000d 00f4 07f5 0d12 0013 00f4     ................
 23fe23c:	0813 0d0d 000d 00f4 0829 120d 000d 00f4     ........).......
 23fe24c:	0847 0d0a 010c 00f4 0858 1706 0109 00ef     G.......X.......
 23fe25c:	086a 1602 0207 00ef 0870 1706 0309 00ef     j.......p.......
 23fe26c:	0882 050c 000c 00f9                         ........

023fe274 <_ZL25FreeSansBold12pt7bBitmaps>:
 23fe274:	ffff ffff 6676 ff60 f3f0 fffc cf3f 9861     ....vf`.....?.a.
 23fe284:	0e60 7370 1883 f7ff bfff 73fc 1883 c718     `.ps.......s....
 23fe294:	bfff fffd 18e3 c139 0ece 0270 7e00 f80f     ......9...p..~..
 23fe2a4:	e77f b9af c83d 400f 003f 00ff 05fc 27ff     ....=..@?......'
 23fe2b4:	3ff9 efeb 3ffe 7ce0 8000 0004 063c c10f     .?...?.|....<...
 23fe2c4:	fc81 7330 0c8c 8131 60ce cc1f f303 3c00     ..0s..1..`.....<
 23fe2d4:	8067 f819 7f02 ce80 1170 0686 c139 f887     g.......p...9...
 23fe2e4:	7e30 070c 0780 1f80 3fc0 3ce0 3ce0 3ee0     0~.......?.<.<.>
 23fe2f4:	0fe0 07c0 3f00 7f8c f1cc f0fc f0f8 f878     .....?........x.
 23fe304:	7ff8 3ffc 1fde ff8e 66ff 730c 718e 38c7     ...?.....f.s.q.8
 23fe314:	8ee3 e338 1c8e c371 188e c370 1c87 e338     ..8...q...p...8.
 23fe324:	1c87 c771 711c 38ce 1ce7 8063 2310 f35f     ..q..q.8..c..#_.
 23fe334:	1b87 0e14 c001 0738 ff0f ffff 70f8 010e     ......8......p..
 23fe344:	38c0 ff00 36f3 ffc0 c0ff f0ff 300c 1886     .8...6.......0..
 23fe354:	0c61 c230 6118 3084 1fc0 fc83 e77f f09e     a.0..a.0........
 23fe364:	0fff fff0 f00f 0fff fff0 f00f 9ef7 e37f     ................
 23fe374:	0ffc 0600 7f1c e3ff 8fc7 3c1e f178 c7e3     ...........<x...
 23fe384:	1e8f 831f 7ffc 9fef fff0 000f 0ff0 e001     ................
 23fe394:	0f3c e081 033c 7f80 fff7 f07f 071f fffc     <...<...........
 23fe3a4:	1eef e0f1 031e 78c0 c007 001e 0ff0 fff0     .......x........
 23fe3b4:	7f1f fce7 801f c003 1ff8 e107 27bc f38c     .............'..
 23fe3c4:	631e 7bd8 ffff feff 8007 1ef0 c003 e73f     .c.{..........?.
 23fe3d4:	7ffe 00e7 0660 7ff8 fecf f0f1 000f 0ff0     ....`...........
 23fe3e4:	fe00 ff1e fce7 003f 830f 7ffc 9fe7 0ff0     ......?.........
 23fe3f4:	ff78 fecf fff9 f00f 0fff f7f0 7f9f fce3     x...............
 23fe404:	800f ffff ffff e080 071c e001 0f38 c001     ............8...
 23fe414:	0f78 e001 0f38 e001 003c 030f 7ffc 9ec7     x...8...<.......
 23fe424:	e770 390e f8c1 c73f f09e 0fff fff0 7f9f     p..9..?.........
 23fe434:	fce3 801f 031f 7ffc 9eef eff0 f00f 0fff     ................
 23fe444:	f7f9 3fff eff1 ef00 7f1e fce7 001f f0ff     ...?............
 23fe454:	0000 ff0f f0ff 0000 ff0f 6c11 1000 0307     ...........l....
 23fe464:	fcf1 0f7e e080 c00f 803f 007f 03f0 ffff     ..~.....?.......
 23fe474:	ffff 00f0 0000 ff00 ffff f0ff 0e00 fc00     ................
 23fe484:	f007 e00f 001f 7ff0 8f1f f0e0 0008 071f     ................
 23fe494:	7ffc 9fef fff0 000f 0ff0 e001 073c f080     ............<...
 23fe4a4:	000e 00e0 f000 000f 00f0 00fe fc1f c003     ................
 23fe4b4:	38f0 c301 0780 3d18 8799 6cec c371 06c3     .8.....=...lq...
 23fe4c4:	181e f130 8781 188c 607c 63c3 3b8e df8f     ..0.....|`.c.;..
 23fe4d4:	3c8c 70f0 0100 00c0 8007 1f80 00fe c01f     .<.p............
 23fe4e4:	0300 03e0 03e0 07e0 07f0 07f0 0f70 0e78     ............p.x.
 23fe4f4:	0e78 1e38 1c3c 3f3c 3ffc 3ffe 78fe 780e     x.8.<.<?.?.?.x.x
 23fe504:	700f f00f ff07 ffc3 ffcf 3e3c 7bf0 efc1     .p........<>.{..
 23fe514:	bf0f fffc ffe3 07cf 0fbc 3ff0 ffc0 ff07     ...........?....
 23fe524:	fffe fffb 0780 1fe0 3ff8 7cfc 783e f81f     .........?.|>x..
 23fe534:	f00f f000 f000 f000 f000 f000 f800 780f     ...............x
 23fe544:	7c1f 3f3e 1ffe 07fc fff0 ffe1 ffe3 83e7     .|>?............
 23fe554:	03ef 07de 07fc 0ff8 1ff0 3fe0 7fc0 ff80     ...........?....
 23fe564:	fe03 bc07 7f1f fffc fff1 ff80 fff7 fdbf     ................
 23fe574:	0fe0 7800 c003 fc1f e7ff 3cff e001 000f     ...x.......<....
 23fe584:	0378 1fc0 ffff ffff ffc0 ffff ffff f000     x...............
 23fe594:	000f 0ff0 fffe feef 0ff0 f000 000f 0ff0     ................
 23fe5a4:	f000 000f f003 fc0f fe3f 1f3e 0778 0078     ........?.>.x.x.
 23fe5b4:	00f0 00f0 7ff0 7ff0 7ff0 07f0 0778 0f7c     ............x.|.
 23fe5c4:	1f3e fb3f fb0f e303 3ff0 ffc0 fc03 f00f     >.?......?......
 23fe5d4:	c03f 03ff ffff ffff ffff fc03 f00f c03f     ?.............?.
 23fe5e4:	03ff 0ffc 3ff0 f0c0 ffff ffff ffff ffff     .....?..........
 23fe5f4:	01ff 3ce0 8007 1ef0 c003 0f78 e001 073c     ...<......x...<.
 23fe604:	fff8 e31f 7bfc 7ffe e0c3 3ef0 3cf0 78f0     .....{.....>.<.x
 23fe614:	f0f0 e0f1 c0f3 80f7 00ff 80ff 80ff c0fb     ................
 23fe624:	e0f1 f0f0 f0f0 78f0 3cf0 3ef0 1ef0 1ef0     .......x.<.>....
 23fe634:	c003 0f78 e001 073c f080 031e 78c0 010f     ..x...<......x..
 23fe644:	3ce0 ff07 ffff f8fc fe1f ff0f ff0f ff87     .<..............
 23fe654:	ffc3 ffe1 fff9 effc 77fe 3bfb ddfd fcfe     .........w.;....
 23fe664:	7eff 9f7f cf3f e79f f38f f8c7 c0e3 1ff0     .~..?...........
 23fe674:	3ff0 7ff0 ffe0 ffe1 fdc3 fbc7 f38f e79f     .?..............
 23fe684:	c73f 8f7f 0fff 1ffe 1ffc 1ff8 3ff0 3ce0     ?............?.<
 23fe694:	e003 fc0f ff0f c787 80c7 c0f3 c07b e01f     ............{...
 23fe6a4:	f00f f807 fc03 fe01 f700 f380 78c0 f8f0     .............x..
 23fe6b4:	fc7f fc1f f803 ff00 ffe3 ffef 1fbc 3ff0     ...............?
 23fe6c4:	ffc0 fc03 ff1f fffb fecf 003c 03f0 0fc0     ..........<.....
 23fe6d4:	3c00 f000 c003 0300 0fe0 0ffc 87ff c7c7     .<..............
 23fe6e4:	f380 7bc0 1fc0 0fe0 07f0 03f8 01fc 04fe     ...{............
 23fe6f4:	87f7 c3f3 f0f8 7ff8 1ffc 83ff 80f1 0000     ................
 23fe704:	f8ff fcff fcff 3ef0 1ef0 1ef0 1ef0 3cf0     .......>.......<
 23fe714:	f8ff f0ff f8ff 3cf0 3cf0 3cf0 3cf0 3cf0     .......<.<.<.<.<
 23fe724:	3cf0 1ff0 c00f e17f e7ff efc3 de03 3c00     .<.............<
 23fe734:	7f00 7f00 3ff0 0ff8 01f8 01f0 03fe 0fde     .....?..........
 23fe744:	febf f83f c01f ffff ffff f0f0 000f 0ff0     ..?.............
 23fe754:	f000 000f 0ff0 f000 000f 0ff0 f000 000f     ................
 23fe764:	f0f0 c03f 03ff 0ffc 3ff0 ffc0 fc03 f00f     ..?......?......
 23fe774:	c03f 03ff 0ffc 3ff0 f7c0 9f87 3ffe 3ff0     ?......?.....?.?
 23fe784:	7000 f00e e03d c079 81e3 87c7 0e87 1c0e     .p..=.y.........
 23fe794:	781e e01c c039 8073 007e 01fc 01f8 03e0     .x..9.s.~.......
 23fe7a4:	07c0 7080 1c38 f0e0 e179 f3f0 e1c3 87e3     ...p8...y.......
 23fe7b4:	87c3 870f 3b0e 1e9e 3877 ee1c 3970 e0cc     .....;..w8..p9..
 23fe7c4:	9973 6ec0 003f 7efc f801 03fc f8f0 e103     s..n?..~........
 23fe7d4:	07e0 c083 070f f080 f03c e1f9 e7e1 cf83     ........<.......
 23fe7e4:	fc03 f003 e007 8007 000f 003f 01ff 07fe     ..........?.....
 23fe7f4:	0f9e 3c1e f83c e03d f078 781e 781e 3c3c     ...<<.=.x..x.x<<
 23fe804:	3c3c 1e78 0e78 0f70 07f0 07e0 03e0 03c0     <<x.x.p.........
 23fe814:	03c0 03c0 03c0 03c0 03c0 03c0 ffc0 ffff     ................
 23fe824:	feff f001 000f 0ff0 f800 8007 0778 7c80     ............x..|
 23fe834:	c003 033c 1fc0 ffff ffff ffc0 fcff cff3     ..<.............
 23fe844:	f33c 3ccf cff3 f33c 3ccf ffff c1c0 0381     <..<..<..<......
 23fe854:	0406 180c 3010 4060 81c1 0603 ffff 3ccf     .....0`@.......<
 23fe864:	cff3 f33c 3ccf cff3 f33c ffcf c0ff 000f     ..<..<..<.......
 23fe874:	0ff0 f801 831b 399c 0cc3 e770 e00e ff70     .......9..p...p.
 23fe884:	ffff e6fc 1f30 ff83 fd1f e0e1 030f fff9     ....0...........
 23fe894:	1edf f7f0 bf8f fffc cfe3 f080 8007 013c     ..............<.
 23fe8a4:	0fe0 7b00 ffc3 fe9f f7f8 fc83 e01f 07ff     ...{............
 23fe8b4:	3ff8 dfe3 fffe bee7 0f00 fe83 f77f f08f     .?..............
 23fe8c4:	007f 0ff0 f000 8f77 f37f 0ffe 0080 0378     ......w.......x.
 23fe8d4:	1ec0 f000 8f07 ffbc ffef ff78 fc83 e01f     ..........x.....
 23fe8e4:	07ff 3df8 efe3 3fff fbf8 1fc0 fe81 f91f     ...=...?........
 23fe8f4:	cff1 7f07 fffb 00de 03f0 9fc3 7ffc f8c0     ................
 23fe904:	3e00 fbfd 9fc7 3cbf f178 c7e3 1e8f 783c     .>.....<x.....<x
 23fe914:	1ef0 fb79 fedf fff1 f807 c13f 0ffe 7ff0     ..y.......?.....
 23fe924:	dfc7 7ffe f7f1 3c80 ff01 7f1e fef0 f000     .......<........
 23fe934:	000f 0ff0 f000 7c0f efff f9ff 0fff fff0     .......|........
 23fe944:	f00f 0fff fff0 f00f 0fff f0ff ff0f ffff     ................
 23fe954:	ffff 3cff c0f3 f300 3ccf cff3 f33c 3ccf     ...<.....<..<..<
 23fe964:	cff3 ffff f080 000f 0ff0 f000 0f0f eff1     ................
 23fe974:	f73c f08f 0fff fff8 3c8f cff1 f01e 0fef     <........<......
 23fe984:	ffff ffff ffff ffff f7ff 9f8f fbfb ffff     ................
 23fe994:	f8fc 1eff e31f fcc3 7f78 0f8f e1f1 3cfe     ........x......<
 23fe9a4:	c73f f887 fff0 1e1e cff7 fffe 9fff fff0     ?...............
 23fe9b4:	f00f 0fff fff0 f00f 0fff f0f0 810f 1fff     ................
 23fe9c4:	f1fc 07ef 3ff8 fec1 f00f c77b fc9f c07f     .....?....{.....
 23fe9d4:	00f8 c7f7 3fff f1fd 07ef 3ff8 fec1 f00f     .....?.....?....
 23fe9e4:	c77f fdbf cfff 7878 c003 001e 07f0 0080     ......xx........
 23fe9f4:	790f dfff f1fe 07ff 3ff8 fec1 f00f c77b     .y.......?....{.
 23fea04:	fedf f17f 80f7 013c 0fe0 7800 c003 f7f3     ......<....x....
 23fea14:	f8ff f0f0 f0f0 f0f0 f0f0 1ff0 fc87 efff     ................
 23fea24:	f80f f00f e07f 01ff 0fff e7ff 1ffe 7980     ...............y
 23fea34:	bfe7 e7fd 799e 9ee7 f37d f0c0 0fff fff0     .....y..}.......
 23fea44:	f00f 0fff fff0 f00f 1fff f7ff 3eff f0f0     .............>..
 23fea54:	837b 1c9e e3f1 1c8e 7770 b883 c01d 037e     {.......pw....~.
 23fea64:	1fe0 7000 f000 dce1 7778 3d1f cfe7 b379     ...p....xw.=..y.
 23fea74:	6c8e bbe3 ee38 1ffc 073f c1c7 f0f1 787c     .l..8...?.....|x
 23fea84:	1e0e 7800 c7f3 788f 813b 07fc 1ec0 f001     ...x...x;.......
 23fea94:	c01f 0fef f178 87e7 f000 837b 1c9e e371     ....x.....{...q.
 23feaa4:	1e8e 7370 b883 c01f 037e 0fe0 7000 8003     ..ps....~....p..
 23feab4:	073c 3ec0 e001 ff00 ffff 0ffc 8307 e0c1     <..>............
 23feac4:	78f0 0f3c ffff c0ff f31c 38ce 8ee3 e338     .x<........8..8.
 23fead4:	f0bc 8ee3 e338 3c8e c0f1 ffff ffff f0ff     ....8..<........
 23feae4:	8fe3 711c 1cc7 c771 3d0f 1cc7 c771 f31c     ...q..q..=..q...
 23feaf4:	00ce 0f78 cfe0 7f30 e001                    ..x...0...

023feafe <_ZL27FreeSansOblique12pt7bGlyphs>:
 23feafe:	0000 0000 0007 0001 0000 1206 0307 00ef     ................
 23feb0e:	000e 0606 0409 00f0 0013 120f 010d 00ef     ................
 23feb1e:	0035 150d 020d 00ef 0058 1113 0315 00f0     5.......X.......
 23feb2e:	0081 110d 0210 00f0 009d 0602 0405 00f0     ................
 23feb3e:	009f 1708 0308 00ef 00b6 1708 0008 00f0     ................
 23feb4e:	00cd 0808 0409 00ef 00d5 0b0c 020e 00f6     ................
 23feb5e:	00e6 0604 0107 00ff 00e9 0206 0208 00f9     ................
 23feb6e:	00eb 0203 0207 00ff 00ec 120a 0007 00ef     ................
 23feb7e:	0103 110c 020d 00f0 011d 1107 050d 00f0     ................
 23feb8e:	012c 110e 010d 00f0 014a 110c 020d 00f0     ,.......J.......
 23feb9e:	0164 110c 020d 00f0 017e 110d 020d 00f0     d.......~.......
 23febae:	019a 110c 020d 00f0 01b4 110d 030d 00f0     ................
 23febbe:	01d0 110c 020d 00f0 01ea 110c 020d 00f0     ................
 23febce:	0204 0c05 0307 00f5 020c 1006 0207 00f5     ................
 23febde:	0218 0c0d 020e 00f5 022c 060d 020e 00f8     ........,.......
 23febee:	0236 0c0d 010e 00f6 024a 120b 040d 00ef     6.......J.......
 23febfe:	0263 1517 0218 00ef 02a0 1210 0010 00ef     c...............
 23fec0e:	02c4 120f 0210 00ef 02e6 1210 0211 00ef     ................
 23fec1e:	030a 1210 0211 00ef 032e 1210 0210 00ef     ................
 23fec2e:	0352 120f 020e 00ef 0374 1210 0313 00ef     R.......t.......
 23fec3e:	0398 1211 0211 00ef 03bf 1206 0207 00ef     ................
 23fec4e:	03cd 120d 010c 00ef 03eb 1212 0210 00ef     ................
 23fec5e:	0414 120b 020d 00ef 042d 1214 0214 00ef     ........-.......
 23fec6e:	045a 1211 0212 00ef 0481 1211 0212 00ef     Z...............
 23fec7e:	04a8 120f 020f 00ef 04ca 1312 0213 00ef     ................
 23fec8e:	04f5 1210 0211 00ef 0519 120f 0210 00ef     ................
 23fec9e:	053b 120e 040f 00ef 055b 1210 0311 00ef     ;.......[.......
 23fecae:	057f 120f 040f 00ef 05a1 1216 0416 00ef     ................
 23fecbe:	05d3 1213 0010 00ef 05fe 1210 0410 00ef     ................
 23fecce:	0622 1211 010f 00ef 0649 170a 0007 00ef     ".......I.......
 23fecde:	0666 1203 0407 00ef 066d 170a ff07 00f0     f.......m.......
 23fecee:	068a 090a 020b 00f0 0696 010e ff0d 0004     ................
 23fecfe:	0698 0404 0408 00ef 069a 0d0b 020d 00f4     ................
 23fed0e:	06ac 120d 010d 00ef 06ca 0d0b 020c 00f4     ................
 23fed1e:	06dc 120e 020d 00ef 06fc 0d0c 020d 00f4     ................
 23fed2e:	0710 1208 0206 00ef 0722 120e 010d 00f4     ........".......
 23fed3e:	0742 120c 010d 00ef 075d 1205 0205 00ef     B.......].......
 23fed4e:	0769 1709 ff06 00ef 0783 120d 010c 00ef     i...............
 23fed5e:	07a1 1205 0205 00ef 07ad 0d13 0114 00f4     ................
 23fed6e:	07cc 0d0c 010d 00f4 07e0 0d0c 020d 00f4     ................
 23fed7e:	07f4 120e 000e 00f4 0814 120d 020d 00f4     ................
 23fed8e:	0832 0d09 0108 00f4 0841 0d0c 010c 00f4     2.......A.......
 23fed9e:	0855 1007 0206 00f1 0863 0d0c 020d 00f4     U.......c.......
 23fedae:	0877 0d0b 030c 00f4 0889 0d11 0311 00f4     w...............
 23fedbe:	08a5 0d0e 000c 00f4 08bc 120e 000b 00f4     ................
 23fedce:	08dc 0d0c 010c 00f4 08f0 1708 0308 00ef     ................
 23fedde:	0907 1706 0106 00ef 0919 1709 ff08 00f0     ................
 23fedee:	0933 050b 030e 00f6                         3.......

023fedf6 <_ZL28FreeSansOblique12pt7bBitmaps>:
 23fedf6:	610c 1886 0c63 c230 6118 0000 00c3 3ccf     .a..c.0..a.....<
 23fee06:	8ae2 0120 038c 0618 1860 31c0 ff83 ff87     .. .....`..1....
 23fee16:	1803 600c c018 0323 8fff 02ff 0c30 1860     ...`..#.....0.`.
 23fee26:	6380 c600 0000 3f80 fc03 7332 9991 cc8c     .c.....?..2s....
 23fee36:	6006 003e 017e 0cfc 43ec 1b62 9d11 7f9c     .`>.~....Cb.....
 23fee46:	f8c1 0002 0110 0080 0100 c083 fc60 3018     ............`..0
 23fee56:	0cc2 c118 3083 cc38 f103 3c00 0040 f018     .....08....<@...
 23fee66:	3f06 8c01 2330 0c06 c360 300e fcc0 0f10     .?..0#..`..0....
 23fee76:	0100 3fe0 8c81 6018 06c3 1f30 e000 011f     ...?...`..0.....
 23fee86:	d8dc 816d 0eec 7360 cf87 3ee6 fe38 03a0     ..m...`s...>8...
 23fee96:	0406 180c 3018 6030 6060 c0c0 c0c0 c0c0     .....00```......
 23feea6:	c0c0 6040 2060 0604 0206 0303 0303 0303     ..@`` ..........
 23feeb6:	0303 0606 0c06 180c 3018 6020 0cc0 490c     .........0 `...I
 23feec6:	3c7f 6c3c 0300 3000 0003 ff30 ffff 0006     .<<l...0..0.....
 23feed6:	0660 c000 000c 2277 ff6c fcf0 4000 0830     `.....w"l....@0.
 23feee6:	0106 c000 1820 0204 8000 1040 0208 0001     .... .....@.....
 23feef6:	20c0 0700 fec0 731c 3083 0336 3660 c003     . .....s.06.`6..
 23fef06:	077c 6cc0 c006 0cec 87e3 3ef0 0200 770c     |..l.......>...w
 23fef16:	c1ef 0c83 3018 c361 0c06 6018 f003 e01f     .....0a....`....
 23fef26:	c7e1 1803 000c 0130 0e80 7000 8007 0778     ......0....p..x.
 23fef36:	3880 c001 0006 fc1f e0ff c007 1cfe 0373     .8............s.
 23fef46:	3030 0003 7ce0 c007 000e 0660 6cc0 e10c     00...|....`..l..
 23fef56:	f8c7 003e 6000 0006 1ee0 e003 0c6c 8cc1     ..>..`......l...
 23fef66:	c630 c11c ff8f e0ff 0318 3000 0003 f80f     0..........0....
 23fef76:	c67f 3000 0001 c01b 06ff 601c 0360 1800     ...0.......``...
 23fef86:	c000 600c 8663 e00f 003e c003 1cfe 8373     ...`c...>.....s.
 23fef96:	0630 6700 fc87 eef0 c006 066c 4cc0 e10c     0..g......l..L..
 23fefa6:	f887 003e fb3f c0ff 000c 0cc0 c000 0006     ..>.?...........
 23fefb6:	0660 7000 0003 0330 1880 c001 000c 00e0     `..p..0.........
 23fefc6:	c007 1cfe 0373 3330 3803 fc61 c73f 600e     ....s.03.8a.?..`
 23fefd6:	066c 6cc0 e10c f8c7 003e c107 38fe 0373     l..l....>....8s.
 23fefe6:	3660 6003 0736 f370 1efe 0e60 cc00 e31c     `6.`6.p...`.....
 23feff6:	f087 003c c039 0000 0000 c039 701c 0000     ..<.9.....9..p..
 23ff006:	0000 0700 201c 3086 0000 c001 0f3c e081     ..... .0....<...
 23ff016:	037c 0f80 1f00 3e00 3800 4000 fb7f 80ff     |......>.8.@....
 23ff026:	0000 ff0f f07f 0120 07c0 0fc0 0f80 1c00     ...... .........
 23ff036:	e003 1f78 c003 0038 0000 870f c3f9 3cb0     ..x...8........<
 23ff046:	0006 30c0 030c c001 0c30 8001 0000 0000     ...0....0.......
 23ff056:	0630 0000 803f ff01 0fe0 e001 0038 e0e0     0...?.......8...
 23ff066:	c300 8187 1fce 98b1 c371 8361 c686 0f06     ........q.a.....
 23ff076:	0c0c 303e 6c30 6160 c1d8 3187 1cc7 f761     ..>00l`a...1..a.
 23ff086:	63f0 80cf 00e0 f000 0000 e0ff 7f00 0000     .c..............
 23ff096:	3800 7800 7c00 fc00 dc00 cc01 8c01 8c03     .8.x.|..........
 23ff0a6:	0c03 0c06 0e0e fe0f fe1f 0618 0638 0630     ............8.0.
 23ff0b6:	0670 0760 f80f f81f 3860 31c0 6380 ce00     p.`.....`8.1.c..
 23ff0c6:	1803 3f0c 7ff0 c0f0 0073 0066 01cc 0698     ...?....s.f.....
 23ff0d6:	1c70 f1ff 80ff f801 fe07 0e0e 031c 0338     p.............8.
 23ff0e6:	0030 0060 0060 00c0 00c0 00c0 00c0 06c0     0.`.`...........
 23ff0f6:	0cc0 1ce0 7870 f03f 801f f80f fc1f 0e18     ....px?.........
 23ff106:	0718 0318 0318 0338 0330 0330 0330 0670     ......8.0.0.0.p.
 23ff116:	0670 0c60 0c60 1860 78e0 e0ff 80ff ff0f     p.`.`.`..x......
 23ff126:	fe1f 0018 0018 0018 0018 0038 0030 fc3f     ..........8.0.?.
 23ff136:	f83f 0070 0070 0060 0060 0060 00e0 f8ff     ?.p.p.`.`.`.....
 23ff146:	f8ff fe0f fc3f 0060 01c0 0380 0e00 1800     ....?.`.........
 23ff156:	3f00 7ff0 c0e1 8003 0006 000c 0018 0070     .?............p.
 23ff166:	01c0 0080 f801 fe07 0f0e 0318 0330 0070     ............0.p.
 23ff176:	0060 0060 7fc0 7ec0 02c0 06c0 06c0 0ee0     `.`....~........
 23ff186:	1e60 3c78 e43f 840f 010c 008e 00c6 00e3     `.x<?...........
 23ff196:	8061 c030 e018 600c 3f0e 1ffe 1cff 8e01     a.0....`.?......
 23ff1a6:	c601 e300 6100 3180 18c0 1cc0 0c60 0c00     .....a.1....`...
 23ff1b6:	8671 6318 308c 1cc3 8661 e318 0000 0118     q..c.0..a.......
 23ff1c6:	0c80 6000 0003 0138 0c80 6000 0003 0138     ...`..8....`..8.
 23ff1d6:	0c8c 6360 1c07 7f70 f001 0c00 8703 c101     ..`c..p.........
 23ff1e6:	e080 6060 7018 3806 9c03 ce00 3700 0f80     ..``.p.8.....7..
 23ff1f6:	0770 018c 80c3 6060 1c18 0306 8003 c0e0     p.....``........
 23ff206:	3018 0007 030c 6080 010c 3080 010e 3080     .0.....`...0...0
 23ff216:	0106 38c0 0006 18c0 0007 ffff 0efc 7100     ...8...........q
 23ff226:	0fe0 001e e0f1 1e1e e101 36e0 033b 3063     ...........6;.c0
 23ff236:	336e c30e cc30 1833 31c6 638c c631 1833     n3..0.3..1.c1.3.
 23ff246:	e161 1e8e c118 8cc1 381c 010c 008f 80c7     a........8......
 23ff256:	e063 f071 d830 ee18 630c 3106 18c7 0ce3     c.q.0....c.1....
 23ff266:	8c31 c61c 6306 f103 f180 78c0 3cc0 0e60     1....c.....x.<`.
 23ff276:	0100 03f8 03ff c383 6380 3b00 0d80 0680     .........c.;....
 23ff286:	03c0 01c0 00e0 00f0 00f8 006c 0036 8031     ..........l.6.1.
 23ff296:	f030 3f78 07f0 00e0 f80f f83f 3860 31c0     0.x?......?.`8.1
 23ff2a6:	6380 ce00 1803 3f0e 7ff8 c0e1 8003 0006     .c.....?........
 23ff2b6:	000c 0018 0070 01c0 0080 fc00 ff01 f0c0     ....p...........
 23ff2c6:	7078 3806 cc01 3600 0d00 0380 00c0 00f0     xp.8...6........
 23ff2d6:	003c 001b c006 3803 c61d e103 f0e0 fe3f     <......8......?.
 23ff2e6:	f103 00c0 0f20 1ffc 18fe 1807 1803 1803     .... ...........
 23ff2f6:	3803 3006 3f0c 3ff8 70f8 701c 600c 600c     .8.0.?.?.p.p.`.`
 23ff306:	600c e018 c018 c018 031c 1ff8 70f8 c038     .`...........p8.
 23ff316:	0033 0066 000c 001e c01f f00f f001 ec00     3.f.............
 23ff326:	d800 b001 7006 7f38 3fe0 ff00 ffff 70f0     .....p8..?.....p
 23ff336:	c001 0006 0018 0360 0c80 3000 c000 0003     ......`....0....
 23ff346:	001c 0160 0680 1800 e000 1800 3803 3003     ..`..........8.0
 23ff356:	3007 3006 7006 7006 600e 600c 600c e00c     .0.0.p.p.`.`.`..
 23ff366:	c00c c01c c018 c018 e038 7f70 1fe0 c080     ........8.p.....
 23ff376:	c00f 801b 0073 03c6 060c 1818 7030 c060     ....s.......0p`.
 23ff386:	81e3 01c6 039c 0630 0de0 1e80 3c00 7000     ......0......<.p
 23ff396:	c000 1f70 c001 0f6c b003 0c3c f0c1 0673     ..p...l...<...s.
 23ff3a6:	8cc1 063b c630 c730 c318 6718 e10c 3398     ..;.0.0....g...3
 23ff3b6:	e006 1bdc 6003 076c e081 071c 7080 011c     .....`l......p..
 23ff3c6:	7080 0700 e000 38e0 0e0c c301 1880 03e0     .p.....8........
 23ff3d6:	0098 0036 8007 f000 1e00 0700 01c0 00dc     ..6.............
 23ff3e6:	8073 301c 0703 c000 3860 0e0e c000 06e0     s..0....`8......
 23ff3f6:	0c60 1c70 3870 7030 6038 c018 c01d 801f     `.p.p80p8`......
 23ff406:	000f 000e 000e 000e 000c 000c 000c 001c     ................
 23ff416:	0018 ff0f ff87 0180 01c0 01c0 01c0 01c0     ................
 23ff426:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 00c0     ................
 23ff436:	00c0 00c0 f8ff fc7f 0700 e0c1 1860 030c     ............`...
 23ff446:	c000 1c30 0106 6080 0e18 0003 30c0 060c     ..0....`.....0..
 23ff456:	8001 1e60 8007 6c93 4992 db24 0724 e081     ..`....l.I$.$...
 23ff466:	0618 8001 30c0 030c c001 1860 0106 e080     .....0....`.....
 23ff476:	0c30 0003 60c0 1e18 800f 0103 d8c0 1936     0....`........6.
 23ff486:	6384 8319 c060 fcff 23e6 c307 e3fc 3098     .c..`....#.....0
 23ff496:	0106 f387 c0c6 3bd8 7f0e cc77 000c 0360     .......;..w...`.
 23ff4a6:	3000 8001 f00c c37f 3887 8019 06cc 3260     .0.......8....`2
 23ff4b6:	b003 c119 1cce c37f 007c 830f e3f8 36b8     ........|......6
 23ff4c6:	c007 0630 c000 1b18 3f86 e0c3 0c00 6000     ..0......?.....`
 23ff4d6:	8001 0006 3e18 ff61 3c0e 7170 ce80 3007     .....>a..<pq...0
 23ff4e6:	c018 0163 0e8c 7838 c07f 00fb c107 38fe     ..c...8x.......8
 23ff4f6:	0377 3760 ffff 00fc 0cc0 e106 f8c7 003e     w.`7..........>.
 23ff506:	0f07 181c 7e18 307e 3030 6030 6060 6060     .....~~0000`````
 23ff516:	c0c0 cc03 a13f 8ec7 300e c038 03c6 0c18     ....?....08.....
 23ff526:	7160 c781 0f0e 1ef8 0360 0c80 7030 807f     `q......`...0p..
 23ff536:	00f8 000c 0cc0 8001 0118 1f9e c7f1 3338     ..............83
 23ff546:	3003 0733 6630 6006 0666 c660 180c 00c0     .03.0f.`f.`.....
 23ff556:	c618 1833 31c6 c698 0100 c080 0000 1800     ..3..1..........
 23ff566:	0c1c 0306 8101 c080 3060 1818 060c 0303     ........`0......
 23ff576:	8387 0c80 6000 0003 0130 0c80 6118 3883     .....`..0....a.8
 23ff586:	8133 0fb8 77c0 1803 c130 0c87 6018 03e3     3....w..0....`..
 23ff596:	1800 63c6 c618 1833 31c6 c698 1b00 c3e3     ...c..3..1......
 23ff5a6:	fcfd e1f1 189c 0333 6006 ccc0 3b18 0683     ......3..`...;..
 23ff5b6:	6060 0ccc 8319 3003 e660 180c e11b 3cff     ``.....0`......<
 23ff5c6:	8373 3330 3003 0677 6660 6006 0c66 c060     s.03.0w.`f.`f.`.
 23ff5d6:	c107 38fe 0377 3e60 c003 063c 6cc0 e10e     ...8w.`>..<..l..
 23ff5e6:	f8c7 003e f00c e03f c7e1 1c03 600c 8031     ..>...?......`1.
 23ff5f6:	07ce 1838 e3e0 0fc7 77f8 80c1 0006 0018     ..8......w......
 23ff606:	0360 0080 980f ceff e03c 03e6 1b70 9801     `.......<...p...
 23ff616:	c00c 0766 7838 83ff 00cc 0760 3800 8001     ..f.8x....`..8..
 23ff626:	000c 8f1b 07cf 0103 c080 60e0 1830 060c     ...........`0...
 23ff636:	0f00 ffc1 7630 6003 8007 803f 007e 066c     ....0v.`..?.~.l.
 23ff646:	cfe0 3ef8 1800 6730 c6ef 300c c160 0c83     ...>..0g...0`...
 23ff656:	3c18 3038 0333 3730 6006 0666 6660 c006     .<803.07.`f.`f..
 23ff666:	0cec cfc3 7cfc c0c0 1b78 6003 18c6 19c6     .....|..x..`....
 23ff676:	30c3 0d6c e081 033c c100 e1c3 b0e1 d8f0     .0l...<.........
 23ff686:	cc78 666c 6336 3033 b099 d858 782c 3c1c     x.lf6c30..X.,x.<
 23ff696:	1c0e 0e06 0c00 301c e3e0 9801 c007 000e     .......0........
 23ff6a6:	0130 0fe0 7380 8c01 380c 6060 0c18 6160     0....s...8``..`a
 23ff6b6:	8683 1c0c 3160 cc80 3003 800d 0036 03f0     ....`1...0..6...
 23ff6c6:	0680 3000 c000 0006 03f0 0080 f11f 00ff     ...0............
 23ff6d6:	0c70 8001 0630 c000 0318 6000 fc0f c0ff     p...0......`....
 23ff6e6:	0e07 1818 1818 3030 3030 e060 60e0 6060     ......0000`..```
 23ff6f6:	c0c0 c0c0 f0c0 0c60 8230 6108 1084 0c43     ......`.0..a..C.
 23ff706:	8620 4118 3004 00c2 0600 8007 60c0 1830      ..A.0.......`0.
 23ff716:	0c0c 0306 c001 60e0 3060 0c18 060c 0103     .......``0......
 23ff726:	8383 3880 820f 8338 38e0                    ...8..8..8

023ff730 <_ZL4font>:
 23ff730:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 23ff740:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 23ff750:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 23ff760:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 23ff770:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 23ff780:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 23ff790:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 23ff7a0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 23ff7b0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 23ff7c0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 23ff7d0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 23ff7e0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 23ff7f0:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 23ff800:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 23ff810:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 23ff820:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 23ff830:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 23ff840:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 23ff850:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 23ff860:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 23ff870:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 23ff880:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 23ff890:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 23ff8a0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 23ff8b0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 23ff8c0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 23ff8d0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 23ff8e0:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 23ff8f0:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 23ff900:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 23ff910:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 23ff920:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 23ff930:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 23ff940:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 23ff950:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 23ff960:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 23ff970:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 23ff980:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 23ff990:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 23ff9a0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 23ff9b0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 23ff9c0:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 23ff9d0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 23ff9e0:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 23ff9f0:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 23ffa00:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 23ffa10:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 23ffa20:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 23ffa30:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 23ffa40:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 23ffa50:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 23ffa60:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 23ffa70:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 23ffa80:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 23ffa90:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 23ffaa0:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 23ffab0:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 23ffac0:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 23ffad0:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 23ffae0:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 23ffaf0:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 23ffb00:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 23ffb10:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 23ffb20:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 23ffb30:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 23ffb40:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 23ffb50:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 23ffb60:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 23ffb70:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 23ffb80:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 23ffb90:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 23ffba0:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 23ffbb0:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 23ffbc0:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 23ffbd0:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 23ffbe0:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 23ffbf0:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 23ffc00:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 23ffc10:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 23ffc20:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

023ffc30 <_ZTV12Adafruit_GFX>:
	...
 23ffc40:	b26d 023f d3bd 023f a651 023f ad1f 023f     m.?...?.Q.?...?.
 23ffc50:	ad21 023f ad53 023f ad2f 023f ad41 023f     !.?.S.?./.?.A.?.
 23ffc60:	ac61 023f ad1f 023f af49 023f af47 023f     a.?...?.I.?.G.?.
 23ffc70:	ad6b 023f ada9 023f ade3 023f ae29 023f     k.?...?...?.).?.
 23ffc80:	ae45 023f aec7 023f                         E.?...?.

023ffc88 <_ZTV15Adafruit_SPITFT>:
	...
 23ffc98:	b26d 023f d3bd 023f bb11 023f b5a7 023f     m.?...?...?...?.
 23ffca8:	bad3 023f b6c7 023f b97f 023f b927 023f     ..?...?...?.'.?.
 23ffcb8:	ac61 023f b5d3 023f af49 023f ba4d 023f     a.?...?.I.?.M.?.
 23ffcc8:	b8ab 023f b82b 023f b767 023f ae29 023f     ..?.+.?.g.?.).?.
 23ffcd8:	ae45 023f aec7 023f a651 023f a651 023f     E.?...?.Q.?.Q.?.

023ffce8 <_ZL11cmd_240x240>:
 23ffce8:	0109 9680 8011 3aff 5581 360a 0801 042a     .......:.U.6..*.
 23ffcf8:	0000 f000 042b 0000 f000 8021 130a 0a80     ....+.....!.....
 23ffd08:	8029 00ff                                   )...

023ffd0c <_ZTV15Adafruit_ST7789>:
	...
 23ffd14:	bbd7 023f bc3f 023f b26d 023f d3bd 023f     ..?.?.?.m.?...?.
 23ffd24:	bb11 023f b5a7 023f bad3 023f b6c7 023f     ..?...?...?...?.
 23ffd34:	b97f 023f b927 023f ac61 023f b5d3 023f     ..?.'.?.a.?...?.
 23ffd44:	bbd9 023f ba4d 023f b8ab 023f b82b 023f     ..?.M.?...?.+.?.
 23ffd54:	b767 023f ae29 023f ae45 023f aec7 023f     g.?.).?.E.?...?.
 23ffd64:	bd09 023f bd29 023f                         ..?.).?.

023ffd6c <_ZTV15Adafruit_ST77xx>:
	...
 23ffd74:	bc95 023f bd7b 023f b26d 023f d3bd 023f     ..?.{.?.m.?...?.
 23ffd84:	bb11 023f b5a7 023f bad3 023f b6c7 023f     ..?...?...?...?.
 23ffd94:	b97f 023f b927 023f ac61 023f b5d3 023f     ..?.'.?.a.?...?.
 23ffda4:	bc97 023f ba4d 023f b8ab 023f b82b 023f     ..?.M.?...?.+.?.
 23ffdb4:	b767 023f ae29 023f ae45 023f aec7 023f     g.?.).?.E.?...?.
 23ffdc4:	bd09 023f bd29 023f                         ..?.).?.

023ffdcc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffdd4:	caa9 023f caaf 023f caed 023f cabd 023f     ..?...?...?...?.
 23ffde4:	caab 023f                                   ..?.

023ffde8 <_ZTVN5spark13EthernetClassE>:
	...
 23ffdf0:	d033 023f d029 023f d01f 023f d015 023f     3.?.).?...?...?.
 23ffe00:	d009 023f cffd 023f d299 023f d2a1 023f     ..?...?...?...?.
 23ffe10:	cff1 023f cfe9 023f cfdf 023f cfd5 023f     ..?...?...?...?.
 23ffe20:	d2d1 023f                                   ..?.

023ffe24 <_ZTV7TwoWire>:
	...
 23ffe2c:	d051 023f d09b 023f d073 023f d053 023f     Q.?...?.s.?.S.?.
 23ffe3c:	d07b 023f d083 023f d08b 023f d093 023f     {.?...?...?...?.

023ffe4c <_ZTV9IPAddress>:
	...
 23ffe54:	d169 023f d159 023f d15b 023f 7061 0070     i.?.Y.?.[.?.app.

023ffe64 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe6c:	d259 023f d263 023f d26d 023f d277 023f     Y.?.c.?.m.?.w.?.
 23ffe7c:	d281 023f d28d 023f d299 023f d2a1 023f     ..?...?...?...?.
 23ffe8c:	d2a9 023f d2b5 023f d2bd 023f d2c7 023f     ..?...?...?...?.
 23ffe9c:	d2d1 023f                                   ..?.

023ffea0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffea0:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffeb0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffec0:	6d69 0065                                   ime.

023ffec4 <_ZTV11USARTSerial>:
	...
 23ffecc:	d62d 023f d699 023f d671 023f d3bd 023f     -.?...?.q.?...?.
 23ffedc:	d641 023f d65d 023f d64f 023f d66b 023f     A.?.].?.O.?.k.?.
 23ffeec:	d62f 023f d633 023f                         /.?.3.?.

023ffef4 <_ZTV9USBSerial>:
	...
 23ffefc:	d6dd 023f d745 023f d71b 023f d3bd 023f     ..?.E.?...?...?.
 23fff0c:	d70d 023f d6df 023f d6ef 023f d73f 023f     ..?...?...?.?.?.
 23fff1c:	d6ff 023f d6d7 023f                         ..?...?.

023fff24 <_ZTVN5spark9WiFiClassE>:
	...
 23fff2c:	d847 023f d83d 023f d833 023f d7e9 023f     G.?.=.?.3.?...?.
 23fff3c:	d827 023f d81b 023f d299 023f d2a1 023f     '.?...?...?...?.
 23fff4c:	d80f 023f d807 023f d7fd 023f d7f3 023f     ..?...?...?...?.
 23fff5c:	d2d1 023f                                   ..?.

023fff60 <_ZSt7nothrow>:
 23fff60:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff70:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff80:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff90:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd1 <link_const_data_end>:
 23fffd1:	00          	.byte	0x00
	...

023fffd4 <link_constructors_location>:
 23fffd4:	023fac35 	.word	0x023fac35
 23fffd8:	023fca99 	.word	0x023fca99
 23fffdc:	023fd03d 	.word	0x023fd03d
 23fffe0:	023fd249 	.word	0x023fd249
 23fffe4:	023fd3a9 	.word	0x023fd3a9
 23fffe8:	023fd485 	.word	0x023fd485
 23fffec:	023fd5f5 	.word	0x023fd5f5
 23ffff0:	023fd619 	.word	0x023fd619
 23ffff4:	023fd851 	.word	0x023fd851
